(self.webpackChunkocl_bb_library=self.webpackChunkocl_bb_library||[]).push([[5310],{9669:(module,__unused_webpack_exports,__webpack_require__)=>{eval("module.exports = __webpack_require__(51609);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTY2OS5qcyIsIm1hcHBpbmdzIjoiQUFBQSwyQ0FBdUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9vY2xfYmJfbGlicmFyeS8uL25vZGVfbW9kdWxlcy9heGlvcy9pbmRleC5qcz9iYzNhIl0sInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9saWIvYXhpb3MnKTsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///9669\n")},11741:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "Z": () => (/* binding */ Button)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(67294);\nfunction _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\nfunction _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nvar Button = /*#__PURE__*/function (_Component) {\n  _inherits(Button, _Component);\n  var _super = _createSuper(Button);\n  function Button() {\n    _classCallCheck(this, Button);\n    return _super.apply(this, arguments);\n  }\n  _createClass(Button, [{\n    key: "render",\n    value: function render() {\n      var imageBootstapStyleOverride = {\n        position: "relative",\n        top: "unset",\n        right: "unset"\n      };\n      var downloadLinkBootstapStyleOverride = {\n        display: "flex",\n        flexDirection: "row",\n        alignItems: "center",\n        gap: "12px"\n      };\n      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement("a", {\n        href: this.props.href,\n        target: this.props.target,\n        id: this.props.id,\n        onClick: this.props.onClick,\n        className: "btn " + this.props.className,\n        style: downloadLinkBootstapStyleOverride\n      }, this.props.text, this.props.icon, this.props.children, this.props.downloadBtn ? /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement("img", {\n        className: "subnav--cta---download_icon",\n        style: imageBootstapStyleOverride,\n        src: "/static/dist/img/icon_download.webp",\n        alt: "download_icon"\n      }) : "", "      ");\n    }\n  }]);\n  return Button;\n}(react__WEBPACK_IMPORTED_MODULE_0__.Component);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTE3NDEuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7O0FBQXlDO0FBQUEsSUFHcEJFLE1BQU07RUFBQTtFQUFBO0VBQUE7SUFBQTtJQUFBO0VBQUE7RUFBQTtJQUFBO0lBQUEsT0FFekIsa0JBQVM7TUFFUCxJQUFNQywwQkFBMEIsR0FBRztRQUNqQ0MsUUFBUSxFQUFFLFVBQVU7UUFDcEJDLEdBQUcsRUFBRSxPQUFPO1FBQ1pDLEtBQUssRUFBRTtNQUNULENBQUM7TUFFRCxJQUFNQyxpQ0FBaUMsR0FBRztRQUN4Q0MsT0FBTyxFQUFFLE1BQU07UUFDZkMsYUFBYSxFQUFFLEtBQUs7UUFDcEJDLFVBQVUsRUFBRSxRQUFRO1FBQ3BCQyxHQUFHLEVBQUU7TUFFUCxDQUFDO01BRUQsb0JBQ0U7UUFBRyxJQUFJLEVBQUUsSUFBSSxDQUFDQyxLQUFLLENBQUNDLElBQUs7UUFBQyxNQUFNLEVBQUUsSUFBSSxDQUFDRCxLQUFLLENBQUNFLE1BQU87UUFDbEQsRUFBRSxFQUFFLElBQUksQ0FBQ0YsS0FBSyxDQUFDRyxFQUFHO1FBQUMsT0FBTyxFQUFFLElBQUksQ0FBQ0gsS0FBSyxDQUFDSSxPQUFRO1FBQy9DLFNBQVMsRUFBRSxNQUFNLEdBQUcsSUFBSSxDQUFDSixLQUFLLENBQUNLLFNBQVU7UUFBQyxLQUFLLEVBQUVWO01BQWtDLEdBRWxGLElBQUksQ0FBQ0ssS0FBSyxDQUFDTSxJQUFJLEVBQUUsSUFBSSxDQUFDTixLQUFLLENBQUNPLElBQUksRUFBRSxJQUFJLENBQUNQLEtBQUssQ0FBQ1EsUUFBUSxFQUUzRCxJQUFJLENBQUNSLEtBQUssQ0FBQ1MsV0FBVyxnQkFDakI7UUFBSyxTQUFTLEVBQUMsNkJBQTZCO1FBQUMsS0FBSyxFQUFFbEIsMEJBQTJCO1FBQUMsR0FBRyxFQUFDLHFDQUFxQztRQUFDLEdBQUcsRUFBQztNQUFlLEVBQUcsR0FBQyxFQUFFLFdBQ2hKO0lBRVQ7RUFBQztFQUFBO0FBQUEsRUE3QmlDRiw0Q0FBUyIsInNvdXJjZXMiOlsid2VicGFjazovL29jbF9iYl9saWJyYXJ5Ly4vanMvY29tcG9uZW50cy9CdXR0b24uanN4PzgwYWQiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcclxuXHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBCdXR0b24gZXh0ZW5kcyBDb21wb25lbnQge1xyXG5cclxuICByZW5kZXIoKSB7XHJcblxyXG4gICAgY29uc3QgaW1hZ2VCb290c3RhcFN0eWxlT3ZlcnJpZGUgPSB7XHJcbiAgICAgIHBvc2l0aW9uOiBcInJlbGF0aXZlXCIsXHJcbiAgICAgIHRvcDogXCJ1bnNldFwiLFxyXG4gICAgICByaWdodDogXCJ1bnNldFwiXHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgZG93bmxvYWRMaW5rQm9vdHN0YXBTdHlsZU92ZXJyaWRlID0ge1xyXG4gICAgICBkaXNwbGF5OiBcImZsZXhcIixcclxuICAgICAgZmxleERpcmVjdGlvbjogXCJyb3dcIixcclxuICAgICAgYWxpZ25JdGVtczogXCJjZW50ZXJcIixcclxuICAgICAgZ2FwOiBcIjEycHhcIixcclxuICAgXHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIChcclxuICAgICAgPGEgaHJlZj17dGhpcy5wcm9wcy5ocmVmfSB0YXJnZXQ9e3RoaXMucHJvcHMudGFyZ2V0fVxyXG4gICAgICAgIGlkPXt0aGlzLnByb3BzLmlkfSBvbkNsaWNrPXt0aGlzLnByb3BzLm9uQ2xpY2t9XHJcbiAgICAgICAgY2xhc3NOYW1lPXtcImJ0biBcIiArIHRoaXMucHJvcHMuY2xhc3NOYW1lfSBzdHlsZT17ZG93bmxvYWRMaW5rQm9vdHN0YXBTdHlsZU92ZXJyaWRlfT5cclxuXHJcbiAgICAgICAge3RoaXMucHJvcHMudGV4dH17dGhpcy5wcm9wcy5pY29ufXt0aGlzLnByb3BzLmNoaWxkcmVufVxyXG5cclxuIHsgdGhpcy5wcm9wcy5kb3dubG9hZEJ0bj9cclxuICAgICAgICA8aW1nIGNsYXNzTmFtZT1cInN1Ym5hdi0tY3RhLS0tZG93bmxvYWRfaWNvblwiIHN0eWxlPXtpbWFnZUJvb3RzdGFwU3R5bGVPdmVycmlkZX0gc3JjPVwiL3N0YXRpYy9kaXN0L2ltZy9pY29uX2Rvd25sb2FkLndlYnBcIiBhbHQ9XCJkb3dubG9hZF9pY29uXCIgLz46XCJcIlxyXG59ICAgICAgPC9hPlxyXG4gICAgKVxyXG4gIH1cclxufSJdLCJuYW1lcyI6WyJSZWFjdCIsIkNvbXBvbmVudCIsIkJ1dHRvbiIsImltYWdlQm9vdHN0YXBTdHlsZU92ZXJyaWRlIiwicG9zaXRpb24iLCJ0b3AiLCJyaWdodCIsImRvd25sb2FkTGlua0Jvb3RzdGFwU3R5bGVPdmVycmlkZSIsImRpc3BsYXkiLCJmbGV4RGlyZWN0aW9uIiwiYWxpZ25JdGVtcyIsImdhcCIsInByb3BzIiwiaHJlZiIsInRhcmdldCIsImlkIiwib25DbGljayIsImNsYXNzTmFtZSIsInRleHQiLCJpY29uIiwiY2hpbGRyZW4iLCJkb3dubG9hZEJ0biJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///11741\n')},62592:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  "default": () => (/* binding */ GenericDashboardSetup_GenericChart)\n});\n\n// EXTERNAL MODULE: ./node_modules/react/index.js\nvar react = __webpack_require__(67294);\n// EXTERNAL MODULE: ./js/components/Subnav.jsx + 2 modules\nvar Subnav = __webpack_require__(92202);\n;// CONCATENATED MODULE: ./js/components/GenericDashboardSetup/helpers/citySelect.js\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\nfunction _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nvar phAddItem = function phAddItem(clickIndex, options, setSelected, setChartGroup, setOptions) {\n  var optionsTemp = [];\n  var selectTemp = [];\n  options.forEach(function (chart, cIndex) {\n    var optionsChart = [];\n    var selectChart = [];\n    chart.forEach(function (year, yIndex) {\n      var optionYear = _objectSpread(_objectSpread({}, year), {}, {\n        labels: year.labels.filter(function (clicked) {\n          return clicked === year.labels[clickIndex];\n        }),\n        values: year.values.filter(function (clicked) {\n          return clicked === year.values[clickIndex];\n        })\n      });\n      var selectYear = _objectSpread(_objectSpread({}, year), {}, {\n        labels: year.labels.filter(function (clicked) {\n          return clicked !== year.labels[clickIndex];\n        }),\n        values: year.values.filter(function (clicked) {\n          return clicked !== year.values[clickIndex];\n        })\n      });\n      optionsChart.push(optionYear);\n      selectChart.push(selectYear);\n    });\n    optionsTemp.push(optionsChart);\n    selectTemp.push(selectChart);\n  });\n  setSelected(function (prev) {\n    var newArr = prev;\n    var optionState = newArr.length > 1 ? newArr.map(function (chart, cIndex) {\n      var optionChart = optionsTemp[cIndex];\n      return chart.map(function (year, yIndex) {\n        //TODO: evaluate selection process further\n        var optionYear = _objectSpread(_objectSpread({}, year), {}, {\n          labels: _toConsumableArray(year.labels).concat(optionChart[yIndex].labels[0]),\n          values: _toConsumableArray(year.values).concat(optionChart[yIndex].values[0])\n        });\n        return optionYear;\n      });\n    }) : optionsTemp;\n    setChartGroup(function (prev) {\n      var newArr = prev;\n      newArr[0] = optionState[0];\n      newArr[1] = optionState[1];\n      newArr[2] = optionState[2];\n      newArr[3] = optionState[3];\n      newArr[4] = optionState[4];\n      return _toConsumableArray(newArr);\n    });\n    return _toConsumableArray(optionState);\n  });\n  setOptions(function (prev) {\n    var newArr = prev;\n    var selectedState = newArr.map(function (chart, cIndex) {\n      var selectedChart = selectTemp[cIndex];\n      return chart.map(function (year, yIndex) {\n        var selectedYear = selectedChart[yIndex];\n        return selectedYear;\n      });\n    });\n    return _toConsumableArray(selectedState);\n  });\n};\nvar phRemoveItem = function phRemoveItem(clickIndex, selected, setSelected, setChartGroup, setOptions) {\n  //set labels and chart data\n  var optionsTemp = [];\n  var selectTemp = [];\n  selected.forEach(function (chart, cIndex) {\n    var optionsChart = [];\n    var selectChart = [];\n    chart.forEach(function (year, yIndex) {\n      var optionYear = _objectSpread(_objectSpread({}, year), {}, {\n        labels: year.labels.filter(function (clicked) {\n          return clicked === year.labels[clickIndex];\n        }),\n        values: year.values.filter(function (clicked) {\n          return clicked === year.values[clickIndex];\n        })\n      });\n      var selectYear = _objectSpread(_objectSpread({}, year), {}, {\n        labels: year.labels.filter(function (clicked) {\n          return clicked !== year.labels[clickIndex];\n        }),\n        values: year.values.filter(function (clicked) {\n          return clicked !== year.values[clickIndex];\n        })\n      });\n      optionsChart.push(optionYear);\n      selectChart.push(selectYear);\n    });\n    optionsTemp.push(optionsChart);\n    selectTemp.push(selectChart);\n  });\n  setOptions(function (prev) {\n    var newArr = prev;\n    var optionState = newArr.length > 1 ? newArr.map(function (chart, cIndex) {\n      var optionChart = optionsTemp[cIndex];\n      return chart.map(function (year, yIndex) {\n        var optionYear = _objectSpread(_objectSpread({}, year), {}, {\n          labels: _toConsumableArray(year.labels).concat(optionChart[yIndex].labels[0]),\n          values: _toConsumableArray(year.values).concat(optionChart[yIndex].values[0])\n        });\n        return optionYear;\n      });\n    }) : optionsTemp;\n    return _toConsumableArray(optionState);\n  });\n  setSelected(function (prev) {\n    var newArr = prev;\n    var selectedState = newArr.map(function (chart, cIndex) {\n      var selectedChart = selectTemp[cIndex];\n      return chart.map(function (year, yIndex) {\n        var selectedYear = selectedChart[yIndex];\n        return selectedYear;\n      });\n    });\n    setChartGroup(function (prev) {\n      var newArr = prev;\n      newArr[0] = selectedState[0];\n      newArr[1] = selectedState[1];\n      newArr[2] = selectedState[2];\n      newArr[3] = selectedState[3];\n      newArr[4] = selectedState[4];\n      return _toConsumableArray(newArr);\n    });\n    return _toConsumableArray(selectedState);\n  });\n};\nvar phClearAll = function phClearAll(originalValues, setSelected, setOptions) {\n  setSelected(function (prev) {\n    var newArr = prev;\n    var cleared = newArr.map(function (chart) {\n      return chart.map(function (year) {\n        year.labels = [];\n        year.values = [];\n        return year;\n      });\n    });\n    return cleared;\n  });\n  setOptions(function (prev) {\n    var newArr = prev;\n    var fallbackValue = JSON.parse(JSON.stringify(originalValues));\n    var removed = fallbackValue.splice(-1);\n    var filled = newArr.length > 1 ? newArr.map(function (chart, cIndex) {\n      var fillRef = fallbackValue[cIndex];\n      return chart.map(function (year, yIndex) {\n        year.labels = [\'BUF\', \'CPT\', \'JHB\', \'EKH\', \'MAN\', \'PMB\', \'NMB\', \'TSH\', \'ETH\'];\n        year.values = fillRef[yIndex].values;\n        return year;\n      });\n    }) : fallbackValue;\n    return filled;\n  });\n};\nvar eAddItem = function eAddItem(clickIndex, options, setSelected, setChartGroup, setOptions) {\n  var optionsTemp = [];\n  var selectTemp = [];\n  options.forEach(function (chart, cIndex) {\n    var optionsChart = [];\n    var selectChart = [];\n    chart.forEach(function (year, yIndex) {\n      var optionYear = _objectSpread(_objectSpread({}, year), {}, {\n        labels: year.labels.filter(function (clicked) {\n          return clicked === year.labels[clickIndex];\n        }),\n        values: year.values.filter(function (clicked) {\n          return clicked === year.values[clickIndex];\n        })\n      });\n      var selectYear = _objectSpread(_objectSpread({}, year), {}, {\n        labels: year.labels.filter(function (clicked) {\n          return clicked !== year.labels[clickIndex];\n        }),\n        values: year.values.filter(function (clicked) {\n          return clicked !== year.values[clickIndex];\n        })\n      });\n      optionsChart.push(optionYear);\n      selectChart.push(selectYear);\n    });\n    optionsTemp.push(optionsChart);\n    selectTemp.push(selectChart);\n  });\n  setSelected(function (prev) {\n    var newArr = prev;\n    var optionState = newArr.length > 1 ? newArr.map(function (chart, cIndex) {\n      var optionChart = optionsTemp[cIndex];\n      return chart.map(function (year, yIndex) {\n        var optionYear = _objectSpread(_objectSpread({}, year), {}, {\n          labels: _toConsumableArray(year.labels).concat(optionChart[yIndex].labels[0]),\n          values: _toConsumableArray(year.values).concat(optionChart[yIndex].values[0])\n        });\n        return optionYear;\n      });\n    }) : optionsTemp;\n    setChartGroup(function (prev) {\n      var newArr = prev;\n\n      //dictates number of charts effected by add operation\n      newArr[0] = optionState[0];\n      newArr[1] = optionState[1];\n      newArr[2] = optionState[2];\n      newArr[3] = optionState[3];\n      return _toConsumableArray(newArr);\n    });\n    return _toConsumableArray(optionState);\n  });\n  setOptions(function (prev) {\n    var newArr = prev;\n    var selectedState = newArr.map(function (chart, cIndex) {\n      var selectedChart = selectTemp[cIndex];\n      return chart.map(function (year, yIndex) {\n        var selectedYear = selectedChart[yIndex];\n        return selectedYear;\n      });\n    });\n    return _toConsumableArray(selectedState);\n  });\n};\nvar eRemoveItem = function eRemoveItem(clickIndex, selected, setSelected, setChartGroup, setOptions) {\n  //set labels and chart data\n  var optionsTemp = [];\n  var selectTemp = [];\n  selected.forEach(function (chart, cIndex) {\n    var optionsChart = [];\n    var selectChart = [];\n    chart.forEach(function (year, yIndex) {\n      var optionYear = _objectSpread(_objectSpread({}, year), {}, {\n        labels: year.labels.filter(function (clicked) {\n          return clicked === year.labels[clickIndex];\n        }),\n        values: year.values.filter(function (clicked) {\n          return clicked === year.values[clickIndex];\n        })\n      });\n      var selectYear = _objectSpread(_objectSpread({}, year), {}, {\n        labels: year.labels.filter(function (clicked) {\n          return clicked !== year.labels[clickIndex];\n        }),\n        values: year.values.filter(function (clicked) {\n          return clicked !== year.values[clickIndex];\n        })\n      });\n      optionsChart.push(optionYear);\n      selectChart.push(selectYear);\n    });\n    optionsTemp.push(optionsChart);\n    selectTemp.push(selectChart);\n  });\n  setOptions(function (prev) {\n    var newArr = prev;\n    var optionState = newArr.length > 1 ? newArr.map(function (chart, cIndex) {\n      var optionChart = optionsTemp[cIndex];\n      return chart.map(function (year, yIndex) {\n        var optionYear = _objectSpread(_objectSpread({}, year), {}, {\n          labels: _toConsumableArray(year.labels).concat(optionChart[yIndex].labels[0]),\n          values: _toConsumableArray(year.values).concat(optionChart[yIndex].values[0])\n        });\n        return optionYear;\n      });\n    }) : optionsTemp;\n    return _toConsumableArray(optionState);\n  });\n  setSelected(function (prev) {\n    var newArr = prev;\n    var selectedState = newArr.map(function (chart, cIndex) {\n      var selectedChart = selectTemp[cIndex];\n      return chart.map(function (year, yIndex) {\n        var selectedYear = selectedChart[yIndex];\n        return selectedYear;\n      });\n    });\n    setChartGroup(function (prev) {\n      var newArr = prev;\n\n      //dictates number of charts effected by remove operation\n      newArr[0] = selectedState[0];\n      newArr[1] = selectedState[1];\n      newArr[2] = selectedState[2];\n      newArr[3] = selectedState[3];\n      return _toConsumableArray(newArr);\n    });\n    return _toConsumableArray(selectedState);\n  });\n};\nvar eClearAll = function eClearAll(originalValues, setSelected, setOptions) {\n  setSelected(function (prev) {\n    var newArr = prev;\n    var cleared = newArr.map(function (chart) {\n      return chart.map(function (year) {\n        year.labels = [];\n        year.values = [];\n        return year;\n      });\n    });\n    return cleared;\n  });\n  setOptions(function (prev) {\n    var newArr = prev;\n    var fallbackValue = JSON.parse(JSON.stringify(originalValues));\n    var filled = newArr.length > 1 ? newArr.map(function (chart, cIndex) {\n      var fillRef = fallbackValue[cIndex];\n      return chart.map(function (year, yIndex) {\n        year.labels = [\'BUF\', \'CPT\', \'JHB\', \'EKH\', \'MAN\', \'PMB\', \'NMB\', \'TSH\', \'ETH\'];\n        year.values = fillRef[yIndex].values;\n        return year;\n      });\n    }) : fallbackValue;\n    return filled;\n  });\n};\nvar hiAddItem = function hiAddItem(clickIndex, options, setSelected, setChartGroup, setOptions) {\n  var optionsTemp = [];\n  var selectTemp = [];\n  options.forEach(function (chart, cIndex) {\n    var optionsChart = [];\n    var selectChart = [];\n    chart.forEach(function (year, yIndex) {\n      var optionYear = _objectSpread(_objectSpread({}, year), {}, {\n        labels: year.labels.filter(function (clicked) {\n          return clicked === year.labels[clickIndex];\n        }),\n        values: year.values.filter(function (clicked) {\n          return clicked === year.values[clickIndex];\n        })\n      });\n      var selectYear = _objectSpread(_objectSpread({}, year), {}, {\n        labels: year.labels.filter(function (clicked) {\n          return clicked !== year.labels[clickIndex];\n        }),\n        values: year.values.filter(function (clicked) {\n          return clicked !== year.values[clickIndex];\n        })\n      });\n      optionsChart.push(optionYear);\n      selectChart.push(selectYear);\n    });\n    optionsTemp.push(optionsChart);\n    selectTemp.push(selectChart);\n  });\n  setSelected(function (prev) {\n    var newArr = prev;\n    var optionState = newArr.length > 0 ? newArr.map(function (chart, cIndex) {\n      var optionChart = optionsTemp[cIndex];\n      return chart.map(function (year, yIndex) {\n        var optionYear = _objectSpread(_objectSpread({}, year), {}, {\n          labels: _toConsumableArray(year.labels).concat(optionChart[yIndex].labels[0]),\n          values: _toConsumableArray(year.values).concat(optionChart[yIndex].values[0])\n        });\n        return optionYear;\n      });\n    }) : optionsTemp;\n    setChartGroup(function (prev) {\n      var newArr = prev;\n      newArr[0][0][0] = optionState[0];\n      newArr[0][0][1] = optionState[1];\n      return _toConsumableArray(newArr);\n    });\n    return _toConsumableArray(optionState);\n  });\n  setOptions(function (prev) {\n    var newArr = prev;\n    var selectedState = newArr.map(function (chart, cIndex) {\n      var selectedChart = selectTemp[cIndex];\n      return chart.map(function (year, yIndex) {\n        var selectedYear = selectedChart[yIndex];\n        return selectedYear;\n      });\n    });\n    return _toConsumableArray(selectedState);\n  });\n};\nvar hiRemoveItem = function hiRemoveItem(clickIndex, selected, setSelected, setChartGroup, setOptions) {\n  //set labels and chart data\n  var optionsTemp = [];\n  var selectTemp = [];\n  selected.forEach(function (chart, cIndex) {\n    var optionsChart = [];\n    var selectChart = [];\n    chart.forEach(function (year, yIndex) {\n      var optionYear = _objectSpread(_objectSpread({}, year), {}, {\n        labels: year.labels.filter(function (clicked) {\n          return clicked === year.labels[clickIndex];\n        }),\n        values: year.values.filter(function (clicked) {\n          return clicked === year.values[clickIndex];\n        })\n      });\n      var selectYear = _objectSpread(_objectSpread({}, year), {}, {\n        labels: year.labels.filter(function (clicked) {\n          return clicked !== year.labels[clickIndex];\n        }),\n        values: year.values.filter(function (clicked) {\n          return clicked !== year.values[clickIndex];\n        })\n      });\n      optionsChart.push(optionYear);\n      selectChart.push(selectYear);\n    });\n    optionsTemp.push(optionsChart);\n    selectTemp.push(selectChart);\n  });\n  setOptions(function (prev) {\n    var newArr = prev;\n    var optionState = newArr.length > 0 ? newArr.map(function (chart, cIndex) {\n      var optionChart = optionsTemp[cIndex];\n      return chart.map(function (year, yIndex) {\n        var optionYear = _objectSpread(_objectSpread({}, year), {}, {\n          labels: _toConsumableArray(year.labels).concat(optionChart[yIndex].labels[0]),\n          values: _toConsumableArray(year.values).concat(optionChart[yIndex].values[0])\n        });\n        return optionYear;\n      });\n    }) : optionsTemp;\n    return _toConsumableArray(optionState);\n  });\n  setSelected(function (prev) {\n    var newArr = prev;\n    var selectedState = newArr.map(function (chart, cIndex) {\n      var selectedChart = selectTemp[cIndex];\n      return chart.map(function (year, yIndex) {\n        var selectedYear = selectedChart[yIndex];\n        return selectedYear;\n      });\n    });\n    setChartGroup(function (prev) {\n      var newArr2 = prev;\n      newArr2[0][0][0] = selectedState[0];\n      newArr2[0][0][1] = selectedState[1];\n      return prev;\n    });\n    return _toConsumableArray(selectedState);\n  });\n};\nvar hiClearAll = function hiClearAll(originalValues, setSelected, setOptions) {\n  setOptions(function (prev) {\n    var fallbackValue = JSON.parse(JSON.stringify(originalValues));\n    return fallbackValue[0][0];\n  });\n  setSelected(function (prev) {\n    var newArr = prev;\n    var cleared = newArr.map(function (chart) {\n      return chart.map(function (year) {\n        year.labels = [];\n        year.values = [];\n        return year;\n      });\n    });\n    return cleared;\n  });\n};\nvar dAddItem = function dAddItem(clickIndex, options, setSelected, setChartGroup, setOptions) {\n  var optionsTemp = [];\n  var selectTemp = [];\n  options.forEach(function (chart, cIndex) {\n    var optionsChart = [];\n    var selectChart = [];\n    chart.forEach(function (year, yIndex) {\n      var optionYear = _objectSpread(_objectSpread({}, year), {}, {\n        labels: year.labels.filter(function (clicked) {\n          return clicked === year.labels[clickIndex];\n        }),\n        values: year.values.filter(function (clicked) {\n          return clicked === year.values[clickIndex];\n        })\n      });\n      var selectYear = _objectSpread(_objectSpread({}, year), {}, {\n        labels: year.labels.filter(function (clicked) {\n          return clicked !== year.labels[clickIndex];\n        }),\n        values: year.values.filter(function (clicked) {\n          return clicked !== year.values[clickIndex];\n        })\n      });\n      optionsChart.push(optionYear);\n      selectChart.push(selectYear);\n    });\n    optionsTemp.push(optionsChart);\n    selectTemp.push(selectChart);\n  });\n  setSelected(function (prev) {\n    var newArr = prev;\n    var optionState = newArr.length > 0 ? newArr.map(function (chart, cIndex) {\n      var optionChart = optionsTemp[cIndex];\n      return chart.map(function (year, yIndex) {\n        //TODO: evaluate selection process further\n        var optionYear = _objectSpread(_objectSpread({}, year), {}, {\n          labels: _toConsumableArray(year.labels).concat(optionChart[yIndex].labels[0]),\n          values: _toConsumableArray(year.values).concat(optionChart[yIndex].values[0])\n        });\n        return optionYear;\n      });\n    }) : optionsTemp;\n    setChartGroup(function (prev) {\n      var newArr = prev;\n      newArr[0] = optionState[0];\n      newArr[1] = optionState[1];\n      newArr[2] = optionState[2];\n      newArr[3] = optionState[3];\n      newArr[4] = optionState[4];\n      return _toConsumableArray(newArr);\n    });\n    return _toConsumableArray(optionState);\n  });\n  setOptions(function (prev) {\n    var newArr = prev;\n    var selectedState = newArr.map(function (chart, cIndex) {\n      var selectedChart = selectTemp[cIndex];\n      return chart.map(function (year, yIndex) {\n        var selectedYear = selectedChart[yIndex];\n        return selectedYear;\n      });\n    });\n    return _toConsumableArray(selectedState);\n  });\n};\nvar dRemoveItem = function dRemoveItem(clickIndex, selected, setSelected, setChartGroup, setOptions) {\n  //set labels and chart data\n  var optionsTemp = [];\n  var selectTemp = [];\n  selected.forEach(function (chart, cIndex) {\n    var optionsChart = [];\n    var selectChart = [];\n    chart.forEach(function (year, yIndex) {\n      var optionYear = _objectSpread(_objectSpread({}, year), {}, {\n        labels: year.labels.filter(function (clicked) {\n          return clicked === year.labels[clickIndex];\n        }),\n        values: year.values.filter(function (clicked) {\n          return clicked === year.values[clickIndex];\n        })\n      });\n      var selectYear = _objectSpread(_objectSpread({}, year), {}, {\n        labels: year.labels.filter(function (clicked) {\n          return clicked !== year.labels[clickIndex];\n        }),\n        values: year.values.filter(function (clicked) {\n          return clicked !== year.values[clickIndex];\n        })\n      });\n      optionsChart.push(optionYear);\n      selectChart.push(selectYear);\n    });\n    optionsTemp.push(optionsChart);\n    selectTemp.push(selectChart);\n  });\n  setOptions(function (prev) {\n    var newArr = prev;\n    var optionState = newArr.length > 1 ? newArr.map(function (chart, cIndex) {\n      var optionChart = optionsTemp[cIndex];\n      return chart.map(function (year, yIndex) {\n        var optionYear = _objectSpread(_objectSpread({}, year), {}, {\n          labels: _toConsumableArray(year.labels).concat(optionChart[yIndex].labels[0]),\n          values: _toConsumableArray(year.values).concat(optionChart[yIndex].values[0])\n        });\n        return optionYear;\n      });\n    }) : optionsTemp;\n    return _toConsumableArray(optionState);\n  });\n  setSelected(function (prev) {\n    var newArr = prev;\n    var selectedState = newArr.map(function (chart, cIndex) {\n      var selectedChart = selectTemp[cIndex];\n      return chart.map(function (year, yIndex) {\n        var selectedYear = selectedChart[yIndex];\n        return selectedYear;\n      });\n    });\n    setChartGroup(function (prev) {\n      var newArr = prev;\n      newArr[0] = selectedState[0];\n      newArr[1] = selectedState[1];\n      newArr[2] = selectedState[2];\n      newArr[3] = selectedState[3];\n      newArr[4] = selectedState[4];\n      return _toConsumableArray(newArr);\n    });\n    return _toConsumableArray(selectedState);\n  });\n};\nvar dClearAll = function dClearAll(originalValues, setSelected, setOptions) {\n  setSelected(function (prev) {\n    var newArr = prev;\n    var cleared = newArr.map(function (chart) {\n      return chart.map(function (year) {\n        year.labels = [];\n        year.values = [];\n        return year;\n      });\n    });\n    return cleared;\n  });\n  setOptions(function (prev) {\n    var newArr = prev;\n    var fallbackValue = JSON.parse(JSON.stringify(originalValues));\n    var filled = newArr.length > 0 ? newArr.map(function (chart, cIndex) {\n      var fillRef = fallbackValue[cIndex];\n      return chart.map(function (year, yIndex) {\n        year.labels = [\'BUF\', \'CPT\', \'JHB\', \'EKU\', \'MAN\', \'NMB\', \'TSH\', \'ETH\'];\n        year.values = fillRef[yIndex].values;\n        return year;\n      });\n    }) : fallbackValue;\n    return filled;\n  });\n};\nvar leAddItem = function leAddItem(clickIndex, options, setSelected, setChartGroup, setOptions) {\n  var optionsTemp = [];\n  var selectTemp = [];\n  options.forEach(function (chart, cIndex) {\n    var optionsChart = [];\n    var selectChart = [];\n    chart.forEach(function (year, yIndex) {\n      var optionYear = _objectSpread(_objectSpread({}, year), {}, {\n        labels: year.labels.filter(function (clicked) {\n          return clicked === year.labels[clickIndex];\n        }),\n        values: year.values.filter(function (clicked) {\n          return clicked === year.values[clickIndex];\n        })\n      });\n      var selectYear = _objectSpread(_objectSpread({}, year), {}, {\n        labels: year.labels.filter(function (clicked) {\n          return clicked !== year.labels[clickIndex];\n        }),\n        values: year.values.filter(function (clicked) {\n          return clicked !== year.values[clickIndex];\n        })\n      });\n      optionsChart.push(optionYear);\n      selectChart.push(selectYear);\n    });\n    optionsTemp.push(optionsChart);\n    selectTemp.push(selectChart);\n  });\n  setSelected(function (prev) {\n    var newArr = prev;\n    var optionState = newArr.length > 0 ? newArr.map(function (chart, cIndex) {\n      var optionChart = optionsTemp[cIndex];\n      return chart.map(function (year, yIndex) {\n        //TODO: evaluate selection process further\n        var optionYear = _objectSpread(_objectSpread({}, year), {}, {\n          labels: _toConsumableArray(year.labels).concat(optionChart[yIndex].labels[0]),\n          values: _toConsumableArray(year.values).concat(optionChart[yIndex].values[0])\n        });\n        return optionYear;\n      });\n    }) : optionsTemp;\n    setChartGroup(function (prev) {\n      var newArr = prev;\n      newArr[0] = optionState[0];\n      newArr[1] = optionState[1];\n      return _toConsumableArray(newArr);\n    });\n    return _toConsumableArray(optionState);\n  });\n  setOptions(function (prev) {\n    var newArr = prev;\n    var selectedState = newArr.map(function (chart, cIndex) {\n      var selectedChart = selectTemp[cIndex];\n      return chart.map(function (year, yIndex) {\n        var selectedYear = selectedChart[yIndex];\n        return selectedYear;\n      });\n    });\n    return _toConsumableArray(selectedState);\n  });\n};\nvar leRemoveItem = function leRemoveItem(clickIndex, selected, setSelected, setChartGroup, setOptions) {\n  //set labels and chart data\n  var optionsTemp = [];\n  var selectTemp = [];\n  console.log(selected, "select initial");\n  selected.forEach(function (chart, cIndex) {\n    var optionsChart = [];\n    var selectChart = [];\n    chart.forEach(function (year, yIndex) {\n      var optionYear = _objectSpread(_objectSpread({}, year), {}, {\n        labels: year.labels.filter(function (clicked) {\n          return clicked === year.labels[clickIndex];\n        }),\n        values: year.values.filter(function (clicked) {\n          return clicked === year.values[clickIndex];\n        })\n      });\n      var selectYear = _objectSpread(_objectSpread({}, year), {}, {\n        labels: year.labels.filter(function (clicked) {\n          return clicked !== year.labels[clickIndex];\n        }),\n        values: year.values.filter(function (clicked) {\n          return clicked !== year.values[clickIndex];\n        })\n      });\n      optionsChart.push(optionYear);\n      selectChart.push(selectYear);\n    });\n    console.log(optionsChart, "DROPDOWN", selectChart, "select");\n    optionsTemp.push(optionsChart);\n    selectTemp.push(selectChart);\n  });\n  setOptions(function (prev) {\n    var newArr = prev;\n    var optionState = newArr.length > 0 ? newArr.map(function (chart, cIndex) {\n      var optionChart = optionsTemp[cIndex];\n      return chart.map(function (year, yIndex) {\n        var optionYear = _objectSpread(_objectSpread({}, year), {}, {\n          labels: _toConsumableArray(year.labels).concat(optionChart[yIndex].labels[0]),\n          values: _toConsumableArray(year.values).concat(optionChart[yIndex].values[0])\n        });\n        return optionYear;\n      });\n    }) : optionsTemp;\n    return _toConsumableArray(optionState);\n  });\n  setSelected(function (prev) {\n    var newArr = prev;\n    var selectedState = newArr.map(function (chart, cIndex) {\n      var selectedChart = selectTemp[cIndex];\n      return chart.map(function (year, yIndex) {\n        var selectedYear = selectedChart[yIndex];\n        return selectedYear;\n      });\n    });\n    setChartGroup(function (prev) {\n      var newArr = prev;\n      newArr[0] = selectedState[0];\n      newArr[1] = selectedState[1];\n      return _toConsumableArray(newArr);\n    });\n    return _toConsumableArray(selectedState);\n  });\n};\nvar leClearAll = function leClearAll(originalValues, setSelected, setOptions) {\n  setSelected(function (prev) {\n    var newArr = prev;\n    var cleared = newArr.map(function (chart) {\n      return chart.map(function (year) {\n        year.labels = [];\n        year.values = [];\n        return year;\n      });\n    });\n    return cleared;\n  });\n  setOptions(function (prev) {\n    var newArr = prev;\n    var fallbackValue = JSON.parse(JSON.stringify(originalValues));\n    var removed = fallbackValue.splice(-1);\n    var filled = newArr.length > 0 ? newArr.map(function (chart, cIndex) {\n      var fillRef = fallbackValue[cIndex];\n      return chart.map(function (year, yIndex) {\n        year.labels = [\'BUF\', \'CPT\', \'JHB\', \'EKH\', \'MAN\', \'PMB\', \'NMB\', \'TSH\', \'ETH\'];\n        year.values = fillRef[yIndex].values;\n        return year;\n      });\n    }) : fallbackValue;\n    return filled;\n  });\n};\nvar fsAddItem = function fsAddItem(clickIndex, options, setSelected, setChartGroup, setOptions) {\n  var optionsTemp = [];\n  var selectTemp = [];\n  options.forEach(function (chart, cIndex) {\n    var optionsChart = [];\n    var selectChart = [];\n    chart.forEach(function (year, yIndex) {\n      var optionYear = _objectSpread(_objectSpread({}, year), {}, {\n        labels: year.labels.filter(function (clicked) {\n          return clicked === year.labels[clickIndex];\n        }),\n        values: year.values.filter(function (clicked) {\n          return clicked === year.values[clickIndex];\n        })\n      });\n      var selectYear = _objectSpread(_objectSpread({}, year), {}, {\n        labels: year.labels.filter(function (clicked) {\n          return clicked !== year.labels[clickIndex];\n        }),\n        values: year.values.filter(function (clicked) {\n          return clicked !== year.values[clickIndex];\n        })\n      });\n      optionsChart.push(optionYear);\n      selectChart.push(selectYear);\n    });\n    optionsTemp.push(optionsChart);\n    selectTemp.push(selectChart);\n  });\n  setSelected(function (prev) {\n    var newArr = prev;\n    var optionState = newArr.length > 0 ? newArr.map(function (chart, cIndex) {\n      var optionChart = optionsTemp[cIndex];\n      return chart.map(function (year, yIndex) {\n        //TODO: evaluate selection process further\n        var optionYear = _objectSpread(_objectSpread({}, year), {}, {\n          labels: _toConsumableArray(year.labels).concat(optionChart[yIndex].labels[0]),\n          values: _toConsumableArray(year.values).concat(optionChart[yIndex].values[0])\n        });\n        return optionYear;\n      });\n    }) : optionsTemp;\n    setChartGroup(function (prev) {\n      var newArr = prev;\n      newArr[0] = optionState[0];\n      newArr[1] = optionState[1];\n      newArr[2] = optionState[2];\n      newArr[3] = optionState[3];\n      newArr[4] = optionState[4];\n      newArr[5] = optionState[5];\n      return _toConsumableArray(newArr);\n    });\n    return _toConsumableArray(optionState);\n  });\n  setOptions(function (prev) {\n    var newArr = prev;\n    var selectedState = newArr.map(function (chart, cIndex) {\n      var selectedChart = selectTemp[cIndex];\n      return chart.map(function (year, yIndex) {\n        var selectedYear = selectedChart[yIndex];\n        return selectedYear;\n      });\n    });\n    return _toConsumableArray(selectedState);\n  });\n};\nvar fsRemoveItem = function fsRemoveItem(clickIndex, selected, setSelected, setChartGroup, setOptions) {\n  //set labels and chart data\n  var optionsTemp = [];\n  var selectTemp = [];\n  selected.forEach(function (chart, cIndex) {\n    var optionsChart = [];\n    var selectChart = [];\n    chart.forEach(function (year, yIndex) {\n      var optionYear = _objectSpread(_objectSpread({}, year), {}, {\n        labels: year.labels.filter(function (clicked) {\n          return clicked === year.labels[clickIndex];\n        }),\n        values: year.values.filter(function (clicked) {\n          return clicked === year.values[clickIndex];\n        })\n      });\n      var selectYear = _objectSpread(_objectSpread({}, year), {}, {\n        labels: year.labels.filter(function (clicked) {\n          return clicked !== year.labels[clickIndex];\n        }),\n        values: year.values.filter(function (clicked) {\n          return clicked !== year.values[clickIndex];\n        })\n      });\n      optionsChart.push(optionYear);\n      selectChart.push(selectYear);\n    });\n    optionsTemp.push(optionsChart);\n    selectTemp.push(selectChart);\n  });\n  setOptions(function (prev) {\n    var newArr = prev;\n    var optionState = newArr.length > 1 ? newArr.map(function (chart, cIndex) {\n      var optionChart = optionsTemp[cIndex];\n      return chart.map(function (year, yIndex) {\n        var optionYear = _objectSpread(_objectSpread({}, year), {}, {\n          labels: _toConsumableArray(year.labels).concat(optionChart[yIndex].labels[0]),\n          values: _toConsumableArray(year.values).concat(optionChart[yIndex].values[0])\n        });\n        return optionYear;\n      });\n    }) : optionsTemp;\n    return _toConsumableArray(optionState);\n  });\n  setSelected(function (prev) {\n    var newArr = prev;\n    var selectedState = newArr.map(function (chart, cIndex) {\n      var selectedChart = selectTemp[cIndex];\n      return chart.map(function (year, yIndex) {\n        var selectedYear = selectedChart[yIndex];\n        return selectedYear;\n      });\n    });\n    setChartGroup(function (prev) {\n      var newArr = prev;\n      newArr[0] = selectedState[0];\n      newArr[1] = selectedState[1];\n      newArr[2] = selectedState[2];\n      newArr[3] = selectedState[3];\n      newArr[4] = selectedState[4];\n      newArr[5] = selectedState[5];\n      return _toConsumableArray(newArr);\n    });\n    return _toConsumableArray(selectedState);\n  });\n};\nvar fsClearAll = function fsClearAll(originalValues, setSelected, setOptions) {\n  setSelected(function (prev) {\n    var newArr = prev;\n    var cleared = newArr.map(function (chart) {\n      return chart.map(function (year) {\n        year.labels = [];\n        year.values = [];\n        return year;\n      });\n    });\n    return cleared;\n  });\n  setOptions(function (prev) {\n    var newArr = prev;\n    var fallbackValue = JSON.parse(JSON.stringify(originalValues));\n    ///  let removed = fallbackValue\n    var filled = newArr.length > 0 ? newArr.map(function (chart, cIndex) {\n      var fillRef = fallbackValue[cIndex];\n      return chart.map(function (year, yIndex) {\n        year.labels = [\'BUF\', \'CPT\', \'JHB\', \'EKH\', \'MAN\', \'PMB\', \'NMB\', \'TSH\', \'ETH\'];\n        year.values = fillRef[yIndex].values;\n        return year;\n      });\n    }) : fallbackValue;\n    return filled;\n  });\n};\nvar edAddItem = function edAddItem(clickIndex, options, setSelected, setChartGroup, setOptions) {\n  var optionsTemp = [];\n  var selectTemp = [];\n  options.forEach(function (chart, cIndex) {\n    var optionsChart = [];\n    var selectChart = [];\n    chart.forEach(function (year, yIndex) {\n      var optionYear = _objectSpread(_objectSpread({}, year), {}, {\n        labels: year.labels.filter(function (clicked) {\n          return clicked === year.labels[clickIndex];\n        }),\n        values: year.values.filter(function (clicked) {\n          return clicked === year.values[clickIndex];\n        })\n      });\n      var selectYear = _objectSpread(_objectSpread({}, year), {}, {\n        labels: year.labels.filter(function (clicked) {\n          return clicked !== year.labels[clickIndex];\n        }),\n        values: year.values.filter(function (clicked) {\n          return clicked !== year.values[clickIndex];\n        })\n      });\n      optionsChart.push(optionYear);\n      selectChart.push(selectYear);\n    });\n    optionsTemp.push(optionsChart);\n    selectTemp.push(selectChart);\n  });\n  setSelected(function (prev) {\n    var newArr = prev;\n    var optionState = newArr.length > 0 ? newArr.map(function (chart, cIndex) {\n      var optionChart = optionsTemp[cIndex];\n      return chart.map(function (year, yIndex) {\n        var optionYear = _objectSpread(_objectSpread({}, year), {}, {\n          labels: _toConsumableArray(year.labels).concat(optionChart[yIndex].labels[0]),\n          values: _toConsumableArray(year.values).concat(optionChart[yIndex].values[0])\n        });\n        return optionYear;\n      });\n    }) : optionsTemp;\n    setChartGroup(function (prev) {\n      var newArr = prev;\n      newArr[0][0][0] = optionState[0];\n      newArr[0][0][1] = optionState[1];\n      return _toConsumableArray(newArr);\n    });\n    return _toConsumableArray(optionState);\n  });\n  setOptions(function (prev) {\n    var newArr = prev;\n    var selectedState = newArr.map(function (chart, cIndex) {\n      var selectedChart = selectTemp[cIndex];\n      return chart.map(function (year, yIndex) {\n        var selectedYear = selectedChart[yIndex];\n        return selectedYear;\n      });\n    });\n    return _toConsumableArray(selectedState);\n  });\n};\nvar edRemoveItem = function edRemoveItem(clickIndex, selected, setSelected, setChartGroup, setOptions) {\n  //set labels and chart data\n  var optionsTemp = [];\n  var selectTemp = [];\n  selected.forEach(function (chart, cIndex) {\n    var optionsChart = [];\n    var selectChart = [];\n    chart.forEach(function (year, yIndex) {\n      var optionYear = _objectSpread(_objectSpread({}, year), {}, {\n        labels: year.labels.filter(function (clicked) {\n          return clicked === year.labels[clickIndex];\n        }),\n        values: year.values.filter(function (clicked) {\n          return clicked === year.values[clickIndex];\n        })\n      });\n      var selectYear = _objectSpread(_objectSpread({}, year), {}, {\n        labels: year.labels.filter(function (clicked) {\n          return clicked !== year.labels[clickIndex];\n        }),\n        values: year.values.filter(function (clicked) {\n          return clicked !== year.values[clickIndex];\n        })\n      });\n      optionsChart.push(optionYear);\n      selectChart.push(selectYear);\n    });\n    optionsTemp.push(optionsChart);\n    selectTemp.push(selectChart);\n  });\n  setOptions(function (prev) {\n    var newArr = prev;\n    var optionState = newArr.length > 0 ? newArr.map(function (chart, cIndex) {\n      var optionChart = optionsTemp[cIndex];\n      return chart.map(function (year, yIndex) {\n        var optionYear = _objectSpread(_objectSpread({}, year), {}, {\n          labels: _toConsumableArray(year.labels).concat(optionChart[yIndex].labels[0]),\n          values: _toConsumableArray(year.values).concat(optionChart[yIndex].values[0])\n        });\n        return optionYear;\n      });\n    }) : optionsTemp;\n    return _toConsumableArray(optionState);\n  });\n  setSelected(function (prev) {\n    var newArr = prev;\n    var selectedState = newArr.map(function (chart, cIndex) {\n      var selectedChart = selectTemp[cIndex];\n      return chart.map(function (year, yIndex) {\n        var selectedYear = selectedChart[yIndex];\n        return selectedYear;\n      });\n    });\n    setChartGroup(function (prev) {\n      var newArr2 = prev;\n      newArr2[0][0][0] = selectedState[0];\n      newArr2[0][0][1] = selectedState[1];\n      return prev;\n    });\n    return _toConsumableArray(selectedState);\n  });\n};\nvar edClearAll = function edClearAll(originalValues, setSelected, setOptions) {\n  setOptions(function (prev) {\n    var fallbackValue = JSON.parse(JSON.stringify(originalValues));\n    return fallbackValue[0][0];\n  });\n  setSelected(function (prev) {\n    var newArr = prev;\n    var cleared = newArr.map(function (chart) {\n      return chart.map(function (year) {\n        year.labels = [];\n        year.values = [];\n        return year;\n      });\n    });\n    return cleared;\n  });\n};\nvar sustainabilityAddItem = function sustainabilityAddItem(clickIndex, options, setSelected, setChartGroup, setOptions) {\n  var optionsTemp = [];\n  var selectTemp = [];\n  options.forEach(function (chart, cIndex) {\n    var optionsChart = [];\n    var selectChart = [];\n    chart.forEach(function (year, yIndex) {\n      var optionYear = _objectSpread(_objectSpread({}, year), {}, {\n        labels: year.labels.filter(function (clicked) {\n          return clicked === year.labels[clickIndex];\n        }),\n        values: year.values.filter(function (clicked) {\n          return clicked === year.values[clickIndex];\n        })\n      });\n      var selectYear = _objectSpread(_objectSpread({}, year), {}, {\n        labels: year.labels.filter(function (clicked) {\n          return clicked !== year.labels[clickIndex];\n        }),\n        values: year.values.filter(function (clicked) {\n          return clicked !== year.values[clickIndex];\n        })\n      });\n      optionsChart.push(optionYear);\n      selectChart.push(selectYear);\n    });\n    optionsTemp.push(optionsChart);\n    selectTemp.push(selectChart);\n  });\n  setSelected(function (prev) {\n    var newArr = prev;\n    var optionState = newArr.length > 0 ? newArr.map(function (chart, cIndex) {\n      var optionChart = optionsTemp[cIndex];\n      return chart.map(function (year, yIndex) {\n        //TODO: evaluate selection process further\n        var optionYear = _objectSpread(_objectSpread({}, year), {}, {\n          labels: _toConsumableArray(year.labels).concat(optionChart[yIndex].labels[0]),\n          values: _toConsumableArray(year.values).concat(optionChart[yIndex].values[0])\n        });\n        return optionYear;\n      });\n    }) : optionsTemp;\n    setChartGroup(function (prev) {\n      var newArr = prev;\n      newArr[0] = optionState[0];\n      if (newArr[1]) newArr[1] = optionState[1];\n      return _toConsumableArray(newArr);\n    });\n    return _toConsumableArray(optionState);\n  });\n  setOptions(function (prev) {\n    var newArr = prev;\n    var selectedState = newArr.map(function (chart, cIndex) {\n      var selectedChart = selectTemp[cIndex];\n      return chart.map(function (year, yIndex) {\n        var selectedYear = selectedChart[yIndex];\n        return selectedYear;\n      });\n    });\n    return _toConsumableArray(selectedState);\n  });\n};\nvar sustainabilityRemoveItem = function sustainabilityRemoveItem(clickIndex, selected, setSelected, setChartGroup, setOptions) {\n  //set labels and chart data\n  var optionsTemp = [];\n  var selectTemp = [];\n  selected.forEach(function (chart, cIndex) {\n    var optionsChart = [];\n    var selectChart = [];\n    chart.forEach(function (year, yIndex) {\n      var optionYear = _objectSpread(_objectSpread({}, year), {}, {\n        labels: year.labels.filter(function (clicked) {\n          return clicked === year.labels[clickIndex];\n        }),\n        values: year.values.filter(function (clicked) {\n          return clicked === year.values[clickIndex];\n        })\n      });\n      var selectYear = _objectSpread(_objectSpread({}, year), {}, {\n        labels: year.labels.filter(function (clicked) {\n          return clicked !== year.labels[clickIndex];\n        }),\n        values: year.values.filter(function (clicked) {\n          return clicked !== year.values[clickIndex];\n        })\n      });\n      optionsChart.push(optionYear);\n      selectChart.push(selectYear);\n    });\n    optionsTemp.push(optionsChart);\n    selectTemp.push(selectChart);\n  });\n  setOptions(function (prev) {\n    var newArr = prev;\n    var optionState = newArr.length > 0 ? newArr.map(function (chart, cIndex) {\n      var optionChart = optionsTemp[cIndex];\n      return chart.map(function (year, yIndex) {\n        var optionYear = _objectSpread(_objectSpread({}, year), {}, {\n          labels: _toConsumableArray(year.labels).concat(optionChart[yIndex].labels[0]),\n          values: _toConsumableArray(year.values).concat(optionChart[yIndex].values[0])\n        });\n        return optionYear;\n      });\n    }) : optionsTemp;\n    return _toConsumableArray(optionState);\n  });\n  setSelected(function (prev) {\n    var newArr = prev;\n    var selectedState = newArr.map(function (chart, cIndex) {\n      var selectedChart = selectTemp[cIndex];\n      return chart.map(function (year, yIndex) {\n        var selectedYear = selectedChart[yIndex];\n        return selectedYear;\n      });\n    });\n    setChartGroup(function (prev) {\n      var newArr = prev;\n      newArr[0] = selectedState[0];\n      if (newArr[1]) newArr[1] = selectedState[1];\n      return _toConsumableArray(newArr);\n    });\n    return _toConsumableArray(selectedState);\n  });\n};\nvar sustainabilityClearAll = function sustainabilityClearAll(originalValues, setSelected, setOptions) {\n  setSelected(function (prev) {\n    var newArr = prev;\n    var cleared = newArr.map(function (chart) {\n      return chart.map(function (year) {\n        year.labels = [];\n        year.values = [];\n        return year;\n      });\n    });\n    return cleared;\n  });\n  setOptions(function (prev) {\n    var newArr = prev;\n    var fallbackValue = JSON.parse(JSON.stringify(originalValues));\n    var filled = newArr.length > 0 ? newArr.map(function (chart, cIndex) {\n      var fillRef = fallbackValue[cIndex];\n      return chart.map(function (year, yIndex) {\n        year.labels = [\'CPT\', \'EKU\', \'ETH\', \'JHB\', \'MAN\', \'TSH\'];\n        year.values = fillRef[yIndex].values;\n        return year;\n      });\n    }) : fallbackValue;\n    return filled;\n  });\n};\n;// CONCATENATED MODULE: ./svg_components/SelectIcons.jsx\n\nvar Line = function Line() {\n  return /*#__PURE__*/react.createElement("svg", {\n    className: "line_icon",\n    width: "1",\n    height: "12",\n    viewBox: "0 0 1 12",\n    fill: "none",\n    xmlns: "http://www.w3.org/2000/svg"\n  }, /*#__PURE__*/react.createElement("line", {\n    x1: "0.5",\n    y1: "-1.52588e-05",\n    x2: "0.5",\n    y2: "12",\n    stroke: "#ADADAD"\n  }));\n};\nvar ChevronDown = function ChevronDown(_ref) {\n  var drop = _ref.drop;\n  return /*#__PURE__*/react.createElement("svg", {\n    className: \'chevron_icon\',\n    onClick: drop,\n    width: "7",\n    height: "5",\n    viewBox: "0 0 7 5",\n    fill: "none",\n    xmlns: "http://www.w3.org/2000/svg"\n  }, /*#__PURE__*/react.createElement("path", {\n    d: "M3.1302 4.82938L0.154267 1.538C-0.0514223 1.3105 -0.0514223 0.942643 0.154267 0.71757L0.648796 0.17062C0.854486 -0.0568732 1.18709 -0.0568732 1.39059 0.17062L3.5 2.50363L5.60941 0.17062C5.8151 -0.0568732 6.1477 -0.0568732 6.3512 0.17062L6.84573 0.71757C7.05142 0.945063 7.05142 1.31292 6.84573 1.538L3.8698 4.82938C3.66849 5.05687 3.33589 5.05687 3.1302 4.82938Z",\n    fill: "#2F3442"\n  }));\n};\nvar XIcon = function XIcon(_ref2) {\n  var cancel = _ref2.cancel;\n  return /*#__PURE__*/react.createElement("svg", {\n    className: "x_icon",\n    onClick: cancel,\n    width: "8",\n    height: "8",\n    viewBox: "0 0 8 8",\n    fill: "none",\n    xmlns: "http://www.w3.org/2000/svg"\n  }, /*#__PURE__*/react.createElement("path", {\n    d: "M5.51636 4L7.79068 1.72568C8.06977 1.44659 8.06977 0.994091 7.79068 0.714773L7.28523 0.209318C7.00614 -0.0697727 6.55364 -0.0697727 6.27432 0.209318L4 2.48364L1.72568 0.209318C1.44659 -0.0697727 0.994091 -0.0697727 0.714773 0.209318L0.209318 0.714773C-0.0697727 0.993864 -0.0697727 1.44636 0.209318 1.72568L2.48364 4L0.209318 6.27432C-0.0697727 6.55341 -0.0697727 7.00591 0.209318 7.28523L0.714773 7.79068C0.993864 8.06977 1.44659 8.06977 1.72568 7.79068L4 5.51636L6.27432 7.79068C6.55341 8.06977 7.00614 8.06977 7.28523 7.79068L7.79068 7.28523C8.06977 7.00614 8.06977 6.55364 7.79068 6.27432L5.51636 4Z",\n    fill: "#4A4A4A"\n  }));\n};\n// EXTERNAL MODULE: ./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\nvar injectStylesIntoStyleTag = __webpack_require__(93379);\nvar injectStylesIntoStyleTag_default = /*#__PURE__*/__webpack_require__.n(injectStylesIntoStyleTag);\n// EXTERNAL MODULE: ./node_modules/style-loader/dist/runtime/styleDomAPI.js\nvar styleDomAPI = __webpack_require__(7795);\nvar styleDomAPI_default = /*#__PURE__*/__webpack_require__.n(styleDomAPI);\n// EXTERNAL MODULE: ./node_modules/style-loader/dist/runtime/insertBySelector.js\nvar insertBySelector = __webpack_require__(90569);\nvar insertBySelector_default = /*#__PURE__*/__webpack_require__.n(insertBySelector);\n// EXTERNAL MODULE: ./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js\nvar setAttributesWithoutAttributes = __webpack_require__(3565);\nvar setAttributesWithoutAttributes_default = /*#__PURE__*/__webpack_require__.n(setAttributesWithoutAttributes);\n// EXTERNAL MODULE: ./node_modules/style-loader/dist/runtime/insertStyleElement.js\nvar insertStyleElement = __webpack_require__(19216);\nvar insertStyleElement_default = /*#__PURE__*/__webpack_require__.n(insertStyleElement);\n// EXTERNAL MODULE: ./node_modules/style-loader/dist/runtime/styleTagTransform.js\nvar styleTagTransform = __webpack_require__(44589);\nvar styleTagTransform_default = /*#__PURE__*/__webpack_require__.n(styleTagTransform);\n// EXTERNAL MODULE: ./node_modules/css-loader/dist/cjs.js!./node_modules/sass-loader/dist/cjs.js!./scss/components/Select.scss\nvar Select = __webpack_require__(49596);\nvar Select_default = /*#__PURE__*/__webpack_require__.n(Select);\n;// CONCATENATED MODULE: ./scss/components/Select.scss\n\n      \n      \n      \n      \n      \n      \n      \n      \n      \n\nvar options = {};\n\noptions.styleTagTransform = (styleTagTransform_default());\noptions.setAttributes = (setAttributesWithoutAttributes_default());\n\n      options.insert = insertBySelector_default().bind(null, "head");\n    \noptions.domAPI = (styleDomAPI_default());\noptions.insertStyleElement = (insertStyleElement_default());\n\nvar update = injectStylesIntoStyleTag_default()((Select_default()), options);\n\n\n\n\n       /* harmony default export */ const components_Select = ((Select_default()) && (Select_default()).locals ? (Select_default()).locals : undefined);\n\n// EXTERNAL MODULE: ./js/context.jsx\nvar context = __webpack_require__(87644);\n;// CONCATENATED MODULE: ./js/components/GenericDashboardSetup/Organisms/Select.jsx\n\n\n\n\n\nvar Select_Select = function Select(_ref) {\n  var chartData = _ref.chartData,\n    originalValues = _ref.originalValues,\n    selected = _ref.selected,\n    options = _ref.options,\n    setSelected = _ref.setSelected,\n    setChartGroup = _ref.setChartGroup,\n    setOptions = _ref.setOptions,\n    removeItem = _ref.removeItem,\n    addItem = _ref.addItem,\n    clearAll = _ref.clearAll,\n    chartDropName = _ref.chartDropName,\n    isDropDownChart = _ref.isDropDownChart;\n  (0,react.useEffect)(function () {\n    selectedOptions();\n  }, [chartData]);\n  var selectContext = (0,context/* useSelectOpen */.zH)();\n  var closeAlerts = (0,context/* useCloseAllErrors */.pu)();\n  console.log(selected, "selected from selected");\n  var closeAllAlerts = function closeAllAlerts() {\n    var isClearable = false;\n    closeAlerts.error.forEach(function (item) {\n      if (item.errorThrown === true) {\n        isClearable = true;\n      }\n    });\n    if (isClearable) {\n      var newState = closeAlerts.error.map(function (obj) {\n        return {\n          errorThrown: false\n        };\n      });\n      closeAlerts.setError(newState);\n    }\n  };\n  var selectedOptions = function selectedOptions() {\n    var filtered = [];\n    if (chartDropName === "People and Households") {\n      chartData.forEach(function (chart, index) {\n        if (index > 4) return;\n        filtered.push(chart);\n      });\n    } else if (chartDropName === "Household Income" || chartDropName === "Education" || chartDropName === "Sustainability" && isDropDownChart) {\n      chartData[0][0].forEach(function (chart, index) {\n        filtered.push(chart);\n      });\n    } else if (chartDropName === "Life Expectancy and Health") {\n      chartData.forEach(function (chart, index) {\n        if (index > 1) return;\n        filtered.push(chart);\n      });\n    } else {\n      chartData.forEach(function (chart, index) {\n        filtered.push(chart);\n      });\n    }\n    setSelected(filtered);\n  };\n  return /*#__PURE__*/react.createElement("div", {\n    className: "conditional_select_wrapper",\n    onClick: closeAllAlerts\n  }, isDropDownChart ? /*#__PURE__*/react.createElement(react.Fragment, null, /*#__PURE__*/react.createElement("p", {\n    className: "select_title"\n  }, "Choose Cities:"), /*#__PURE__*/react.createElement("div", {\n    className: "custom_select",\n    onClick: function onClick() {\n      return selectContext.setSelect(!selectContext.selectOpen);\n    }\n  }, selected.length > 0 ? selected[0][0].labels.map(function (tag, index) {\n    return /*#__PURE__*/react.createElement("p", {\n      key: index.toString(),\n      className: "tag"\n    }, tag, /*#__PURE__*/react.createElement(XIcon, {\n      cancel: function cancel() {\n        removeItem(index, selected, setSelected, setChartGroup, setOptions);\n      }\n    }));\n  }) : "", /*#__PURE__*/react.createElement("div", {\n    className: "dropdownbox " + "".concat(selectContext.selectOpen ? "show" : "")\n  }, options.length > 0 ? options[0][0].labels.map(function (city, index) {\n    return /*#__PURE__*/react.createElement("p", {\n      key: index.toString(),\n      className: "drop_content",\n      onClick: function onClick() {\n        addItem(index, options, setSelected, setChartGroup, setOptions);\n      }\n    }, city);\n  }) : ""), /*#__PURE__*/react.createElement(XIcon, {\n    cancel: function cancel() {\n      clearAll(originalValues, setSelected, setOptions);\n    }\n  }), /*#__PURE__*/react.createElement(Line, null), /*#__PURE__*/react.createElement(ChevronDown, {\n    drop: function drop() {}\n  }))) : /*#__PURE__*/react.createElement("div", {\n    className: "custom_select",\n    onClick: function onClick() {\n      return selectContext.setSelect(!selectContext.selectOpen);\n    }\n  }, selected.length > 0 ? selected[0][0].labels.map(function (tag, index) {\n    return /*#__PURE__*/react.createElement("p", {\n      key: index.toString(),\n      className: "tag"\n    }, tag, /*#__PURE__*/react.createElement(XIcon, {\n      cancel: function cancel() {\n        removeItem(index, selected, setSelected, setChartGroup, setOptions);\n      }\n    }));\n  }) : "", /*#__PURE__*/react.createElement("div", {\n    className: "dropdownbox " + "".concat(selectContext.selectOpen ? "show" : "")\n  }, options.length > 0 ? options[0][0].labels.map(function (city, index) {\n    return /*#__PURE__*/react.createElement("p", {\n      key: index.toString(),\n      className: "drop_content",\n      onClick: function onClick() {\n        addItem(index, options, setSelected, setChartGroup, setOptions);\n      }\n    }, city);\n  }) : ""), /*#__PURE__*/react.createElement(XIcon, {\n    cancel: function cancel() {\n      clearAll(originalValues, setSelected, setOptions);\n    }\n  }), /*#__PURE__*/react.createElement(Line, null), /*#__PURE__*/react.createElement(ChevronDown, {\n    drop: function drop() {}\n  })));\n};\n// EXTERNAL MODULE: ./node_modules/react-chartjs-2/es/index.js\nvar es = __webpack_require__(46799);\n;// CONCATENATED MODULE: ./js/components/BarChartGeneric.jsx\n\n\nvar BarChartGeneric = function BarChartGeneric(_ref) {\n  var options = _ref.options,\n    data = _ref.data,\n    height = _ref.height;\n  return /*#__PURE__*/react.createElement(es/* Bar */.$Q, {\n    options: options,\n    data: data,\n    height: height,\n    plugins: [{\n      beforeInit: function beforeInit(chart, options) {\n        chart.legend.afterFit = function () {\n          if (chart.legend.margins) {\n            // Put some padding around the legend/labels\n            chart.legend.options.labels.padding = 12;\n          }\n        };\n      }\n    }]\n  });\n};\n// EXTERNAL MODULE: ./js/components/GenericDashboardSetup/helpers/helpers.js\nvar helpers = __webpack_require__(26623);\n;// CONCATENATED MODULE: ./js/components/GenericDashboardSetup/helpers/tickExceptions.js\nvar tickExceptionsForDwellings = function tickExceptionsForDwellings(dropdownName, chartIndex) {\n  var dwellingsConditions = {\n    dashboard: dropdownName === "Dwellings",\n    chart1: chartIndex === 0,\n    chart2: chartIndex === 1,\n    chart4: chartIndex === 3,\n    chart5: chartIndex === 4\n  };\n  var foodSecurityConditions = {\n    dashboard: dropdownName === "Food Security, Literacy and Inequality",\n    chart1: chartIndex === 0,\n    chart2: chartIndex === 1,\n    chart3: chartIndex === 2\n  };\n  var lifeExpectancyConditions = {\n    dashboard: dropdownName === "Life Expectancy and Health",\n    chart1: chartIndex === 0,\n    chart2: chartIndex === 1,\n    chart3: chartIndex === 2,\n    chart4: chartIndex === 3\n  };\n  if (dwellingsConditions.dashboard) {\n    if (dwellingsConditions.chart1) {\n      return {\n        fontFamily: "Montserrat",\n        min: 0,\n        max: 100,\n        callback: function callback(value) {\n          return value + "";\n        }\n      };\n    } else if (dwellingsConditions.chart2) {\n      return {\n        fontFamily: "Montserrat",\n        min: 0,\n        max: 50,\n        callback: function callback(value) {\n          return value + "";\n        }\n      };\n    } else if (dwellingsConditions.chart4) {\n      return {\n        fontFamily: "Montserrat",\n        min: 0,\n        max: 25,\n        callback: function callback(value) {\n          return value + "";\n        }\n      };\n    } else if (dwellingsConditions.chart5) {\n      return {\n        fontFamily: "Montserrat",\n        min: 0,\n        max: 25,\n        callback: function callback(value) {\n          return value + "";\n        }\n      };\n    } else {\n      return {\n        fontFamily: "Montserrat",\n        beginAtZero: true,\n        callback: function callback(value, index, values) {\n          if (value < 1000000 && value > 1000) {\n            values = Math.round(value) / 1000 + \'K \';\n          } else if (value >= 1000000) {\n            values = Math.round(value) / 1000000 + \'M \';\n          } else if (value <= 1000 && value > 11) {\n            values = Math.round(value) / 1;\n          } else if (value <= 11) {\n            values = value;\n          }\n          return values;\n        }\n      };\n    }\n  } else if (foodSecurityConditions.dashboard) {\n    if (foodSecurityConditions.chart1) {\n      return {\n        fontFamily: "Montserrat",\n        min: 0,\n        max: 100,\n        callback: function callback(value) {\n          return value + "";\n        }\n      };\n    } else if (foodSecurityConditions.chart2) {\n      return {\n        fontFamily: "Montserrat",\n        min: 0,\n        max: 80,\n        callback: function callback(value) {\n          return value + "";\n        }\n      };\n    } else if (foodSecurityConditions.chart3) {\n      return {\n        fontFamily: "Montserrat",\n        min: 0,\n        max: 80,\n        callback: function callback(value) {\n          return value + "";\n        }\n      };\n    } else {\n      return {\n        fontFamily: "Montserrat",\n        beginAtZero: true,\n        callback: function callback(value, index, values) {\n          if (value < 1000000 && value > 1000) {\n            values = Math.round(value) / 1000 + \'K \';\n          } else if (value >= 1000000) {\n            values = Math.round(value) / 1000000 + \'M \';\n          } else if (value <= 1000 && value > 11) {\n            values = Math.round(value) / 1;\n          } else if (value <= 11) {\n            values = value;\n          }\n          return values;\n        }\n      };\n    }\n  } else if (lifeExpectancyConditions.dashboard) {\n    if (lifeExpectancyConditions.chart2) {\n      return {\n        fontFamily: "Montserrat",\n        min: 0,\n        max: 80,\n        callback: function callback(value) {\n          return value + "";\n        }\n      };\n    } else if (lifeExpectancyConditions.chart4) {\n      return {\n        fontFamily: "Montserrat",\n        min: 0,\n        max: 70,\n        callback: function callback(value) {\n          return value + "";\n        }\n      };\n    } else {\n      return {\n        fontFamily: "Montserrat",\n        beginAtZero: true,\n        callback: function callback(value, index, values) {\n          if (value < 1000000 && value > 1000) {\n            values = Math.round(value) / 1000 + \'K \';\n          } else if (value >= 1000000) {\n            values = Math.round(value) / 1000000 + \'M \';\n          } else if (value <= 1000 && value > 11) {\n            values = Math.round(value) / 1;\n          } else if (value <= 11) {\n            values = value;\n          }\n          return values;\n        }\n      };\n    }\n  } else {\n    return {\n      fontFamily: "Montserrat",\n      beginAtZero: true,\n      callback: function callback(value, index, values) {\n        if (value < 1000000 && value > 1000) {\n          values = Math.round(value) / 1000 + \'K \';\n        } else if (value >= 1000000) {\n          values = Math.round(value) / 1000000 + \'M \';\n        } else if (value <= 1000 && value > 11) {\n          values = Math.round(value) / 1;\n        } else if (value <= 11) {\n          values = value;\n        }\n        return values;\n      }\n    };\n  }\n};\n;// CONCATENATED MODULE: ./js/components/GenericDashboardSetup/Chart.jsx\nfunction Chart_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\n\nvar Chart = function Chart(_ref) {\n  var graphData = _ref.graphData,\n    title = _ref.title,\n    dropdownName = _ref.dropdownName,\n    stacked = _ref.stacked,\n    chartIndex = _ref.chartIndex,\n    genericIndex = _ref.genericIndex;\n  var options = {\n    responsive: true,\n    maintainAspectRatio: true,\n    legend: {\n      display: true,\n      labels: {\n        fontSize: 12,\n        boxWidth: 25,\n        fontColor: \'rgba(74, 74, 74, 1)\',\n        fontFamily: \'Montserrat\'\n      },\n      onHover: function onHover(e) {\n        e.target.style.cursor = \'pointer\';\n      }\n    },\n    scales: {\n      xAxes: [Chart_defineProperty({\n        stacked: stacked,\n        gridLines: {\n          display: false\n        },\n        ticks: {\n          fontFamily: "Montserrat",\n          fontSize: 12,\n          fontStyle: \'600\'\n        }\n      }, "gridLines", {\n        display: false\n      })],\n      yAxes: [{\n        stacked: stacked,\n        scaleLabel: {\n          display: true,\n          labelString: title,\n          fontFamily: "Montserrat",\n          fontSize: 12,\n          fontStyle: \'600\',\n          fontColor: "rgba(74, 74, 74, 1)"\n        },\n        gridLines: {\n          display: false\n        },\n        ticks: stacked ? {\n          fontFamily: "Montserrat",\n          min: 0,\n          max: 100,\n          callback: function callback(value) {\n            return value + "";\n          }\n        } : tickExceptionsForDwellings(dropdownName, chartIndex)\n      }]\n    },\n    tooltips: {\n      mode: \'index\',\n      intercept: false,\n      callbacks: {\n        label: function label(tooltipItem, data) {\n          var label = data.datasets[tooltipItem.datasetIndex].label || \'\';\n          if (label) {\n            label += \': \';\n          }\n          label += isNaN(tooltipItem.yLabel) ? \'0\' : Math.round(tooltipItem.yLabel * 100) / 100;\n          return label;\n        }\n      }\n    }\n  };\n  var data = {\n    labels: graphData[0].labels.map(function (city) {\n      return (0,helpers/* cityLabels */.Xn)(city);\n    }),\n    datasets: graphData.map(function (item, index) {\n      return {\n        label: item.year,\n        data: item.values,\n        backgroundColor: item.color\n      };\n    })\n  };\n  return /*#__PURE__*/react.createElement(react.Fragment, null, /*#__PURE__*/react.createElement(BarChartGeneric, {\n    options: options,\n    data: data,\n    height: (0,helpers/* chartHeights */.S1)(dropdownName, genericIndex)\n  }));\n};\n// EXTERNAL MODULE: ./node_modules/css-loader/dist/cjs.js!./node_modules/sass-loader/dist/cjs.js!./scss/components/chart/ChartHeader.scss\nvar ChartHeader = __webpack_require__(84050);\nvar ChartHeader_default = /*#__PURE__*/__webpack_require__.n(ChartHeader);\n;// CONCATENATED MODULE: ./scss/components/chart/ChartHeader.scss\n\n      \n      \n      \n      \n      \n      \n      \n      \n      \n\nvar ChartHeader_options = {};\n\nChartHeader_options.styleTagTransform = (styleTagTransform_default());\nChartHeader_options.setAttributes = (setAttributesWithoutAttributes_default());\n\n      ChartHeader_options.insert = insertBySelector_default().bind(null, "head");\n    \nChartHeader_options.domAPI = (styleDomAPI_default());\nChartHeader_options.insertStyleElement = (insertStyleElement_default());\n\nvar ChartHeader_update = injectStylesIntoStyleTag_default()((ChartHeader_default()), ChartHeader_options);\n\n\n\n\n       /* harmony default export */ const chart_ChartHeader = ((ChartHeader_default()) && (ChartHeader_default()).locals ? (ChartHeader_default()).locals : undefined);\n\n;// CONCATENATED MODULE: ./svg_components/ErrorClose.jsx\n\nvar ErrorClose = function ErrorClose(_ref) {\n  var onClick = _ref.onClick;\n  return /*#__PURE__*/react.createElement("svg", {\n    className: "cancel",\n    onClick: onClick,\n    width: "14",\n    height: "14",\n    viewBox: "0 0 14 14",\n    fill: "none",\n    xmlns: "http://www.w3.org/2000/svg"\n  }, /*#__PURE__*/react.createElement("path", {\n    d: "M1 1L13 13M13 1L1 13",\n    stroke: "#4A4A4A",\n    strokeWidth: "2",\n    strokeLinecap: "round"\n  }));\n};\n;// CONCATENATED MODULE: ./js/components/GenericDashboardSetup/helpers/dropdownChartTitles.js\n\nvar dropdownChartTitle = function dropdownChartTitle(indicator_ids, hhiDropdownNames, selectedDropDownChart, secondaryChartIndex, dropname, isNumber) {\n  if (secondaryChartIndex === 0 && dropname === "Sustainability") {\n    return /*#__PURE__*/react.createElement("p", {\n      className: "title"\n    }, isNumber ? "Number" : "Proportion", " of households whose main source of energy/fuel is:", /*#__PURE__*/react.createElement("span", {\n      className: "category"\n    }, " ", hhiDropdownNames(indicator_ids[0])[selectedDropDownChart].shortName, " "));\n  }\n  if (secondaryChartIndex === 1 && dropname === "Sustainability") {\n    return /*#__PURE__*/react.createElement("p", {\n      className: "title"\n    }, isNumber ? "Number" : "Proportion", " of households who experience:", /*#__PURE__*/react.createElement("span", {\n      className: "category"\n    }, " ", hhiDropdownNames(indicator_ids[0])[selectedDropDownChart].shortName, " "));\n  }\n  if (dropname === "Education") {\n    return /*#__PURE__*/react.createElement("p", {\n      className: "title"\n    }, "Schooling Level", /*#__PURE__*/react.createElement("span", {\n      className: "category"\n    }, " ", hhiDropdownNames(indicator_ids[0])[selectedDropDownChart].shortName, " "));\n  } else {\n    return /*#__PURE__*/react.createElement("p", {\n      className: "title"\n    }, "Main Source of Income:", /*#__PURE__*/react.createElement("span", {\n      className: "category"\n    }, " ", hhiDropdownNames(indicator_ids[0])[selectedDropDownChart].shortName, " "));\n  }\n};\nvar getYAxisTitle = function getYAxisTitle(isNumber, genericIndex, dropname) {\n  var yAxisTitles = isNumber ? "Population" : "Percentage of Population";\n  if (genericIndex === 0 && dropname === "Sustainability") {\n    yAxisTitles = isNumber ? "Number of Households" : "Percentage of Households";\n  }\n  if (genericIndex === 1 && dropname === "Sustainability") {\n    yAxisTitles = isNumber ? "Number of Households" : "Percentage of Households";\n  }\n  return yAxisTitles;\n};\nvar getSourceTitle = function getSourceTitle(genericIndex, dropname) {\n  var source = /*#__PURE__*/react.createElement("p", {\n    className: "dropdown_chart_source"\n  }, " ", /*#__PURE__*/react.createElement("span", {\n    className: "source_pre"\n  }, "Source:"), " Calculated from Stats SA General Household Survey");\n  return source;\n};\n;// CONCATENATED MODULE: ./js/components/GenericDashboardSetup/Organisms/ChartWrapper.jsx\nfunction ChartWrapper_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction ChartWrapper_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ChartWrapper_ownKeys(Object(source), !0).forEach(function (key) { ChartWrapper_defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ChartWrapper_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction ChartWrapper_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\n\n\n\n\nvar ChartWrapper = function ChartWrapper(_ref) {\n  var chartGroup = _ref.chartGroup,\n    indicator_ids = _ref.indicator_ids,\n    dropdownName = _ref.dropdownName,\n    toggle = _ref.toggle,\n    isNumber = _ref.isNumber,\n    selectedDropDownChart = _ref.selectedDropDownChart,\n    genericIndex = _ref.genericIndex;\n  var errorContext = (0,context/* useCloseAllErrors */.pu)();\n  var setErrorState = function setErrorState(index) {\n    var newState = errorContext.error.map(function (obj, errorIndex) {\n      if (errorIndex === index) {\n        return ChartWrapper_objectSpread(ChartWrapper_objectSpread({}, obj), {}, {\n          errorThrown: true\n        });\n      }\n      return obj;\n    });\n    errorContext.setError(newState);\n  };\n  var clearErrorState = function clearErrorState(index) {\n    var newState = errorContext.error.map(function (obj, errorIndex) {\n      if (errorIndex === index) {\n        return ChartWrapper_objectSpread(ChartWrapper_objectSpread({}, obj), {}, {\n          errorThrown: false\n        });\n      }\n      return obj;\n    });\n    errorContext.setError(newState);\n  };\n  var clearAllErrors = function clearAllErrors() {\n    var isClearable = false;\n    errorContext.error.forEach(function (item) {\n      if (item.errorThrown === true) {\n        isClearable = true;\n      }\n    });\n    if (isClearable) {\n      var newState = errorContext.error.map(function (obj) {\n        return {\n          errorThrown: false\n        };\n      });\n      errorContext.setError(newState);\n    }\n  };\n  var items = [];\n  var chartTitles = dropdownName === "People and Households" ? helpers/* phChartTitles */.oX : dropdownName === "Employment" ? helpers/* echartTitles */.cf : dropdownName === "Dwellings" ? helpers/* dChartTitles */.hG : dropdownName === "Household Income" ? helpers/* hiChartTitles */.fY : dropdownName === "Life Expectancy and Health" ? helpers/* leChartTitles */.a6 : dropdownName === "Food Security, Literacy and Inequality" ? helpers/* fsChartTitles */.yC : dropdownName === "Sustainability" ? (0,helpers/* sustainabilityChartTitles */.$d)(dropdownName, genericIndex) : [];\n  var elements = chartGroup;\n  var _loop = function _loop(i) {\n    var element = elements[i];\n    if (typeof indicator_ids[i] === "number") {\n      var codebookUrl = "/scoda/toolkit#/codebook-explorer/".concat(indicator_ids[i]);\n      items.push( /*#__PURE__*/react.createElement("div", {\n        className: "chart_wrapper",\n        key: i.toString(),\n        onClick: clearAllErrors\n      }, /*#__PURE__*/react.createElement("div", {\n        className: "heading_wrapper"\n      }, dropdownName === "Household Income" ? /*#__PURE__*/react.createElement("p", {\n        className: "title"\n      }, "Main Source of Income:", /*#__PURE__*/react.createElement("span", {\n        className: "category"\n      }, "placeholder")) : dropdownName === "Sustainability" && genericIndex === 3 ? /*#__PURE__*/react.createElement("p", {\n        className: "heading_alternate"\n      }, chartTitles.main[i].split(":")[0] + ":", /*#__PURE__*/react.createElement("span", {\n        className: "secondary_title"\n      }, chartTitles.main[i].split(":")[1])) : /*#__PURE__*/react.createElement("div", {\n        className: "heading"\n      }, chartTitles.main[i]), dropdownName === "Household Income" ? /*#__PURE__*/react.createElement("div", {\n        className: "button_group"\n      }, /*#__PURE__*/react.createElement("button", {\n        className: isNumber ? "number" : "number deselect",\n        onClick: function onClick() {\n          toggle(true);\n        }\n      }, "Number"), /*#__PURE__*/react.createElement("button", {\n        className: isNumber ? "percent" : "percent select",\n        onClick: function onClick() {\n          toggle(false);\n        }\n      }, "Percent"), /*#__PURE__*/react.createElement("a", {\n        className: "link",\n        href: codebookUrl,\n        target: "_blank"\n      }, "Raw Data")) : /*#__PURE__*/react.createElement("a", {\n        className: "link",\n        href: codebookUrl,\n        target: "_blank"\n      }, "Raw Data")), chartTitles.hasOwnProperty("source") && /*#__PURE__*/react.createElement("p", {\n        className: "source_title"\n      }, " ", /*#__PURE__*/react.createElement("span", {\n        className: "source_pre"\n      }, "Source:"), chartTitles.source[i]), /*#__PURE__*/react.createElement("div", {\n        className: "chart"\n      }, /*#__PURE__*/react.createElement(Chart, {\n        graphData: element,\n        title: dropdownName === "Household Income" && !isNumber ? "Percent of Households" : chartTitles.yAxes[i],\n        dropdownName: dropdownName,\n        stacked: false,\n        chartIndex: i,\n        genericIndex: genericIndex\n      }))));\n    } else if (Array.isArray(indicator_ids[i])) {\n      var _codebookUrl = "/scoda/toolkit#/codebook-explorer/".concat((0,helpers/* hhiDropdownNames */.No)(indicator_ids[0])[selectedDropDownChart].endpoints[isNumber ? 1 : 0]);\n      items.push( /*#__PURE__*/react.createElement("div", {\n        className: "chart_wrapper",\n        key: i.toString(),\n        onClick: clearAllErrors\n      }, /*#__PURE__*/react.createElement("div", {\n        className: "heading_wrapper"\n      }, dropdownChartTitle(indicator_ids, helpers/* hhiDropdownNames */.No, selectedDropDownChart, genericIndex, dropdownName, isNumber), /*#__PURE__*/react.createElement("div", {\n        className: "button_group"\n      }, /*#__PURE__*/react.createElement("button", {\n        className: isNumber ? "number" : "number deselect",\n        onClick: function onClick() {\n          toggle(true);\n        }\n      }, "Number"), /*#__PURE__*/react.createElement("button", {\n        className: isNumber ? "percent" : "percent select",\n        onClick: function onClick() {\n          toggle(false);\n        }\n      }, "Percent"), /*#__PURE__*/react.createElement("a", {\n        className: "link",\n        href: _codebookUrl,\n        target: "_blank"\n      }, "Raw Data"))), getSourceTitle(genericIndex, dropdownName), /*#__PURE__*/react.createElement("div", {\n        className: "chart"\n      }, /*#__PURE__*/react.createElement(Chart, {\n        graphData: isNumber ? JSON.parse(JSON.stringify(chartGroup[0][0][0])) : JSON.parse(JSON.stringify(chartGroup[0][0][1])),\n        title: getYAxisTitle(isNumber, genericIndex, dropdownName),\n        dropdownName: dropdownName,\n        stacked: false,\n        chartIndex: i,\n        genericIndex: genericIndex\n      }))));\n    } else if (typeof indicator_ids[i] === "string" && (indicator_ids[i].charAt(0) === "n" || indicator_ids[i] === "single year combination chart")) {\n      items.push( /*#__PURE__*/react.createElement("div", {\n        className: "chart_wrapper",\n        key: indicator_ids[i].toString(),\n        onClick: clearAllErrors\n      }, /*#__PURE__*/react.createElement("div", {\n        className: "heading_wrapper"\n      }, /*#__PURE__*/react.createElement("div", {\n        className: "heading"\n      }, chartTitles.main[i]), /*#__PURE__*/react.createElement("a", {\n        className: "link",\n        onClick: function onClick() {\n          setErrorState(i);\n        },\n        style: {\n          opacity: "0.4"\n        }\n      }, "Raw Data")), chartTitles.hasOwnProperty("source") && /*#__PURE__*/react.createElement("p", {\n        className: "source_title"\n      }, " ", /*#__PURE__*/react.createElement("span", {\n        className: "source_pre"\n      }, "Source:"), chartTitles.source[i]), /*#__PURE__*/react.createElement("div", {\n        className: "chart"\n      }, /*#__PURE__*/react.createElement(Chart, {\n        graphData: element,\n        title: chartTitles.yAxes[i],\n        dropdownName: dropdownName,\n        stacked: false,\n        chartIndex: i,\n        genericIndex: genericIndex\n      })), errorContext.error[i].errorThrown ? /*#__PURE__*/react.createElement("div", {\n        className: "error_message"\n      }, /*#__PURE__*/react.createElement("div", {\n        className: "top"\n      }, /*#__PURE__*/react.createElement("p", {\n        className: "title"\n      }, "Sorry!"), /*#__PURE__*/react.createElement(ErrorClose, {\n        onClick: function onClick() {\n          clearErrorState(i);\n        }\n      })), /*#__PURE__*/react.createElement("p", {\n        className: "body"\n      }, "Raw data is not available for this indicator.")) : ""));\n    } else if (indicator_ids[i] === "combination") {\n      items.push( /*#__PURE__*/react.createElement("div", {\n        className: "chart_wrapper",\n        key: i.toString(),\n        onClick: clearAllErrors\n      }, /*#__PURE__*/react.createElement("div", {\n        className: "heading_wrapper"\n      }, /*#__PURE__*/react.createElement("p", {\n        className: "heading"\n      }, chartTitles.main[i], /*#__PURE__*/react.createElement("span", {\n        className: "combination_year"\n      }, " (2018)")), /*#__PURE__*/react.createElement("a", {\n        className: "link",\n        onClick: function onClick() {\n          setErrorState(i);\n        },\n        style: {\n          opacity: "0.4"\n        }\n      }, "Raw Data")), /*#__PURE__*/react.createElement("div", {\n        className: "chart"\n      }, /*#__PURE__*/react.createElement(Chart, {\n        graphData: element,\n        title: chartTitles.yAxes[i],\n        dropdownName: dropdownName,\n        stacked: true,\n        genericIndex: genericIndex\n      })), errorContext.error[i].errorThrown ? /*#__PURE__*/react.createElement("div", {\n        className: "error_message"\n      }, /*#__PURE__*/react.createElement("div", {\n        className: "top"\n      }, /*#__PURE__*/react.createElement("p", {\n        className: "title"\n      }, "Sorry!"), /*#__PURE__*/react.createElement(ErrorClose, {\n        onClick: function onClick() {\n          clearErrorState(i);\n        }\n      })), /*#__PURE__*/react.createElement("p", {\n        className: "body"\n      }, "Raw data is not available for this indicator.")) : ""));\n    } else if (indicator_ids[i] === "indicator text box") {\n      var codebookUrlForText = "/scoda/toolkit#/codebook-explorer/".concat((0,helpers/* hhiDropdownNames */.No)(indicator_ids[0])[selectedDropDownChart].endpoints[isNumber ? 1 : 0]);\n      items.push( /*#__PURE__*/react.createElement("div", {\n        className: "chart_wrapper",\n        key: i.toString()\n      }, /*#__PURE__*/react.createElement("div", {\n        className: "heading_wrapper text_box"\n      }, /*#__PURE__*/react.createElement("div", {\n        className: "heading"\n      }, "Selected Indicator")), /*#__PURE__*/react.createElement("div", {\n        className: "text"\n      }, /*#__PURE__*/react.createElement("div", {\n        className: "headings"\n      }, /*#__PURE__*/react.createElement("p", {\n        className: "code"\n      }, "CODE"), /*#__PURE__*/react.createElement("p", {\n        className: "name"\n      }, "NAME")), /*#__PURE__*/react.createElement("div", {\n        className: "content"\n      }, /*#__PURE__*/react.createElement("p", {\n        className: "code"\n      }, isNumber ? (0,helpers/* hhiDropdownNames */.No)(indicator_ids[0])[selectedDropDownChart].numberCode : (0,helpers/* hhiDropdownNames */.No)(indicator_ids[0])[selectedDropDownChart].percentCode), /*#__PURE__*/react.createElement("p", {\n        className: "name"\n      }, isNumber ? (0,helpers/* hhiDropdownNames */.No)(indicator_ids[0])[selectedDropDownChart].numberName : (0,helpers/* hhiDropdownNames */.No)(indicator_ids[0])[selectedDropDownChart].percentName)), /*#__PURE__*/react.createElement("a", {\n        className: "view_codebook",\n        href: codebookUrlForText,\n        target: "_blank"\n      }, "View Indicator in data explorer"))));\n    }\n  };\n  for (var i = 0; i < elements.length; i++) {\n    _loop(i);\n  }\n  return items;\n};\n;// CONCATENATED MODULE: ./js/components/GenericDashboardSetup/Organisms/MiniSelect.jsx\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || MiniSelect_unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction MiniSelect_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return MiniSelect_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return MiniSelect_arrayLikeToArray(o, minLen); }\nfunction MiniSelect_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\nfunction _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\n\n\nvar MiniSelect = function MiniSelect(_ref) {\n  var names = _ref.names,\n    selected = _ref.selected,\n    setSelected = _ref.setSelected,\n    setSelectedChart = _ref.setSelectedChart,\n    isDropDownChart = _ref.isDropDownChart,\n    dropdownName = _ref.dropdownName,\n    genericIndex = _ref.genericIndex;\n  var _useState = (0,react.useState)(false),\n    _useState2 = _slicedToArray(_useState, 2),\n    show = _useState2[0],\n    visibility = _useState2[1];\n  var select = function select(index) {\n    setSelected(typeof names[index] === "string" ? names[index] : names[index].shortName);\n    if (isDropDownChart) {\n      setSelectedChart(index);\n    }\n  };\n  return isDropDownChart ? /*#__PURE__*/react.createElement("div", {\n    className: "title_wrapper"\n  }, /*#__PURE__*/react.createElement("p", {\n    className: "dropdown_title"\n  }, dropdownName === "Education" ? "SCHOOLING LEVEL" : dropdownName === "Sustainability" && genericIndex === 0 ? "ENERGY TYPE" : dropdownName === "Sustainability" && genericIndex === 1 ? "POLLUTION TYPE" : "Main Source of Income:"), /*#__PURE__*/react.createElement("div", {\n    className: \'mini_select macro_select\',\n    onClick: function onClick() {\n      visibility(!show);\n    }\n  }, /*#__PURE__*/react.createElement("p", {\n    className: "title"\n  }, selected), /*#__PURE__*/react.createElement("div", {\n    className: "dropdownbox " + "".concat(show ? "show" : "")\n  }, names.map(function (city, index) {\n    return /*#__PURE__*/react.createElement("p", {\n      key: index.toString(),\n      className: "drop_content",\n      onClick: function onClick() {\n        select(index);\n      }\n    }, typeof city === "string" ? city : city.shortName);\n  })), /*#__PURE__*/react.createElement(ChevronDown, {\n    drop: function drop() {\n      visibility(!show);\n    }\n  }))) : /*#__PURE__*/react.createElement("div", {\n    className: \'mini_select\',\n    onClick: function onClick() {\n      visibility(!show);\n    }\n  }, /*#__PURE__*/react.createElement("p", {\n    className: "title"\n  }, selected), /*#__PURE__*/react.createElement("div", {\n    className: "dropdownbox " + "".concat(show ? "show" : "")\n  }, names.map(function (city, index) {\n    return /*#__PURE__*/react.createElement("p", {\n      key: index.toString(),\n      className: "drop_content",\n      onClick: function onClick() {\n        select(index);\n      }\n    }, typeof city === "string" ? city : city.shortName);\n  })), /*#__PURE__*/react.createElement(ChevronDown, {\n    drop: function drop() {\n      visibility(!show);\n    }\n  }));\n};\n;// CONCATENATED MODULE: ./js/components/GenericDashboardSetup/ChartGrid.jsx\nfunction ChartGrid_slicedToArray(arr, i) { return ChartGrid_arrayWithHoles(arr) || ChartGrid_iterableToArrayLimit(arr, i) || ChartGrid_unsupportedIterableToArray(arr, i) || ChartGrid_nonIterableRest(); }\nfunction ChartGrid_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction ChartGrid_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return ChartGrid_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return ChartGrid_arrayLikeToArray(o, minLen); }\nfunction ChartGrid_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\nfunction ChartGrid_iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }\nfunction ChartGrid_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\n\n\n\n\n\nvar ChartGrid = function ChartGrid(_ref) {\n  var indicator_ids = _ref.indicator_ids,\n    chartGroup = _ref.chartGroup,\n    setChartGroup = _ref.setChartGroup,\n    originalValues = _ref.originalValues,\n    dropdownName = _ref.dropdownName,\n    gridItems = _ref.gridItems,\n    secondDropDown = _ref.secondDropDown,\n    selectedName = _ref.selectedName,\n    setSelectedName = _ref.setSelectedName,\n    setSelectedChart = _ref.setSelectedChart,\n    selectedDropDownChart = _ref.selectedDropDownChart,\n    genericIndex = _ref.genericIndex;\n  var _useState = (0,react.useState)(true),\n    _useState2 = ChartGrid_slicedToArray(_useState, 2),\n    isNumber = _useState2[0],\n    toggle = _useState2[1];\n  var _useState3 = (0,react.useState)([]),\n    _useState4 = ChartGrid_slicedToArray(_useState3, 2),\n    selected = _useState4[0],\n    setSelected = _useState4[1];\n  var _useState5 = (0,react.useState)([]),\n    _useState6 = ChartGrid_slicedToArray(_useState5, 2),\n    options = _useState6[0],\n    setOptions = _useState6[1];\n  var chartData = chartGroup;\n  var selectControls = dropdownName === "People and Households" ? {\n    removeItem: phRemoveItem,\n    addItem: phAddItem,\n    clearAll: phClearAll\n  } : dropdownName === "Employment" ? {\n    removeItem: eRemoveItem,\n    addItem: eAddItem,\n    clearAll: eClearAll\n  } : dropdownName === "Dwellings" ? {\n    removeItem: dRemoveItem,\n    addItem: dAddItem,\n    clearAll: dClearAll\n  } : dropdownName === "Household Income" ? {\n    removeItem: hiRemoveItem,\n    addItem: hiAddItem,\n    clearAll: hiClearAll\n  } : dropdownName === "Life Expectancy and Health" ? {\n    removeItem: leRemoveItem,\n    addItem: leAddItem,\n    clearAll: leClearAll\n  } : dropdownName === "Food Security, Literacy and Inequality" ? {\n    removeItem: fsRemoveItem,\n    addItem: fsAddItem,\n    clearAll: fsClearAll\n  } : dropdownName === "Education" ? {\n    removeItem: edRemoveItem,\n    addItem: edAddItem,\n    clearAll: edClearAll\n  } : dropdownName === "Sustainability" && secondDropDown ? {\n    removeItem: hiRemoveItem,\n    addItem: hiAddItem,\n    clearAll: hiClearAll\n  } : dropdownName === "Sustainability" && genericIndex === 2 ? {\n    removeItem: sustainabilityRemoveItem,\n    addItem: sustainabilityAddItem,\n    clearAll: sustainabilityClearAll\n  } : dropdownName === "Sustainability" && genericIndex === 3 ? {\n    removeItem: sustainabilityRemoveItem,\n    addItem: sustainabilityAddItem,\n    clearAll: sustainabilityClearAll\n  } : {};\n  var isDropDownChart = Array.isArray(indicator_ids[0]);\n  var globalCityDropDownClose = (0,context/* useGlobalClose */.L6)();\n  var chartWrapperClassNames = gridItems > 4 && dropdownName !== "Food Security, Literacy and Inequality" ? "grid-container" : gridItems > 4 && dropdownName === "Food Security, Literacy and Inequality" ? "grid-container horizontal_food" : gridItems === 4 && dropdownName === "Life Expectancy and Health" ? "grid-container-4 horizontal" : gridItems === 4 && dropdownName !== "Life Expectancy and Health" ? "grid-container-4" : gridItems === 2 && indicator_ids.includes("indicator text box") ? "grid-2-text" : gridItems === 2 ? "grid-only-charts-2" : "grid-container-1";\n  return /*#__PURE__*/react.createElement("div", {\n    className: "chart_grid",\n    onClick: function onClick() {\n      globalCityDropDownClose();\n    }\n  }, /*#__PURE__*/react.createElement("div", {\n    className: "rounded_container"\n  }, /*#__PURE__*/react.createElement("div", {\n    className: isDropDownChart ? "select_wrapper double" : "select_wrapper"\n  }, /*#__PURE__*/react.createElement(Select_Select, {\n    chartData: chartGroup,\n    originalValues: originalValues,\n    selected: selected,\n    options: options,\n    setChartGroup: setChartGroup,\n    setOptions: setOptions,\n    setSelected: setSelected,\n    removeItem: selectControls.removeItem,\n    addItem: selectControls.addItem,\n    clearAll: selectControls.clearAll,\n    chartDropName: dropdownName,\n    isDropDownChart: isDropDownChart\n  }), isDropDownChart ? /*#__PURE__*/react.createElement(MiniSelect, {\n    names: secondDropDown,\n    selected: selectedName,\n    setSelectedChart: setSelectedChart,\n    setSelected: setSelectedName,\n    isDropDownChart: isDropDownChart,\n    dropdownName: dropdownName,\n    genericIndex: genericIndex\n  }) : ""), /*#__PURE__*/react.createElement("div", {\n    className: chartWrapperClassNames\n  }, /*#__PURE__*/react.createElement(ChartWrapper, {\n    chartGroup: chartData,\n    indicator_ids: indicator_ids,\n    dropdownName: dropdownName,\n    toggle: toggle,\n    isNumber: isNumber,\n    selectedDropDownChart: selectedDropDownChart,\n    genericIndex: genericIndex\n  }))));\n};\n// EXTERNAL MODULE: ./node_modules/axios/index.js\nvar axios = __webpack_require__(9669);\nvar axios_default = /*#__PURE__*/__webpack_require__.n(axios);\n;// CONCATENATED MODULE: ./js/components/GenericDashboardSetup/helpers/statsBar.js\nfunction _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }\nfunction _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; }, $Symbol = "function" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || "@@iterator", asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator", toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, ""); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return defineProperty(generator, "_invoke", { value: makeInvokeMethod(innerFn, self, context) }), generator; } function tryCatch(fn, obj, arg) { try { return { type: "normal", arg: fn.call(obj, arg) }; } catch (err) { return { type: "throw", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { ["next", "throw", "return"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if ("throw" !== record.type) { var result = record.arg, value = result.value; return value && "object" == _typeof(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke("next", value, resolve, reject); }, function (err) { invoke("throw", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke("throw", error, resolve, reject); }); } reject(record.arg); } var previousPromise; defineProperty(this, "_invoke", { value: function value(method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(innerFn, self, context) { var state = "suspendedStart"; return function (method, arg) { if ("executing" === state) throw new Error("Generator is already running"); if ("completed" === state) { if ("throw" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) { if ("suspendedStart" === state) throw state = "completed", context.arg; context.dispatchException(context.arg); } else "return" === context.method && context.abrupt("return", context.arg); state = "executing"; var record = tryCatch(innerFn, self, context); if ("normal" === record.type) { if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg); } }; } function maybeInvokeDelegate(delegate, context) { var method = delegate.iterator[context.method]; if (undefined === method) { if (context.delegate = null, "throw" === context.method) { if (delegate.iterator["return"] && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method)) return ContinueSentinel; context.method = "throw", context.arg = new TypeError("The iterator does not provide a \'throw\' method"); } return ContinueSentinel; } var record = tryCatch(method, delegate.iterator, context.arg); if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = "normal", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: "root" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if ("function" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), defineProperty(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) { var ctor = "function" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, "toString", function () { return "[object Generator]"; }), exports.keys = function (val) { var object = Object(val), keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if ("throw" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if ("root" === entry.tryLoc) return handle("end"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, "catchLoc"), hasFinally = hasOwn.call(entry, "finallyLoc"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error("try statement without catch or finally"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if ("throw" === record.type) throw record.arg; return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, "catch": function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if ("throw" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, "next" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\nfunction statsBar_slicedToArray(arr, i) { return statsBar_arrayWithHoles(arr) || statsBar_iterableToArrayLimit(arr, i) || statsBar_unsupportedIterableToArray(arr, i) || statsBar_nonIterableRest(); }\nfunction statsBar_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction statsBar_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return statsBar_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return statsBar_arrayLikeToArray(o, minLen); }\nfunction statsBar_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\nfunction statsBar_iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }\nfunction statsBar_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }\nfunction statsBar_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction statsBar_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? statsBar_ownKeys(Object(source), !0).forEach(function (key) { statsBar_defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : statsBar_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction statsBar_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nvar getStatTotals = function getStatTotals(originalValues, cityLabels, setStats, selected) {\n  var totalHouseHolds = 0;\n  var houseHoldSize = 0;\n  var populationDensity = 0;\n  if (originalValues.length < 1) return;\n  //Totals\n  originalValues[0].forEach(function (values, index) {\n    var valueIndex = values.labels.indexOf(cityLabels(selected));\n    if (values.year !== "2018" && valueIndex !== -1) return;\n    totalHouseHolds = values.values[valueIndex];\n  });\n  originalValues[1].forEach(function (values, index) {\n    var valueIndex = values.labels.indexOf(cityLabels(selected));\n    if (values.year !== "2018" && valueIndex !== -1) return;\n    houseHoldSize = values.values[valueIndex];\n  });\n  originalValues[4].forEach(function (values, index) {\n    var valueIndex = values.labels.indexOf(cityLabels(selected));\n    if (values.year !== "2018" && valueIndex !== -1) return;\n    populationDensity = values.values[valueIndex];\n  });\n  axios_default().get("/api/stats?indicator_id=704&average=True&year=2018").then(function (res) {\n    setStats(function (prev) {\n      return statsBar_objectSpread(statsBar_objectSpread({}, prev), {}, {\n        totalHouseHoldsAverage: [Math.round(res.data.total_average), "TOTAL Households"]\n      });\n    });\n  });\n  axios_default().get("/api/stats?indicator_id=1&average=True&year=2018&temp_indicator=".concat(true)).then(function (res) {\n    setStats(function (prev) {\n      return statsBar_objectSpread(statsBar_objectSpread({}, prev), {}, {\n        houseHoldSizeAverage: [Math.round(res.data.total_average), "Household size"]\n      });\n    });\n  });\n  axios_default().get("/api/stats?indicator_id=701&average=True&year=2018").then(function (res) {\n    setStats(function (prev) {\n      return statsBar_objectSpread(statsBar_objectSpread({}, prev), {}, {\n        populationDensityAverage: [Math.round(res.data.total_average), "Population Density"]\n      });\n    });\n  });\n  setStats(function (prev) {\n    return statsBar_objectSpread(statsBar_objectSpread({}, prev), {}, {\n      totalHouseHolds: [Math.round(totalHouseHolds), "TOTAL Households"],\n      houseHoldSize: [Math.round(houseHoldSize), "Household size"],\n      populationDensity: [Math.round(populationDensity), "Population Density"]\n    });\n  });\n};\nvar getEmploymentStatTotals = function getEmploymentStatTotals(setStats, selected) {\n  var endpoints = [\'/api/explore_new?indicator_id=909\', \'/api/explore_new?indicator_id=915\', \'/api/explore_new?indicator_id=918\', \'/api/explore_new?indicator_id=921\'];\n  var salariesAve = 0;\n  axios_default().get("/api/stats?indicator_id=900&average=True&year=2018").then(function (res) {\n    setStats(function (prev) {\n      var newArr = statsBar_objectSpread({}, prev);\n      newArr.salariesAve = [Math.round(res.data.total_average), "Salaries/wages/ commission"];\n      return statsBar_objectSpread({}, newArr);\n    });\n  });\n  axios_default().get("/api/explore_new?indicator_id=900").then(function (res) {\n    res.data.forEach(function (values, index) {\n      var valueIndex = values.labels.indexOf(selected);\n      if (values.year !== "2018") return;\n      salariesAve = values.values.reduce(function (a, b) {\n        return a + b;\n      }, 0) / values.values.length;\n      if (values.year !== "2018" && valueIndex !== -1) return;\n      setStats(function (prev) {\n        var newArr = statsBar_objectSpread({}, prev);\n        newArr.salaries = [Math.round(values.values[valueIndex]), "Salaries/wages/ commission"];\n        return statsBar_objectSpread({}, newArr);\n      });\n    });\n  });\n  var businessAve = 0;\n  axios_default().get("/api/explore_new?indicator_id=903").then(function (res) {\n    res.data.forEach(function (values, index) {\n      var valueIndex = values.labels.indexOf(selected);\n      if (values.year !== "2018") return;\n      businessAve = values.values.reduce(function (a, b) {\n        return a + b;\n      }, 0) / values.values.length;\n      if (values.year !== "2018" && valueIndex !== -1) return;\n      setStats(function (prev) {\n        var newArr = prev;\n        newArr.businessIncome = [Math.round(values.values[valueIndex]), "Income from a business"];\n        newArr.businessIncomeAve = [Math.round(businessAve), "Income from a business"];\n        return newArr;\n      });\n    });\n  });\n  var remAve = 0;\n  axios_default().get("/api/explore_new?indicator_id=906").then(function (res) {\n    res.data.forEach(function (values, index) {\n      var valueIndex = values.labels.indexOf(selected);\n      if (values.year !== "2018") return;\n      remAve = values.values.reduce(function (a, b) {\n        return a + b;\n      }, 0) / values.values.length;\n      if (values.year !== "2018" && valueIndex !== -1) return;\n      setStats(function (prev) {\n        var newArr = statsBar_objectSpread({}, prev);\n        newArr.remittances = [Math.round(values.values[valueIndex]), "Remittances"];\n        newArr.remittancesAve = [Math.round(remAve), "Remittances"];\n        return statsBar_objectSpread({}, newArr);\n      });\n    });\n  });\n  var grantAve = 0;\n  axios_default().get("/api/explore_new?indicator_id=912").then(function (res) {\n    res.data.forEach(function (values, index) {\n      var valueIndex = values.labels.indexOf(selected);\n      if (values.year !== "2018") return;\n      grantAve = values.values.reduce(function (a, b) {\n        return a + b;\n      }, 0) / values.values.length;\n      if (values.year !== "2018" && valueIndex !== -1) return;\n      setStats(function (prev) {\n        var newArr = prev;\n        newArr.grants = [Math.round(values.values[valueIndex]), "Grants"];\n        newArr.grantsAve = [Math.round(grantAve), "Grants"];\n        return statsBar_objectSpread({}, newArr);\n      });\n    });\n  });\n  Promise.all(endpoints.map(function (endpoint) {\n    return axios_default().get(endpoint);\n  })).then(function (data) {\n    var totalOther = 0;\n    var total = 0;\n    data.forEach(function (item, index) {\n      item.data.forEach(function (values, index) {\n        var valueIndex = values.labels.indexOf(selected);\n        if (values.year !== "2018") return;\n        total += values.values.reduce(function (a, b) {\n          return a + b;\n        }, 0) / values.values.length;\n        if (values.year !== "2018" && valueIndex !== -1) return;\n        totalOther += values.values[valueIndex] === undefined ? 0 : values.values[valueIndex];\n      });\n    });\n    setStats(function (prev) {\n      var newArr = statsBar_objectSpread({}, prev);\n      newArr.other = [Math.round(totalOther), "Other"];\n      newArr.otherAve = [Math.round(total), "Other"];\n      return statsBar_objectSpread({}, newArr);\n    });\n  });\n};\nvar getDwellingsStatTotals = function getDwellingsStatTotals(originalValues, cityLabels, setStats, selected) {\n  var formal = 0;\n  var informal = 0;\n  var traditional = 0;\n  var other = 0;\n  var formalTot = 0;\n  var informalTot = 0;\n  var traditionalTot = 0;\n  var otherTot = 0;\n  if (originalValues.length < 1) return;\n  //Totals\n  originalValues[0].forEach(function (values, index) {\n    var valueIndex = values.labels.indexOf(cityLabels(selected));\n    if (values.year !== "2018" && valueIndex !== -1) return;\n    formal = values.values[valueIndex];\n  });\n  originalValues[1].forEach(function (values, index) {\n    var valueIndex = values.labels.indexOf(cityLabels(selected));\n    if (values.year !== "2018" && valueIndex !== -1) return;\n    informal = values.values[valueIndex];\n  });\n  originalValues[3].forEach(function (values, index) {\n    var valueIndex = values.labels.indexOf(cityLabels(selected));\n    if (values.year !== "2018" && valueIndex !== -1) return;\n    traditional = values.values[valueIndex];\n  });\n  originalValues[4].forEach(function (values, index) {\n    var valueIndex = values.labels.indexOf(cityLabels(selected));\n    if (values.year !== "2018" && valueIndex !== -1) return;\n    other = values.values[valueIndex];\n  });\n\n  //Averages\n  var thAverageCount = 0;\n  var hsAverageCount = 0;\n  var pdAverageCount = 0;\n  var otherCount = 0;\n  originalValues[0].forEach(function (values, index) {\n    if (values.year !== "2018") return;\n    thAverageCount++;\n    formalTot = values.values.reduce(function (a, b) {\n      return a + b;\n    }, 0) / values.values.length;\n  });\n  originalValues[1].forEach(function (values, index) {\n    if (values.year !== "2018") return;\n    hsAverageCount++;\n    informalTot = values.values.reduce(function (a, b) {\n      return a + b;\n    }, 0) / values.values.length;\n  });\n  originalValues[3].forEach(function (values, index) {\n    if (values.year !== "2018") return;\n    pdAverageCount++;\n    traditionalTot = values.values.reduce(function (a, b) {\n      return a + b;\n    }, 0) / values.values.length;\n  });\n  originalValues[4].forEach(function (values, index) {\n    if (values.year !== "2018") return;\n    pdAverageCount++;\n    otherTot = values.values.reduce(function (a, b) {\n      return a + b;\n    }, 0) / values.values.length;\n  });\n  setStats({\n    formal: [Math.round(formal), "Formal Dwelling"],\n    informal: [Math.round(informal), "Informal Dwelling"],\n    traditional: [Math.round(traditional), "Traditional Dwelling"],\n    other: [Math.round(other), "Other Dwelling"],\n    formalTot: [Math.round(formalTot), "Formal Dwelling"],\n    informalTot: [Math.round(informalTot), "Informal Dwelling"],\n    traditionalTot: [Math.round(traditionalTot), "Traditional Dwelling"],\n    otherTot: [Math.round(otherTot), "Other Dwelling"]\n  });\n};\nvar getFoodSecurityStatTotals = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(originalValues, cityLabels, setStats, selected) {\n    var adequite, inadequite, severelyInadequite, adequiteTot, inadequiteTot, severelyInadequiteTot, _yield$Promise$all, _yield$Promise$all2, firstResponse, secondResponse, thirdResponse, firstAve, secondAve, thirdAve;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            adequite = 0;\n            inadequite = 0;\n            severelyInadequite = 0;\n            adequiteTot = 0;\n            inadequiteTot = 0;\n            severelyInadequiteTot = 0;\n            _context.next = 8;\n            return Promise.all([axios_default().get("/api/explore_new?indicator_id=1069&city=".concat(selected, "&year=2018")), axios_default().get("/api/explore_new?indicator_id=1072&city=".concat(selected, "&year=2018")), axios_default().get("/api/explore_new?indicator_id=1075&city=".concat(selected, "&year=2018")), axios_default().get("/api/stats?indicator_id=1069&average=True&year=2018"), axios_default().get("/api/stats?indicator_id=1072&average=True&year=2018"), axios_default().get("/api/stats?indicator_id=1075&average=True&year=2018")]);\n          case 8:\n            _yield$Promise$all = _context.sent;\n            _yield$Promise$all2 = statsBar_slicedToArray(_yield$Promise$all, 6);\n            firstResponse = _yield$Promise$all2[0];\n            secondResponse = _yield$Promise$all2[1];\n            thirdResponse = _yield$Promise$all2[2];\n            firstAve = _yield$Promise$all2[3];\n            secondAve = _yield$Promise$all2[4];\n            thirdAve = _yield$Promise$all2[5];\n            adequite = firstResponse.data[0].values;\n            inadequite = secondResponse.data[0].values;\n            severelyInadequite = thirdResponse.data[0].values;\n            adequiteTot = firstAve.data.total_average;\n            inadequiteTot = secondAve.data.total_average;\n            severelyInadequiteTot = thirdAve.data.total_average;\n            setStats(statsBar_objectSpread({}, {\n              adequite: [Math.round(adequite), "Adequate Access to Food"],\n              inadequite: [Math.round(inadequite), "Inadequate Access to Food"],\n              severelyInadequite: [Math.round(severelyInadequite * 10) / 10, "Severely Inadequate Access to Food"],\n              adequiteTot: [Math.round(adequiteTot), "Adequate Access to Food"],\n              inadequiteTot: [Math.round(inadequiteTot), "Inadequate Access to Food"],\n              severelyInadequiteTot: [Math.round(severelyInadequiteTot * 10) / 10, "Severely Inadequate Access to Food"]\n            }));\n          case 23:\n          case "end":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return function getFoodSecurityStatTotals(_x, _x2, _x3, _x4) {\n    return _ref.apply(this, arguments);\n  };\n}();\nvar getLifeExpectancyStatTotals = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(originalValues, cityLabels, setStats, selected) {\n    var aveMale, aveFemale, publicHealthCare, medicalAid, aveMaleTot, aveFemaleTot, publicHealthCareTot, medicalAidTot, _yield$Promise$all3, _yield$Promise$all4, firstResponse, secondResponse, thirdResponse, fourthResponse, firstAve, secondAve, thirdAve, fourthAve;\n    return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            aveMale = 0;\n            aveFemale = 0;\n            publicHealthCare = 0;\n            medicalAid = 0;\n            aveMaleTot = 0;\n            aveFemaleTot = 0;\n            publicHealthCareTot = 0;\n            medicalAidTot = 0;\n            _context2.next = 10;\n            return Promise.all([axios_default().get("/api/explore_new?indicator_id=719&city=".concat(selected, "&year=2018")), axios_default().get("/api/explore_new?indicator_id=721&city=".concat(selected, "&year=2018")), axios_default().get("/api/explore_new?indicator_id=1081&city=".concat(selected, "&year=2018")), axios_default().get("/api/explore_new?indicator_id=1078&city=".concat(selected, "&year=2018")), axios_default().get("/api/stats?indicator_id=719&average=True&year=2018"), axios_default().get("/api/stats?indicator_id=721&average=True&year=2018"), axios_default().get("/api/stats?indicator_id=1081&average=True&year=2018"), axios_default().get("/api/stats?indicator_id=1078&average=True&year=2018")]);\n          case 10:\n            _yield$Promise$all3 = _context2.sent;\n            _yield$Promise$all4 = statsBar_slicedToArray(_yield$Promise$all3, 8);\n            firstResponse = _yield$Promise$all4[0];\n            secondResponse = _yield$Promise$all4[1];\n            thirdResponse = _yield$Promise$all4[2];\n            fourthResponse = _yield$Promise$all4[3];\n            firstAve = _yield$Promise$all4[4];\n            secondAve = _yield$Promise$all4[5];\n            thirdAve = _yield$Promise$all4[6];\n            fourthAve = _yield$Promise$all4[7];\n            aveMale = firstResponse.data[0] ? firstResponse.data[0].values : 0;\n            aveFemale = secondResponse.data[0] ? secondResponse.data[0].values : 0;\n            publicHealthCare = thirdResponse.data[0] ? thirdResponse.data[0].values : 0;\n            medicalAid = fourthResponse.data[0] ? fourthResponse.data[0].values : 0;\n            aveMaleTot = firstAve.data.total_average ? firstAve.data.total_average : 0;\n            aveFemaleTot = secondAve.data.total_average ? secondAve.data.total_average : 0;\n            publicHealthCareTot = thirdAve.data.total_average ? thirdAve.data.total_average : 0;\n            medicalAidTot = fourthAve.data.total_average ? fourthAve.data.total_average : 0;\n            setStats({\n              aveMale: [Math.round(aveMale), "AVE. Male life Expectancy"],\n              aveFemale: [Math.round(aveFemale), "AVE. Female life Expectancy"],\n              publicHealthCare: [Math.round(publicHealthCare * 10) / 10, "Public Healthcare Usage"],\n              medicalAid: [Math.round(medicalAid * 10) / 10, "Medical Aid Coverage"],\n              aveMaleTot: [Math.round(aveMaleTot), "AVE. Male life Expectancy"],\n              aveFemaleTot: [Math.round(aveFemaleTot), "AVE. Female life Expectancy"],\n              publicHealthCareTot: [Math.round(publicHealthCareTot * 10) / 10, "Public Healthcare Usage"],\n              medicalAidTot: [Math.round(medicalAidTot * 10) / 10, "Medical Aid Coverage"]\n            });\n          case 29:\n          case "end":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return function getLifeExpectancyStatTotals(_x5, _x6, _x7, _x8) {\n    return _ref2.apply(this, arguments);\n  };\n}();\nvar getEducationStatTotals = /*#__PURE__*/function () {\n  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(originalValues, cityLabels, setStats, selected) {\n    var noSchooling, primarySchooling, secondarySchooling, tertiaryEducation, noSchoolingTot, primarySchoolingTot, secondarySchoolingTot, tertiaryEducationTot, _yield$Promise$all5, _yield$Promise$all6, firstResponse, secondResponse, thirdResponse, fourthResponse, firstAve, secondAve, thirdAve, fourthAve;\n    return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            noSchooling = 0;\n            primarySchooling = 0;\n            secondarySchooling = 0;\n            tertiaryEducation = 0;\n            noSchoolingTot = 0;\n            primarySchoolingTot = 0;\n            secondarySchoolingTot = 0;\n            tertiaryEducationTot = 0;\n            _context3.next = 10;\n            return Promise.all([axios_default().get("/api/explore_new?indicator_id=1093&city=".concat(selected, "&year=2018")), axios_default().get("/api/explore_new?indicator_id=1099&city=".concat(selected, "&year=2018")), axios_default().get("/api/explore_new?indicator_id=1105&city=".concat(selected, "&year=2018")), axios_default().get("/api/explore_new?indicator_id=1108&city=".concat(selected, "&year=2018")), axios_default().get("/api/stats?indicator_id=1093&average=True&year=2018"), axios_default().get("/api/stats?indicator_id=1099&average=True&year=2018"), axios_default().get("/api/stats?indicator_id=1105&average=True&year=2018"), axios_default().get("/api/stats?indicator_id=1108&average=True&year=2018")]);\n          case 10:\n            _yield$Promise$all5 = _context3.sent;\n            _yield$Promise$all6 = statsBar_slicedToArray(_yield$Promise$all5, 8);\n            firstResponse = _yield$Promise$all6[0];\n            secondResponse = _yield$Promise$all6[1];\n            thirdResponse = _yield$Promise$all6[2];\n            fourthResponse = _yield$Promise$all6[3];\n            firstAve = _yield$Promise$all6[4];\n            secondAve = _yield$Promise$all6[5];\n            thirdAve = _yield$Promise$all6[6];\n            fourthAve = _yield$Promise$all6[7];\n            noSchooling = firstResponse.data[0].values;\n            primarySchooling = secondResponse.data[0].values;\n            secondarySchooling = thirdResponse.data[0].values;\n            tertiaryEducation = fourthResponse.data[0].values;\n            noSchoolingTot = firstAve.data.total_average;\n            primarySchoolingTot = secondAve.data.total_average;\n            secondarySchoolingTot = thirdAve.data.total_average;\n            tertiaryEducationTot = fourthAve.data.total_average;\n            setStats({\n              noSchooling: [Math.round(noSchooling), "No Schooling"],\n              primarySchooling: [Math.round(primarySchooling), "Primary School Completed"],\n              secondarySchooling: [Math.round(secondarySchooling * 10) / 10, "Secondary SChool Completed"],\n              tertiaryEducation: [Math.round(tertiaryEducation * 10) / 10, "Tertiary Edu. Completed"],\n              noSchoolingTot: [Math.round(noSchoolingTot), "No Schooling"],\n              primarySchoolingTot: [Math.round(primarySchoolingTot), "Primary School Completed"],\n              secondarySchoolingTot: [Math.round(secondarySchoolingTot * 10) / 10, "Secondary SChool Completed"],\n              tertiaryEducationTot: [Math.round(tertiaryEducationTot * 10) / 10, "Tertiary Edu. Completed"]\n            });\n          case 29:\n          case "end":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n  return function getEducationStatTotals(_x9, _x10, _x11, _x12) {\n    return _ref3.apply(this, arguments);\n  };\n}();\n;// CONCATENATED MODULE: ./js/components/GenericDashboardSetup/Organisms/GenericStatsPanel.jsx\nfunction GenericStatsPanel_slicedToArray(arr, i) { return GenericStatsPanel_arrayWithHoles(arr) || GenericStatsPanel_iterableToArrayLimit(arr, i) || GenericStatsPanel_unsupportedIterableToArray(arr, i) || GenericStatsPanel_nonIterableRest(); }\nfunction GenericStatsPanel_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction GenericStatsPanel_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return GenericStatsPanel_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return GenericStatsPanel_arrayLikeToArray(o, minLen); }\nfunction GenericStatsPanel_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\nfunction GenericStatsPanel_iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }\nfunction GenericStatsPanel_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\n\n\n\n\n\nvar makeHumanReadable = function makeHumanReadable(number) {\n  return number.toString().replace(/\\B(?<!\\.\\d*)(?=(\\d{3})+(?!\\d))/g, " ");\n};\nvar initialValues = function initialValues(dropName) {\n  var statsInit = dropName === "People and Households" ? {\n    totalHouseHolds: [0, "TOTAL Households"],\n    houseHoldSize: [0, "Household size"],\n    populationDensity: [0, "Population Density"],\n    totalHouseHoldsAverage: [0, "TOTAL Households"],\n    houseHoldSizeAverage: [0, "Household size"],\n    populationDensityAverage: [0, "Population Density"],\n    heading: null\n  } : dropName === "Employment" || dropName === "Household Income" ? {\n    heading: "Proportion of households whose main source of income is:",\n    salaries: [0, "Salaries/wages/ commission"],\n    businessIncome: [0, "Income from a business"],\n    remittances: [0, "Remittances"],\n    grants: [0, "Grants"],\n    other: [0, "Other"],\n    salariesAve: [0, "Salaries/wages/ commission"],\n    businessIncomeAve: [0, "Income from a business"],\n    remittancesAve: [0, "Remittances"],\n    grantsAve: [0, "Grants"],\n    otherAve: [0, "Other"]\n  } : dropName === "Dwellings" ? {\n    formal: [0, "Formal Dwelling"],\n    informal: [0, "Informal Dwelling"],\n    traditional: [0, "Traditional Dwelling"],\n    other: [0, "Other Dwelling"],\n    formalTot: [0, "Formal Dwelling"],\n    informalTot: [0, "Informal Dwelling"],\n    traditionalTot: [0, "Traditional Dwelling"],\n    otherTot: [0, "Other Dwelling"]\n  } : dropName === "Food Security, Literacy and Inequality" ? {\n    adequite: [0, "Adequate Access to Food"],\n    inadequite: [0, "Inadequate Access to Food"],\n    severelyInadequite: [0, "Severely Inadequate Access to Food"],\n    adequiteTot: [0, "Adequate Access to Food"],\n    inadequiteTot: [0, "Inadequate Access to Food"],\n    severelyInadequiteTot: [0, "Severely Inadequate Access to Food"]\n  } : dropName === "Life Expectancy and Health" ? {\n    aveMale: [0, "AVE. Male life Expectancy"],\n    aveFemale: [0, "AVE. Female life Expectancy"],\n    publicHealthCare: [0, "Public Healthcare Usage"],\n    medicalAid: [0, "Medical Aid Coverage"],\n    aveMaleTot: [0, "AVE. Male life Expectancy"],\n    aveFemaleTot: [0, "AVE. Female life Expectancy"],\n    publicHealthCareTot: [0, "Public Healthcare Usage"],\n    medicalAidTot: [0, "Medical Aid Coverage"]\n  } : dropName === "Education" ? {\n    noSchooling: [0, "No Schooling"],\n    primarySchooling: [0, "Primary School Completed"],\n    secondarySchooling: [0, "Secondary SChool Completed"],\n    tertiaryEducation: [0, "Tertiary Edu. Completed"],\n    noSchoolingTot: [0, "No Schooling"],\n    primarySchoolingTot: [0, "Primary School Completed"],\n    secondarySchoolingTot: [0, "Secondary SChool Completed"],\n    tertiaryEducationTot: [0, "Tertiary Edu. Completed"]\n  } : dropName === "Sustainability" ? null : {};\n  return statsInit;\n};\nvar GenericStatsPanel = function GenericStatsPanel(_ref) {\n  var originalValues = _ref.originalValues,\n    dropName = _ref.dropName;\n  var _useState = (0,react.useState)(initialValues(dropName)),\n    _useState2 = GenericStatsPanel_slicedToArray(_useState, 2),\n    statsValues = _useState2[0],\n    setStats = _useState2[1];\n  var _useState3 = (0,react.useState)(\'eThekwini\'),\n    _useState4 = GenericStatsPanel_slicedToArray(_useState3, 2),\n    selected = _useState4[0],\n    setSelected = _useState4[1];\n  (0,react.useEffect)(function () {\n    if (dropName === "People and Households") {\n      getStatTotals(originalValues, helpers/* cityLabels */.Xn, setStats, selected);\n    } else if (dropName === "Employment" || dropName === "Household Income") {\n      getEmploymentStatTotals(setStats, selected);\n    } else if (dropName === "Dwellings") {\n      getDwellingsStatTotals(originalValues, helpers/* cityLabels */.Xn, setStats, selected);\n    } else if (dropName === "Food Security, Literacy and Inequality") {\n      getFoodSecurityStatTotals(originalValues, helpers/* cityLabels */.Xn, setStats, selected);\n    } else if (dropName === "Life Expectancy and Health") {\n      getLifeExpectancyStatTotals(originalValues, helpers/* cityLabels */.Xn, setStats, selected);\n    } else if (dropName === "Education") {\n      getEducationStatTotals(originalValues, helpers/* cityLabels */.Xn, setStats, selected);\n    } else if (dropName === "Sustainability") {\n      setStats(null);\n    }\n  }, [selected]);\n  var globalCityDropDownClose = (0,context/* useGlobalClose */.L6)();\n  var closeAlerts = (0,context/* useCloseAllErrors */.pu)();\n  var closeAllAlerts = function closeAllAlerts() {\n    globalCityDropDownClose();\n    var isClearable = false;\n    closeAlerts.error.forEach(function (item) {\n      if (item.errorThrown === true) {\n        isClearable = true;\n      }\n    });\n    if (isClearable) {\n      var newState = closeAlerts.error.map(function (obj) {\n        return {\n          errorThrown: false\n        };\n      });\n      closeAlerts.setError(newState);\n    }\n  };\n  return /*#__PURE__*/react.createElement("div", {\n    className: "stats_wrapper",\n    onClick: closeAllAlerts\n  }, dropName === "People and Households" ? /*#__PURE__*/react.createElement("div", {\n    className: "stat_display_panel",\n    onClick: function onClick() {\n      globalCityDropDownClose();\n    }\n  }, /*#__PURE__*/react.createElement("div", {\n    className: "first_panel"\n  }, /*#__PURE__*/react.createElement("p", {\n    className: "catagory-name "\n  }, "Household Overview:  ", /*#__PURE__*/react.createElement("span", null, "City Averages 2018")), /*#__PURE__*/react.createElement("div", {\n    className: "row"\n  }, /*#__PURE__*/react.createElement("div", {\n    className: "stat"\n  }, /*#__PURE__*/react.createElement("h1", null, makeHumanReadable(statsValues.totalHouseHoldsAverage[0])), /*#__PURE__*/react.createElement("p", null, " ", makeHumanReadable(statsValues.totalHouseHoldsAverage[1]))), /*#__PURE__*/react.createElement("div", {\n    className: "stat"\n  }, /*#__PURE__*/react.createElement("h1", null, makeHumanReadable(statsValues.houseHoldSizeAverage[0])), /*#__PURE__*/react.createElement("p", null, makeHumanReadable(statsValues.houseHoldSizeAverage[1]))), /*#__PURE__*/react.createElement("div", {\n    className: "stat"\n  }, /*#__PURE__*/react.createElement("h1", null, makeHumanReadable(statsValues.populationDensityAverage[0])), /*#__PURE__*/react.createElement("p", null, makeHumanReadable(statsValues.populationDensityAverage[1]))))), /*#__PURE__*/react.createElement("div", {\n    className: "second_panel"\n  }, /*#__PURE__*/react.createElement("div", {\n    className: "top"\n  }, /*#__PURE__*/react.createElement("p", {\n    className: "catagory-name"\n  }, " Household Overview: ", /*#__PURE__*/react.createElement("span", null, "Municipality Focus 2018")), /*#__PURE__*/react.createElement(MiniSelect, {\n    names: [\'Buffalo City\', \'City of Cape Town\', \'City of Joburg\', \'Ekurhuleni\', \'eThekwini\', \'Mangaung\', \'Msunduzi\', \'Nelson Mandela Bay\', \'Tshwane\'],\n    setSelected: setSelected,\n    selected: selected\n  })), /*#__PURE__*/react.createElement("div", {\n    className: "bottom"\n  }, /*#__PURE__*/react.createElement("div", {\n    className: "stat"\n  }, /*#__PURE__*/react.createElement("h1", null, makeHumanReadable(statsValues.totalHouseHolds[0])), /*#__PURE__*/react.createElement("p", null, makeHumanReadable(statsValues.totalHouseHolds[1]))), /*#__PURE__*/react.createElement("div", {\n    className: "stat"\n  }, /*#__PURE__*/react.createElement("h1", null, makeHumanReadable(statsValues.houseHoldSize[0])), /*#__PURE__*/react.createElement("p", null, makeHumanReadable(statsValues.houseHoldSize[1]))), /*#__PURE__*/react.createElement("div", {\n    className: "stat"\n  }, /*#__PURE__*/react.createElement("h1", null, makeHumanReadable(statsValues.populationDensity[0])), /*#__PURE__*/react.createElement("p", null, makeHumanReadable(statsValues.populationDensity[1])))))) : dropName === "Employment" || dropName === "Household Income" ? /*#__PURE__*/react.createElement("div", {\n    className: "stat_display_panel",\n    onClick: function onClick() {\n      globalCityDropDownClose();\n    }\n  }, /*#__PURE__*/react.createElement("div", {\n    className: "first_panel"\n  }, /*#__PURE__*/react.createElement("p", {\n    className: "catagory-name "\n  }, "Main Source of Income: ", /*#__PURE__*/react.createElement("span", null, "City Averages 2018")), /*#__PURE__*/react.createElement("p", {\n    className: "heading"\n  }, statsValues.heading), /*#__PURE__*/react.createElement("div", {\n    className: "row"\n  }, /*#__PURE__*/react.createElement("div", {\n    className: "stat"\n  }, /*#__PURE__*/react.createElement("h1", null, makeHumanReadable(statsValues.salariesAve[0]), "%"), /*#__PURE__*/react.createElement("p", {\n    style: {\n      width: \'95px\',\n      display: "flex",\n      textAlign: "center"\n    }\n  }, " ", makeHumanReadable(statsValues.salariesAve[1]))), /*#__PURE__*/react.createElement("div", {\n    className: "stat"\n  }, /*#__PURE__*/react.createElement("h1", null, makeHumanReadable(statsValues.businessIncomeAve[0]), "%"), /*#__PURE__*/react.createElement("p", {\n    style: {\n      width: \'80px\',\n      display: "flex",\n      textAlign: "center"\n    }\n  }, makeHumanReadable(statsValues.businessIncomeAve[1]))), /*#__PURE__*/react.createElement("div", {\n    className: "stat"\n  }, /*#__PURE__*/react.createElement("h1", null, makeHumanReadable(statsValues.remittancesAve[0]), "%"), /*#__PURE__*/react.createElement("p", null, makeHumanReadable(statsValues.remittancesAve[1]))), /*#__PURE__*/react.createElement("div", {\n    className: "stat"\n  }, /*#__PURE__*/react.createElement("h1", null, makeHumanReadable(statsValues.grantsAve[0]), "%"), /*#__PURE__*/react.createElement("p", null, makeHumanReadable(statsValues.grantsAve[1]))), /*#__PURE__*/react.createElement("div", {\n    className: "stat"\n  }, /*#__PURE__*/react.createElement("h1", null, makeHumanReadable(statsValues.otherAve[0]), "%"), /*#__PURE__*/react.createElement("p", null, makeHumanReadable(statsValues.otherAve[1]))))), /*#__PURE__*/react.createElement("div", {\n    className: "second_panel"\n  }, /*#__PURE__*/react.createElement("div", {\n    className: "top"\n  }, /*#__PURE__*/react.createElement("p", {\n    className: "catagory-name"\n  }, "Main Source of Income: ", /*#__PURE__*/react.createElement("span", null, "Municipality Focus 2018")), /*#__PURE__*/react.createElement(MiniSelect, {\n    names: [\'Buffalo City\', \'City of Cape Town\', \'City of Joburg\', \'Ekurhuleni\', \'Mangaung\', \'Nelson Mandela Bay\', \'Tshwane\', \'eThekwini\'],\n    setSelected: setSelected,\n    selected: selected\n  })), /*#__PURE__*/react.createElement("p", {\n    className: "heading"\n  }, statsValues.heading), /*#__PURE__*/react.createElement("div", {\n    className: "bottom"\n  }, /*#__PURE__*/react.createElement("div", {\n    className: "stat"\n  }, /*#__PURE__*/react.createElement("h1", null, makeHumanReadable(statsValues.salaries[0]), "%"), /*#__PURE__*/react.createElement("p", {\n    style: {\n      width: \'95px\',\n      display: "flex",\n      textAlign: "center"\n    }\n  }, " ", makeHumanReadable(statsValues.salaries[1]))), /*#__PURE__*/react.createElement("div", {\n    className: "stat"\n  }, /*#__PURE__*/react.createElement("h1", null, makeHumanReadable(statsValues.businessIncome[0]), "%"), /*#__PURE__*/react.createElement("p", {\n    style: {\n      width: \'80px\',\n      display: "flex",\n      textAlign: "center"\n    }\n  }, makeHumanReadable(statsValues.businessIncome[1]))), /*#__PURE__*/react.createElement("div", {\n    className: "stat"\n  }, /*#__PURE__*/react.createElement("h1", null, makeHumanReadable(statsValues.remittances[0]), "%"), /*#__PURE__*/react.createElement("p", null, makeHumanReadable(statsValues.remittances[1]))), /*#__PURE__*/react.createElement("div", {\n    className: "stat"\n  }, /*#__PURE__*/react.createElement("h1", null, makeHumanReadable(statsValues.grants[0]), "%"), /*#__PURE__*/react.createElement("p", null, makeHumanReadable(statsValues.grants[1]))), /*#__PURE__*/react.createElement("div", {\n    className: "stat"\n  }, /*#__PURE__*/react.createElement("h1", null, makeHumanReadable(statsValues.other[0]), "%"), /*#__PURE__*/react.createElement("p", null, makeHumanReadable(statsValues.other[1])))))) : dropName === "Dwellings" ? /*#__PURE__*/react.createElement("div", {\n    className: "stat_display_panel",\n    onClick: function onClick() {\n      globalCityDropDownClose();\n    }\n  }, /*#__PURE__*/react.createElement("div", {\n    className: "first_panel"\n  }, /*#__PURE__*/react.createElement("p", {\n    className: "catagory-name "\n  }, "Dwelling Type:  ", /*#__PURE__*/react.createElement("span", null, "City Averages 2018")), /*#__PURE__*/react.createElement("div", {\n    className: "row"\n  }, /*#__PURE__*/react.createElement("div", {\n    className: "stat"\n  }, /*#__PURE__*/react.createElement("h1", null, makeHumanReadable(statsValues.formalTot[0]), "%"), /*#__PURE__*/react.createElement("p", null, " ", makeHumanReadable(statsValues.formalTot[1]))), /*#__PURE__*/react.createElement("div", {\n    className: "stat"\n  }, /*#__PURE__*/react.createElement("h1", null, makeHumanReadable(statsValues.informalTot[0]), "%"), /*#__PURE__*/react.createElement("p", null, makeHumanReadable(statsValues.informalTot[1]))), /*#__PURE__*/react.createElement("div", {\n    className: "stat"\n  }, /*#__PURE__*/react.createElement("h1", null, makeHumanReadable(statsValues.traditionalTot[0]), "%"), /*#__PURE__*/react.createElement("p", null, makeHumanReadable(statsValues.traditionalTot[1]))), /*#__PURE__*/react.createElement("div", {\n    className: "stat"\n  }, /*#__PURE__*/react.createElement("h1", null, makeHumanReadable(statsValues.otherTot[0]), "%"), /*#__PURE__*/react.createElement("p", null, makeHumanReadable(statsValues.otherTot[1]))))), /*#__PURE__*/react.createElement("div", {\n    className: "second_panel"\n  }, /*#__PURE__*/react.createElement("div", {\n    className: "top"\n  }, /*#__PURE__*/react.createElement("p", {\n    className: "catagory-name"\n  }, " Dwelling Type: ", /*#__PURE__*/react.createElement("span", null, "Municipality Focus 2018")), /*#__PURE__*/react.createElement(MiniSelect, {\n    names: [\'Buffalo City\', \'City of Cape Town\', \'Ekurhuleni\', \'eThekwini\', \'City of Joburg\', \'Mangaung\', \'Nelson Mandela Bay\', "Tshwane"],\n    setSelected: setSelected,\n    selected: selected\n  })), /*#__PURE__*/react.createElement("div", {\n    className: "bottom"\n  }, /*#__PURE__*/react.createElement("div", {\n    className: "stat"\n  }, /*#__PURE__*/react.createElement("h1", null, makeHumanReadable(statsValues.formal[0]), "%"), /*#__PURE__*/react.createElement("p", null, " ", makeHumanReadable(statsValues.formal[1]))), /*#__PURE__*/react.createElement("div", {\n    className: "stat"\n  }, /*#__PURE__*/react.createElement("h1", null, makeHumanReadable(statsValues.informal[0]), "%"), /*#__PURE__*/react.createElement("p", null, makeHumanReadable(statsValues.informal[1]))), /*#__PURE__*/react.createElement("div", {\n    className: "stat"\n  }, /*#__PURE__*/react.createElement("h1", null, makeHumanReadable(statsValues.traditional[0]), "%"), /*#__PURE__*/react.createElement("p", null, makeHumanReadable(statsValues.traditional[1]))), /*#__PURE__*/react.createElement("div", {\n    className: "stat"\n  }, /*#__PURE__*/react.createElement("h1", null, makeHumanReadable(statsValues.other[0]), "%"), /*#__PURE__*/react.createElement("p", null, makeHumanReadable(statsValues.other[1])))))) : dropName === "Food Security, Literacy and Inequality" ? /*#__PURE__*/react.createElement("div", {\n    className: "stat_display_panel",\n    onClick: function onClick() {\n      globalCityDropDownClose();\n    }\n  }, /*#__PURE__*/react.createElement("div", {\n    className: "first_panel"\n  }, /*#__PURE__*/react.createElement("p", {\n    className: "catagory-name "\n  }, "Access to Food Overview:  ", /*#__PURE__*/react.createElement("span", null, "City Averages 2018")), /*#__PURE__*/react.createElement("div", {\n    className: "row"\n  }, /*#__PURE__*/react.createElement("div", {\n    className: "stat adequiteTot"\n  }, /*#__PURE__*/react.createElement("h1", null, makeHumanReadable(statsValues.adequiteTot[0]), "%"), /*#__PURE__*/react.createElement("p", null, " ", makeHumanReadable(statsValues.adequiteTot[1]))), /*#__PURE__*/react.createElement("div", {\n    className: "stat inadequiteTot"\n  }, /*#__PURE__*/react.createElement("h1", null, makeHumanReadable(statsValues.inadequiteTot[0]), "%"), /*#__PURE__*/react.createElement("p", null, makeHumanReadable(statsValues.inadequiteTot[1]))), /*#__PURE__*/react.createElement("div", {\n    className: "stat severelyInadequiteTot"\n  }, /*#__PURE__*/react.createElement("h1", null, makeHumanReadable(statsValues.severelyInadequiteTot[0]), "%"), /*#__PURE__*/react.createElement("p", null, makeHumanReadable(statsValues.severelyInadequiteTot[1]))))), /*#__PURE__*/react.createElement("div", {\n    className: "second_panel"\n  }, /*#__PURE__*/react.createElement("div", {\n    className: "top"\n  }, /*#__PURE__*/react.createElement("p", {\n    className: "catagory-name"\n  }, " Access to Food Overview: ", /*#__PURE__*/react.createElement("span", null, "Municipality Focus 2018")), /*#__PURE__*/react.createElement(MiniSelect, {\n    names: [\'Buffalo City\', \'City of Cape Town\', \'Ekurhuleni\', \'eThekwini\', \'City of Joburg\', \'Mangaung\', \'Nelson Mandela Bay\', "Tshwane"],\n    setSelected: setSelected,\n    selected: selected\n  })), /*#__PURE__*/react.createElement("div", {\n    className: "bottom"\n  }, /*#__PURE__*/react.createElement("div", {\n    className: "stat adequite"\n  }, /*#__PURE__*/react.createElement("h1", null, makeHumanReadable(statsValues.adequite[0]), "%"), /*#__PURE__*/react.createElement("p", null, " ", makeHumanReadable(statsValues.adequite[1]))), /*#__PURE__*/react.createElement("div", {\n    className: "stat inadequite"\n  }, /*#__PURE__*/react.createElement("h1", null, makeHumanReadable(statsValues.inadequite[0]), "%"), /*#__PURE__*/react.createElement("p", null, makeHumanReadable(statsValues.inadequite[1]))), /*#__PURE__*/react.createElement("div", {\n    className: "stat severelyInadequite"\n  }, /*#__PURE__*/react.createElement("h1", null, makeHumanReadable(statsValues.severelyInadequite[0]), "%"), /*#__PURE__*/react.createElement("p", null, makeHumanReadable(statsValues.severelyInadequite[1])))))) : dropName === "Life Expectancy and Health" ? /*#__PURE__*/react.createElement("div", {\n    className: "stat_display_panel",\n    onClick: function onClick() {\n      globalCityDropDownClose();\n    }\n  }, /*#__PURE__*/react.createElement("div", {\n    className: "first_panel "\n  }, /*#__PURE__*/react.createElement("p", {\n    className: "catagory-name "\n  }, "Life & Health Overview:  ", /*#__PURE__*/react.createElement("span", null, "City Averages 2018")), /*#__PURE__*/react.createElement("div", {\n    className: "row closer"\n  }, /*#__PURE__*/react.createElement("div", {\n    className: "stat publicHealthCareTot"\n  }, /*#__PURE__*/react.createElement("h1", null, makeHumanReadable(statsValues.publicHealthCareTot[0]), "%"), /*#__PURE__*/react.createElement("p", null, makeHumanReadable(statsValues.publicHealthCareTot[1]))), /*#__PURE__*/react.createElement("div", {\n    className: "stat medicalAidTot"\n  }, /*#__PURE__*/react.createElement("h1", null, makeHumanReadable(statsValues.medicalAidTot[0]), "%"), /*#__PURE__*/react.createElement("p", null, makeHumanReadable(statsValues.medicalAidTot[1]))))), /*#__PURE__*/react.createElement("div", {\n    className: "second_panel"\n  }, /*#__PURE__*/react.createElement("div", {\n    className: "top"\n  }, /*#__PURE__*/react.createElement("p", {\n    className: "catagory-name"\n  }, " Life & Health Overview: ", /*#__PURE__*/react.createElement("span", null, "Municipality Focus 2018")), /*#__PURE__*/react.createElement(MiniSelect, {\n    names: [\'Buffalo City\', \'City of Cape Town\', \'Ekurhuleni\', \'eThekwini\', \'City of Joburg\', \'Mangaung\', \'Nelson Mandela Bay\', "Tshwane"],\n    setSelected: setSelected,\n    selected: selected\n  })), /*#__PURE__*/react.createElement("div", {\n    className: "bottom closer"\n  }, /*#__PURE__*/react.createElement("div", {\n    className: "stat publicHealthCare"\n  }, /*#__PURE__*/react.createElement("h1", null, makeHumanReadable(statsValues.publicHealthCare[0]), "%"), /*#__PURE__*/react.createElement("p", null, makeHumanReadable(statsValues.publicHealthCare[1]))), /*#__PURE__*/react.createElement("div", {\n    className: "stat medicalAid"\n  }, /*#__PURE__*/react.createElement("h1", null, makeHumanReadable(statsValues.medicalAid[0]), "%"), /*#__PURE__*/react.createElement("p", null, makeHumanReadable(statsValues.medicalAid[1])))))) : dropName === "Education" ? /*#__PURE__*/react.createElement("div", {\n    className: "stat_display_panel",\n    onClick: function onClick() {\n      globalCityDropDownClose();\n    }\n  }, /*#__PURE__*/react.createElement("div", {\n    className: "first_panel"\n  }, /*#__PURE__*/react.createElement("p", {\n    className: "catagory-name "\n  }, "Schooling Milestones:  ", /*#__PURE__*/react.createElement("span", null, "City Averages 2018")), /*#__PURE__*/react.createElement("p", {\n    className: "title"\n  }, "PROPORTION OF POPULATION WITH:"), /*#__PURE__*/react.createElement("div", {\n    className: "row"\n  }, /*#__PURE__*/react.createElement("div", {\n    className: "stat noSchoolingTot"\n  }, /*#__PURE__*/react.createElement("h1", null, makeHumanReadable(statsValues.noSchoolingTot[0]), "%"), /*#__PURE__*/react.createElement("p", null, " ", makeHumanReadable(statsValues.noSchoolingTot[1]))), /*#__PURE__*/react.createElement("div", {\n    className: "stat primarySchoolingTot"\n  }, /*#__PURE__*/react.createElement("h1", null, makeHumanReadable(statsValues.primarySchoolingTot[0]), "%"), /*#__PURE__*/react.createElement("p", null, makeHumanReadable(statsValues.primarySchoolingTot[1]))), /*#__PURE__*/react.createElement("div", {\n    className: "stat secondarySchoolingTot"\n  }, /*#__PURE__*/react.createElement("h1", null, makeHumanReadable(statsValues.secondarySchoolingTot[0]), "%"), /*#__PURE__*/react.createElement("p", null, makeHumanReadable(statsValues.secondarySchoolingTot[1]))), /*#__PURE__*/react.createElement("div", {\n    className: "stat tertiaryEducationTot"\n  }, /*#__PURE__*/react.createElement("h1", null, makeHumanReadable(statsValues.tertiaryEducationTot[0]), "%"), /*#__PURE__*/react.createElement("p", null, makeHumanReadable(statsValues.tertiaryEducationTot[1]))))), /*#__PURE__*/react.createElement("div", {\n    className: "second_panel"\n  }, /*#__PURE__*/react.createElement("div", {\n    className: "top"\n  }, /*#__PURE__*/react.createElement("p", {\n    className: "catagory-name"\n  }, " Schooling Milestones: ", /*#__PURE__*/react.createElement("span", null, "Municipality Focus 2018")), /*#__PURE__*/react.createElement(MiniSelect, {\n    names: [\'Buffalo City\', \'City of Cape Town\', \'Ekurhuleni\', \'eThekwini\', \'City of Joburg\', \'Mangaung\', \'Nelson Mandela Bay\', "Tshwane"],\n    setSelected: setSelected,\n    selected: selected\n  })), /*#__PURE__*/react.createElement("p", {\n    className: "title_header"\n  }, "PROPORTION OF POPULATION WITH:"), /*#__PURE__*/react.createElement("div", {\n    className: "bottom"\n  }, /*#__PURE__*/react.createElement("div", {\n    className: "stat noSchooling"\n  }, /*#__PURE__*/react.createElement("h1", null, makeHumanReadable(statsValues.noSchooling[0]), "%"), /*#__PURE__*/react.createElement("p", null, " ", makeHumanReadable(statsValues.noSchooling[1]))), /*#__PURE__*/react.createElement("div", {\n    className: "stat primarySchooling"\n  }, /*#__PURE__*/react.createElement("h1", null, makeHumanReadable(statsValues.primarySchooling[0]), "%"), /*#__PURE__*/react.createElement("p", null, makeHumanReadable(statsValues.primarySchooling[1]))), /*#__PURE__*/react.createElement("div", {\n    className: "stat secondarySchooling"\n  }, /*#__PURE__*/react.createElement("h1", null, makeHumanReadable(statsValues.secondarySchooling[0]), "%"), /*#__PURE__*/react.createElement("p", null, makeHumanReadable(statsValues.secondarySchooling[1]))), /*#__PURE__*/react.createElement("div", {\n    className: "stat tertiaryEducation"\n  }, /*#__PURE__*/react.createElement("h1", null, makeHumanReadable(statsValues.tertiaryEducation[0]), "%"), /*#__PURE__*/react.createElement("p", null, makeHumanReadable(statsValues.tertiaryEducation[1])))))) : dropName === "Sustainability" ? "" : "");\n};\n// EXTERNAL MODULE: ./node_modules/css-loader/dist/cjs.js!./node_modules/sass-loader/dist/cjs.js!./scss/components/GenericDashboard.scss\nvar GenericDashboard = __webpack_require__(63304);\nvar GenericDashboard_default = /*#__PURE__*/__webpack_require__.n(GenericDashboard);\n;// CONCATENATED MODULE: ./scss/components/GenericDashboard.scss\n\n      \n      \n      \n      \n      \n      \n      \n      \n      \n\nvar GenericDashboard_options = {};\n\nGenericDashboard_options.styleTagTransform = (styleTagTransform_default());\nGenericDashboard_options.setAttributes = (setAttributesWithoutAttributes_default());\n\n      GenericDashboard_options.insert = insertBySelector_default().bind(null, "head");\n    \nGenericDashboard_options.domAPI = (styleDomAPI_default());\nGenericDashboard_options.insertStyleElement = (insertStyleElement_default());\n\nvar GenericDashboard_update = injectStylesIntoStyleTag_default()((GenericDashboard_default()), GenericDashboard_options);\n\n\n\n\n       /* harmony default export */ const components_GenericDashboard = ((GenericDashboard_default()) && (GenericDashboard_default()).locals ? (GenericDashboard_default()).locals : undefined);\n\n// EXTERNAL MODULE: ./js/components/GenericDashboardSetup/data/data.js\nvar data = __webpack_require__(45860);\n;// CONCATENATED MODULE: ./js/components/GenericDashboardSetup/data/api.js\nfunction api_toConsumableArray(arr) { return api_arrayWithoutHoles(arr) || api_iterableToArray(arr) || api_unsupportedIterableToArray(arr) || api_nonIterableSpread(); }\nfunction api_nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction api_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return api_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return api_arrayLikeToArray(o, minLen); }\nfunction api_iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }\nfunction api_arrayWithoutHoles(arr) { if (Array.isArray(arr)) return api_arrayLikeToArray(arr); }\nfunction api_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\nfunction api_typeof(obj) { "@babel/helpers - typeof"; return api_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, api_typeof(obj); }\n\n\n\n\n\nvar populateChartGroup = function populateChartGroup(setChartGroup, indicator_ids, minYear, maxYear, yearColors, setOriginalValues, dropdownName, genericIndex) {\n  var newApiUri = "/api/explore_new?indicator_id=";\n  var oldApiUri = "/api-temp/explore/?indicator_id=";\n  var gridData = [];\n  var indicator_id_requests = [];\n  indicator_ids.forEach(function (id) {\n    if ((0,helpers/* isNewApiIndicator */.hu)(id)) {\n      indicator_id_requests.push({\n        request: axios_default().get(newApiUri + id),\n        type: "new"\n      });\n    } else if ((0,helpers/* isCombinationIndicator */.We)(id)) {\n      indicator_id_requests.push({\n        request: {\n          data: []\n        },\n        type: "combination"\n      });\n    } else if ((0,helpers/* isSingleYearIndicator */.ic)(id)) {\n      indicator_id_requests.push({\n        request: {\n          data: []\n        },\n        type: "single year combination chart"\n      });\n    } else if ((0,helpers/* isOldApiIndicator */.sk)(id)) {\n      indicator_id_requests.push({\n        request: axios_default().get(oldApiUri + id.substring(1)),\n        type: "old"\n      });\n    } else if (api_typeof(id) === "object") {\n      indicator_id_requests.push({\n        request: Promise.all([axios_default().get(newApiUri + id.endpoints[1]), axios_default().get(newApiUri + id.endpoints[0])]),\n        type: "toggle"\n      });\n    } else if ((0,helpers/* isTextBoxIndicator */.Nc)(id)) {\n      indicator_id_requests.push({\n        request: {\n          data: []\n        },\n        type: "indicator text box"\n      });\n    }\n  });\n  console.log(indicator_id_requests, "request types");\n  Promise.all(indicator_id_requests.map(function (request) {\n    return request.request;\n  })).then(function (chartData) {\n    chartData.forEach(function (chart, index) {\n      var filterData = [];\n      if (indicator_id_requests[index].type === "new") {\n        var colorCount = 0;\n        chart.data.forEach(function (item) {\n          /**\r\n           * Filter out min max year range, or \r\n           * specify range for individual graphs on grid by using chartIndex\r\n           */\n          if ((parseInt(item.year) < minYear || parseInt(item.year) > maxYear) && index !== 5) return;\n          if (dropdownName === "Life Expectancy and Health" && index > 1) {\n            if (parseInt(item.year) === 2015 || parseInt(item.year) === 2016) {\n              item.year = parseInt(item.year) === 2015 ? "2011-2015" : "2016-2020";\n              item[\'color\'] = item.year === "2011-2015" ? "#4AD2D5" : "#5F993B";\n            } else {\n              return;\n            }\n          } else {\n            item[\'color\'] = yearColors[colorCount];\n          }\n          if (dropdownName === "Sustainability" && genericIndex === 3) {\n            item[\'color\'] = helpers/* sustainabilityColors */.dN[colorCount];\n          }\n          if (index === 5 && dropdownName === "People and Households") {\n            item[\'color\'] = helpers/* secondaryColors */.St[colorCount];\n          }\n          if (index === 5 && dropdownName !== "People and Households") {\n            item[\'color\'] = helpers/* peopleHouseholdColors */.Rv[colorCount + 2];\n          }\n\n          /** Sorting labels and values alphabetically */\n          item.labels = item.labels.map(function (city) {\n            return (0,helpers/* cityLabels */.Xn)(city);\n          });\n          var ogLabels = api_toConsumableArray(item.labels);\n          item.labels.sort(function (a, b) {\n            return a.toLowerCase().localeCompare(b.toLowerCase());\n          });\n          var indexes = [];\n          item.labels.forEach(function (label, labelIndex) {\n            indexes.push(ogLabels.indexOf(label));\n          });\n          var newValues = [];\n          indexes.forEach(function (newIndex_1) {\n            return newValues.push(item.values[newIndex_1]);\n          });\n          item.values = newValues;\n          /**End of Label/Value sorting */\n          filterData.push(item);\n          colorCount++;\n        });\n      } else if (indicator_id_requests[index].type === "old") {\n        var table = (0,helpers/* tableData */.dQ)(chart.data.table, chart.data.cities, minYear, maxYear);\n        filterData.push.apply(filterData, api_toConsumableArray(table));\n      } else if (indicator_id_requests[index].type === "combination") {\n        var yearEquivalent = ["Formal Dwelling", "Informal Dwelling", "Traditional Dwelling", "Other"];\n        var combinationChart = yearEquivalent.map(function (category, index) {\n          return {\n            year: category,\n            labels: [\'BUF\', \'CPT\', \'EKU\', \'ETH\', \'JHB\', \'MAN\', \'NMA\', \'TSH\'],\n            values: [0, 0, 0, 0, 0, 0, 0, 0],\n            color: yearColors[index]\n          };\n        });\n        filterData.push.apply(filterData, api_toConsumableArray(combinationChart));\n      } else if (indicator_id_requests[index].type === "toggle") {\n        var toggleCharts = chart.map(function (data) {\n          return data.data;\n        });\n        var toggleChartWithColor = toggleCharts.map(function (chart) {\n          var newChart = [];\n          chart.forEach(function (year, yearIndex) {\n            if (parseInt(year.year) < minYear || parseInt(year.year) > maxYear) return;\n            year.color = yearColors[yearIndex];\n            year.labels = year.labels.map(function (city) {\n              return (0,helpers/* cityLabels */.Xn)(city);\n            });\n            var ogLabels = api_toConsumableArray(year.labels);\n            year.labels.sort(function (a, b) {\n              return a.toLowerCase().localeCompare(b.toLowerCase());\n            });\n            var indexes = [];\n            year.labels.forEach(function (label, labelIndex) {\n              indexes.push(ogLabels.indexOf(label));\n            });\n            var newValues = [];\n            indexes.forEach(function (newIndex_1) {\n              return newValues.push(year.values[newIndex_1]);\n            });\n            year.values = newValues;\n            newChart.push(year);\n          });\n          return newChart;\n        });\n        filterData.push(toggleChartWithColor);\n      } else if (indicator_id_requests[index].type === "indicator text box") {\n        filterData.push.apply(filterData, api_toConsumableArray(data/* indicator_text_box_data */.c_));\n      } else if (indicator_id_requests[index].type === "single year combination chart") {\n        var _yearEquivalent = ["Do not sort waste", "Waste is sorted for or by Waster Picker", "Waste is collected or dropped at recycling depot", "No data"];\n        var _combinationChart = _yearEquivalent.map(function (category, index) {\n          return {\n            year: category,\n            labels: [\'BUF\', \'CPT\', \'EKU\', \'ETH\', \'JHB\', \'MAN\', \'NMA\', \'TSH\'],\n            values: [0, 0, 0, 0, 0, 0, 0, 0],\n            color: yearColors[index]\n          };\n        });\n        filterData.push.apply(filterData, api_toConsumableArray(_combinationChart));\n      } else {\n        return;\n      }\n      gridData.push(filterData);\n    });\n    if (indicator_ids.includes("combination")) {\n      var formalDwellings = [0, 0, 0, 0, 0, 0, 0, 0];\n      var informalDwellings = [0, 0, 0, 0, 0, 0, 0, 0];\n      var traditionalDwellings = [0, 0, 0, 0, 0, 0, 0, 0];\n      var otherDwellings = [0, 0, 0, 0, 0, 0, 0, 0];\n      gridData.forEach(function (element, elementIndex) {\n        if (elementIndex === 2) return;\n        if (elementIndex === 0) {\n          element.forEach(function (year, yearIndex) {\n            if (year.year !== \'2018\') return;\n            year.values.forEach(function (value, valueIndex) {\n              formalDwellings[valueIndex] += value ? value : 0;\n            });\n          });\n        }\n        if (elementIndex === 1) {\n          element.forEach(function (year, yearIndex) {\n            if (year.year !== \'2018\') return;\n            year.values.forEach(function (value, valueIndex) {\n              informalDwellings[valueIndex] += value ? value : 0;\n            });\n          });\n        }\n        if (elementIndex === 3) {\n          element.forEach(function (year, yearIndex) {\n            if (year.year !== \'2018\') return;\n            year.values.forEach(function (value, valueIndex) {\n              traditionalDwellings[valueIndex] += value ? value : 0;\n            });\n          });\n        }\n        if (elementIndex === 4) {\n          element.forEach(function (year, yearIndex) {\n            if (year.year !== \'2018\') return;\n            year.values.forEach(function (value, valueIndex) {\n              otherDwellings[valueIndex] += value ? value : 0;\n            });\n          });\n        }\n      });\n      var colorCount = 0;\n      gridData[2] = gridData[2].map(function (item, index) {\n        item.color = helpers/* combinationColors */.$K[colorCount];\n        if (index === 0) {\n          item.values = formalDwellings;\n        } else if (index === 1) {\n          item.values = informalDwellings;\n        } else if (index === 2) {\n          item.values = traditionalDwellings;\n        } else if (index === 3) {\n          item.values = otherDwellings;\n        }\n        colorCount++;\n        return item;\n      });\n    }\n    if (indicator_ids.includes("single year combination chart")) {\n      var sortedWaste = [0, 0, 0, 0, 0, 0, 0, 0];\n      var wastePicker = [0, 0, 0, 0, 0, 0, 0, 0];\n      var recyclingDepot = [0, 0, 0, 0, 0, 0, 0, 0];\n      var noData = [0, 0, 0, 0, 0, 0, 0, 0];\n      gridData.forEach(function (element, elementIndex) {\n        if (elementIndex === 2) return;\n        if (elementIndex === 0) {\n          element.forEach(function (year, yearIndex) {\n            if (year.year !== \'2019\') return;\n            year.values.forEach(function (value, valueIndex) {\n              sortedWaste[valueIndex] += value ? value : 0;\n            });\n          });\n        }\n        if (elementIndex === 1) {\n          element.forEach(function (year, yearIndex) {\n            if (year.year !== \'2019\') return;\n            year.values.forEach(function (value, valueIndex) {\n              wastePicker[valueIndex] += value ? value : 0;\n            });\n          });\n        }\n        if (elementIndex === 3) {\n          element.forEach(function (year, yearIndex) {\n            if (year.year !== \'2019\') return;\n            year.values.forEach(function (value, valueIndex) {\n              recyclingDepot[valueIndex] += value ? value : 0;\n            });\n          });\n        }\n        if (elementIndex === 4) {\n          element.forEach(function (year, yearIndex) {\n            if (year.year !== \'2019\') return;\n            year.values.forEach(function (value, valueIndex) {\n              noData[valueIndex] += value ? value : 0;\n            });\n          });\n        }\n      });\n      var _colorCount = 0;\n      gridData = [gridData[2].map(function (item, index) {\n        item.color = helpers/* combinationColors */.$K[_colorCount];\n        if (index === 0) {\n          item.values = sortedWaste;\n        } else if (index === 1) {\n          item.values = wastePicker;\n        } else if (index === 2) {\n          item.values = recyclingDepot;\n        } else if (index === 3) {\n          item.values = noData;\n        }\n        _colorCount++;\n\n        //gridData.length = 1\n        return item;\n      })];\n    }\n    setOriginalValues(api_toConsumableArray(gridData));\n    var copy = JSON.parse(JSON.stringify(gridData)); // deep copy to be manipuilated\n    setChartGroup(api_toConsumableArray(copy));\n  })["catch"](function (err) {\n    return console.warn(err + "error fetching chart data in api.js");\n  });\n};\n// EXTERNAL MODULE: ./node_modules/reactstrap/es/Modal.js + 1 modules\nvar Modal = __webpack_require__(85677);\n// EXTERNAL MODULE: ./node_modules/reactstrap/es/ModalBody.js\nvar ModalBody = __webpack_require__(10684);\n// EXTERNAL MODULE: ./node_modules/reactstrap/es/Spinner.js\nvar Spinner = __webpack_require__(36955);\n;// CONCATENATED MODULE: ./js/components/GenericDashboardSetup/GenericChart.jsx\nfunction GenericChart_slicedToArray(arr, i) { return GenericChart_arrayWithHoles(arr) || GenericChart_iterableToArrayLimit(arr, i) || GenericChart_unsupportedIterableToArray(arr, i) || GenericChart_nonIterableRest(); }\nfunction GenericChart_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction GenericChart_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return GenericChart_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return GenericChart_arrayLikeToArray(o, minLen); }\nfunction GenericChart_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\nfunction GenericChart_iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }\nfunction GenericChart_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\n\n\n\n\n\n\n//import Sidebar_left from \'../Sidebar_left\'\n\n\n\nvar GenericChart = function GenericChart(_ref) {\n  var indicator_ids = _ref.indicator_ids,\n    minYear = _ref.minYear,\n    maxYear = _ref.maxYear,\n    gridItems = _ref.gridItems,\n    subNavContent = _ref.subNavContent,\n    genericIndex = _ref.genericIndex,\n    dropdownName = _ref.dropdownName,\n    colors = _ref.colors,\n    secondaryChart = _ref.secondaryChart;\n  var _useState = (0,react.useState)([]),\n    _useState2 = GenericChart_slicedToArray(_useState, 2),\n    chartGroup = _useState2[0],\n    setChartGroup = _useState2[1];\n  var _useState3 = (0,react.useState)([]),\n    _useState4 = GenericChart_slicedToArray(_useState3, 2),\n    originalValues = _useState4[0],\n    setOriginalValues = _useState4[1];\n  var _useState5 = (0,react.useState)(0),\n    _useState6 = GenericChart_slicedToArray(_useState5, 2),\n    selectedChart = _useState6[0],\n    setSelectedChart = _useState6[1];\n  var _useState7 = (0,react.useState)(Array.isArray(indicator_ids[0]) ? (0,helpers/* hhiDropdownNames */.No)(indicator_ids[0])[0].shortName : ""),\n    _useState8 = GenericChart_slicedToArray(_useState7, 2),\n    selectedName = _useState8[0],\n    setSelectedName = _useState8[1];\n  (0,react.useEffect)(function () {\n    setChartGroup([]);\n    populateChartGroup(setChartGroup, Array.isArray(indicator_ids[0]) ? [indicator_ids[0][selectedChart], indicator_ids[1]] : indicator_ids, minYear, maxYear,\n    //year min max\n    colors,\n    //color presets\n    setOriginalValues, dropdownName, genericIndex);\n  }, [selectedName, selectedChart]);\n  var isDropDownChart = Array.isArray(indicator_ids[0]);\n  var firstDashboardClass = genericIndex === 0 ? "first_chart" : "";\n  return chartGroup.length === gridItems ? /*#__PURE__*/react.createElement(context/* SelectContextState */.pl, null, /*#__PURE__*/react.createElement("div", {\n    className: \'generic_dashboard \' + (secondaryChart ? "secondary " : "") + firstDashboardClass\n  }, secondaryChart ? "" : /*#__PURE__*/react.createElement(react.Fragment, null, /*#__PURE__*/react.createElement(Subnav["default"], {\n    name: "State of Cities Reports",\n    dropdownName: dropdownName,\n    dropDownItem: subNavContent,\n    buttonText: "Download as PNG"\n  })), /*#__PURE__*/react.createElement("div", {\n    id: "content"\n  }, secondaryChart ? "" : /*#__PURE__*/react.createElement(GenericStatsPanel, {\n    originalValues: originalValues,\n    dropName: dropdownName\n  }), /*#__PURE__*/react.createElement(ChartGrid, {\n    indicator_ids: indicator_ids,\n    chartGroup: chartGroup,\n    setChartGroup: setChartGroup,\n    originalValues: originalValues,\n    gridItems: gridItems,\n    dropdownName: dropdownName,\n    secondDropDown: isDropDownChart ? (0,helpers/* hhiDropdownNames */.No)(indicator_ids[0]) : null,\n    selectedName: selectedName,\n    setSelectedName: setSelectedName,\n    setSelectedChart: setSelectedChart,\n    selectedDropDownChart: selectedChart,\n    genericIndex: genericIndex\n  })))) : /*#__PURE__*/react.createElement(Modal/* default */.Z, {\n    id: "loader",\n    isOpen: true,\n    className: "modal-dialog-centered loader"\n  }, /*#__PURE__*/react.createElement(ModalBody/* default */.Z, null, /*#__PURE__*/react.createElement("div", {\n    className: "row"\n  }, /*#__PURE__*/react.createElement("div", {\n    className: "col-2"\n  }), /*#__PURE__*/react.createElement("div", {\n    className: "col-0 ml-3 pt-4"\n  }, /*#__PURE__*/react.createElement(Spinner/* default */.Z, {\n    type: "grow",\n    color: "secondary",\n    size: "sm"\n  }), /*#__PURE__*/react.createElement(Spinner/* default */.Z, {\n    type: "grow",\n    color: "success",\n    size: "sm"\n  }), /*#__PURE__*/react.createElement(Spinner/* default */.Z, {\n    type: "grow",\n    color: "danger",\n    size: "sm"\n  }), /*#__PURE__*/react.createElement(Spinner/* default */.Z, {\n    type: "grow",\n    color: "warning",\n    size: "sm"\n  })), /*#__PURE__*/react.createElement("div", {\n    className: "col-0 pt-4 pl-4 float-left"\n  }, "Loading Content...")), /*#__PURE__*/react.createElement("br", null)));\n};\n/* harmony default export */ const GenericDashboardSetup_GenericChart = (GenericChart);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///62592\n')},92202:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  "default": () => (/* binding */ components_Subnav)\n});\n\n// EXTERNAL MODULE: ./node_modules/react/index.js\nvar react = __webpack_require__(67294);\n// EXTERNAL MODULE: ./js/components/Button.jsx\nvar Button = __webpack_require__(11741);\n// EXTERNAL MODULE: ./node_modules/reactstrap/es/Modal.js + 1 modules\nvar Modal = __webpack_require__(85677);\n// EXTERNAL MODULE: ./node_modules/reactstrap/es/ModalBody.js\nvar ModalBody = __webpack_require__(10684);\n// EXTERNAL MODULE: ./node_modules/reactstrap/es/Spinner.js\nvar Spinner = __webpack_require__(36955);\n;// CONCATENATED MODULE: ./js/components/DownloadScreenCapture.jsx\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\nfunction _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\n\n\nvar DownloadScreenCapture = function DownloadScreenCapture(props) {\n  var _useState = (0,react.useState)(false),\n    _useState2 = _slicedToArray(_useState, 2),\n    loader = _useState2[0],\n    setLoader = _useState2[1];\n  var download = function download(e) {\n    setLoader(true);\n    var htmlToImage = __webpack_require__(10183);\n    e.preventDefault();\n    htmlToImage.toJpeg(document.getElementById(\'content\'), {\n      quality: 0.95\n    }).then(function (dataUrl) {\n      setLoader(false);\n      var link = document.createElement(\'a\');\n      link.download = \'data-snapshot.png\';\n      link.href = dataUrl;\n      link.click();\n    });\n  };\n  return /*#__PURE__*/react.createElement(react.Fragment, null, /*#__PURE__*/react.createElement(Button/* default */.Z, {\n    className: ["download-screen-capture "] + props.className,\n    onClick: download,\n    text: props.buttonText,\n    id: "download",\n    downloadBtn: true\n  }), loader ? /*#__PURE__*/react.createElement(Modal/* default */.Z, {\n    id: "loader",\n    isOpen: loader,\n    className: "modal-dialog-centered loader"\n  }, /*#__PURE__*/react.createElement(ModalBody/* default */.Z, null, /*#__PURE__*/react.createElement("div", {\n    className: "row"\n  }, /*#__PURE__*/react.createElement("div", {\n    className: "col-2"\n  }), /*#__PURE__*/react.createElement("div", {\n    className: "col-0 ml-3 pt-4"\n  }, /*#__PURE__*/react.createElement(Spinner/* default */.Z, {\n    type: "grow",\n    color: "secondary",\n    size: "sm"\n  }), /*#__PURE__*/react.createElement(Spinner/* default */.Z, {\n    type: "grow",\n    color: "success",\n    size: "sm"\n  }), /*#__PURE__*/react.createElement(Spinner/* default */.Z, {\n    type: "grow",\n    color: "danger",\n    size: "sm"\n  }), /*#__PURE__*/react.createElement(Spinner/* default */.Z, {\n    type: "grow",\n    color: "warning",\n    size: "sm"\n  })), /*#__PURE__*/react.createElement("div", {\n    className: "col-0 pt-4 pl-4 float-left"\n  }, "Downloading Image...")), /*#__PURE__*/react.createElement("br", null))) : \'\');\n};\n/* harmony default export */ const components_DownloadScreenCapture = (DownloadScreenCapture);\n// EXTERNAL MODULE: ./node_modules/reactstrap/es/ButtonDropdown.js + 1 modules\nvar ButtonDropdown = __webpack_require__(6408);\n// EXTERNAL MODULE: ./node_modules/reactstrap/es/DropdownToggle.js + 1 modules\nvar DropdownToggle = __webpack_require__(32842);\n// EXTERNAL MODULE: ./node_modules/reactstrap/es/DropdownMenu.js\nvar DropdownMenu = __webpack_require__(42365);\n// EXTERNAL MODULE: ./node_modules/reactstrap/es/DropdownItem.js\nvar DropdownItem = __webpack_require__(98227);\n// EXTERNAL MODULE: ./scss/components/Subnav.scss\nvar Subnav = __webpack_require__(44448);\n;// CONCATENATED MODULE: ./js/components/Dropdown.jsx\nfunction Dropdown_slicedToArray(arr, i) { return Dropdown_arrayWithHoles(arr) || Dropdown_iterableToArrayLimit(arr, i) || Dropdown_unsupportedIterableToArray(arr, i) || Dropdown_nonIterableRest(); }\nfunction Dropdown_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction Dropdown_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return Dropdown_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return Dropdown_arrayLikeToArray(o, minLen); }\nfunction Dropdown_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\nfunction Dropdown_iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }\nfunction Dropdown_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\n\n\nvar Example = function Example(props) {\n  var _useState = (0,react.useState)(false),\n    _useState2 = Dropdown_slicedToArray(_useState, 2),\n    dropdownOpen = _useState2[0],\n    setOpen = _useState2[1];\n  var toggle = function toggle() {\n    return setOpen(!dropdownOpen);\n  };\n  return /*#__PURE__*/react.createElement(ButtonDropdown/* default */.Z, {\n    isOpen: dropdownOpen,\n    toggle: toggle,\n    className: "dropdown"\n  }, /*#__PURE__*/react.createElement(DropdownToggle/* default */.Z, {\n    caret: true\n  }, props.name), /*#__PURE__*/react.createElement(DropdownMenu/* default */.Z, null, props.dropDownItem.dropdownMenu.map(function (item, index) {\n    return /*#__PURE__*/react.createElement(DropdownItem/* default */.Z, {\n      key: index,\n      active: item.active,\n      href: item.href\n    }, item.name);\n  })));\n};\n/* harmony default export */ const Dropdown = (Example);\n// EXTERNAL MODULE: ./node_modules/prop-types/index.js\nvar prop_types = __webpack_require__(45697);\nvar prop_types_default = /*#__PURE__*/__webpack_require__.n(prop_types);\n// EXTERNAL MODULE: ./js/context.jsx\nvar context = __webpack_require__(87644);\n;// CONCATENATED MODULE: ./js/components/Subnav.jsx\n// COMPONENT NOTES\n// This component requires the following sub components \n// - Dropdown\n// - DownloadScreenCapture \n// - Collapse \n\n// Npm packages required:\n// - html2canvas\n// - reactstrap\n\n\n\n\n\n\nvar SubNav = function SubNav(props) {\n  var newChartsCondition = props.dropdownName === "Employment" || props.dropdownName === "Dwellings" || props.dropdownName === "Household Income";\n  var globalCityDropDownClose = function globalCityDropDownClose() {};\n  if (newChartsCondition) {\n    globalCityDropDownClose = (0,context/* useGlobalClose */.L6)();\n  }\n  var closeAlerts = (0,context/* useCloseAllErrors */.pu)();\n  var closeAllAlerts = function closeAllAlerts() {\n    globalCityDropDownClose();\n    var isClearable = false;\n    closeAlerts.error.forEach(function (item) {\n      if (item.errorThrown === true) {\n        isClearable = true;\n      }\n    });\n    if (isClearable) {\n      var newState = closeAlerts.error.map(function (obj) {\n        return {\n          errorThrown: false\n        };\n      });\n      closeAlerts.setError(newState);\n    }\n  };\n  return /*#__PURE__*/react.createElement("div", {\n    className: ["subnav subnav--wrapper container-fluid "] + props.className,\n    onClick: function onClick() {\n      closeAllAlerts();\n    }\n  }, /*#__PURE__*/react.createElement("div", {\n    className: "subnav--breadcrumbs"\n  }, /*#__PURE__*/react.createElement("strong", null, props.name), " / ", /*#__PURE__*/react.createElement(Dropdown, {\n    name: props.dropdownName,\n    header: props.dropdownHeading,\n    menu: props.dropdownMenu,\n    dropDownItem: props.dropDownItem\n  })), /*#__PURE__*/react.createElement("div", {\n    className: "subnav--cta"\n  }, /*#__PURE__*/react.createElement("div", {\n    className: "row"\n  }, /*#__PURE__*/react.createElement("div", {\n    className: ""\n  }, /*#__PURE__*/react.createElement(components_DownloadScreenCapture, {\n    targetID: "charts-container",\n    filename: "image.png",\n    className: "round btn_secondary",\n    buttonText: props.buttonText\n  }), " "))));\n};\n/* harmony default export */ const components_Subnav = (SubNav);\nSubNav.propTypes = {\n  /**\r\n   * Title text for the component\r\n   */\n  name: (prop_types_default()).string,\n  /**\r\n   * Main label for the dropdown sub component\r\n   */\n  dropdownName: (prop_types_default()).string,\n  /**\r\n   * Heading within the dropdown sub component\r\n   */\n  dropdownHeading: (prop_types_default()).string,\n  /**\r\n   * Menu for the dropdown populated by an object\r\n   */\n  dropdownMenu: (prop_types_default()).object,\n  /**\r\n   * Text for the sub nav button\r\n   */\n  buttonText: (prop_types_default()).string,\n  /**\r\n   * Add custom classes to the parent div wrapper of this component\r\n   */\n  className: (prop_types_default()).string\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///92202\n')},63304:(module,exports,__webpack_require__)=>{eval('// Imports\nvar ___CSS_LOADER_API_IMPORT___ = __webpack_require__(23645);\nexports = ___CSS_LOADER_API_IMPORT___(false);\n// Module\nexports.push([module.id, ".generic_dashboard{margin-top:100px;background-color:#f1f1f1;padding-bottom:35px}.generic_dashboard .dropdown-menu.show{top:41px !important;transform:none !important;width:450px}.generic_dashboard .stat_display_panel{background-color:#fff;display:flex;flex-direction:row}.generic_dashboard .stat_display_panel .first_panel{position:relative;padding:12px 24px 20px 15px}.generic_dashboard .stat_display_panel .first_panel .title{font-family:\\"Montserrat\\";font-style:normal;font-weight:400;font-size:10px;line-height:12px;text-transform:uppercase;color:#2f3442;margin-top:16px}.generic_dashboard .stat_display_panel .first_panel .heading{font-family:\\"Montserrat\\";font-style:normal;font-weight:400;font-size:10px;line-height:12px;text-transform:uppercase;color:#2f3442;padding:16px 0 0 0}.generic_dashboard .stat_display_panel .first_panel .catagory-name{font-family:\\"Montserrat\\";font-style:normal;font-weight:700;font-size:14px;line-height:14px;padding:0;margin:0;color:#2f3442}.generic_dashboard .stat_display_panel .first_panel .catagory-name span{font-size:14px}.generic_dashboard .stat_display_panel .first_panel .row{margin:0;display:flex;flex-direction:row;justify-content:space-between;width:calc(50vw - 39px)}.generic_dashboard .stat_display_panel .first_panel .row.closer{justify-content:center;gap:39px}.generic_dashboard .stat_display_panel .first_panel .row .stat{padding-left:8px;display:flex;flex-direction:column;align-items:center}.generic_dashboard .stat_display_panel .first_panel .row .stat.aveMaleTot>p{width:93px;text-align:center}.generic_dashboard .stat_display_panel .first_panel .row .stat.aveFemaleTot>p{width:93px;text-align:center}.generic_dashboard .stat_display_panel .first_panel .row .stat.publicHealthCareTot>p{width:108px;text-align:center}.generic_dashboard .stat_display_panel .first_panel .row .stat.medicalAidTot>p{width:69px;text-align:center}.generic_dashboard .stat_display_panel .first_panel .row .stat.noSchoolingTot>p{width:83px;text-align:center}.generic_dashboard .stat_display_panel .first_panel .row .stat.primarySchoolingTot>p{width:95px;text-align:center}.generic_dashboard .stat_display_panel .first_panel .row .stat.secondarySchoolingTot>p{width:115px;text-align:center}.generic_dashboard .stat_display_panel .first_panel .row .stat.tertiaryEducationTot>p{width:77px;text-align:center}.generic_dashboard .stat_display_panel .first_panel .row .stat.adequiteTot>p{width:91px;text-align:center}.generic_dashboard .stat_display_panel .first_panel .row .stat.inadequiteTot>p{width:91px;text-align:center}.generic_dashboard .stat_display_panel .first_panel .row .stat.severelyInadequiteTot>p{width:126px;text-align:center}.generic_dashboard .stat_display_panel .first_panel .row .stat>p{font-family:\\"Montserrat\\";font-style:normal;font-weight:400;font-size:10px;line-height:12px;text-transform:uppercase;color:#2f3442}.generic_dashboard .stat_display_panel .first_panel .row .stat>h1{font-family:\\"Montserrat\\";font-style:normal;font-weight:600;font-size:24px;line-height:30px;color:#2f3442;padding:10px 0 3px 0}.generic_dashboard .stat_display_panel .first_panel:after{content:\\" \\";position:absolute;right:0;bottom:11.5%;height:77%;outline:1px solid #b2bec3}.generic_dashboard .stat_display_panel .second_panel{padding:12px 24px 20px 15px;width:100%}.generic_dashboard .stat_display_panel .second_panel .title_header{font-family:\\"Montserrat\\";font-style:normal;font-weight:400;font-size:10px;line-height:12px;text-transform:uppercase;color:#2f3442;margin-top:16px}.generic_dashboard .stat_display_panel .second_panel .heading{font-family:\\"Montserrat\\";font-style:normal;font-weight:400;font-size:10px;line-height:12px;text-transform:uppercase;color:#2f3442;padding:16px 0 0 0}.generic_dashboard .stat_display_panel .second_panel .top{display:flex;flex-direction:row;justify-content:space-between}.generic_dashboard .stat_display_panel .second_panel .top .catagory-name{font-family:\\"Montserrat\\";font-style:normal;font-weight:700;font-size:14px;line-height:14px;padding:0;margin:0;color:#2f3442}.generic_dashboard .stat_display_panel .second_panel .top .catagory-name span{font-size:14px}.generic_dashboard .stat_display_panel .second_panel .bottom{display:flex;flex-direction:row;justify-content:space-between}.generic_dashboard .stat_display_panel .second_panel .bottom.closer{justify-content:center;gap:39px}.generic_dashboard .stat_display_panel .second_panel .bottom .stat{padding-left:8px;display:flex;flex-direction:column;align-items:center}.generic_dashboard .stat_display_panel .second_panel .bottom .stat.aveMale>p{width:93px;text-align:center}.generic_dashboard .stat_display_panel .second_panel .bottom .stat.aveFemale>p{width:93px;text-align:center}.generic_dashboard .stat_display_panel .second_panel .bottom .stat.publicHealthCare>p{width:108px;text-align:center}.generic_dashboard .stat_display_panel .second_panel .bottom .stat.medicalAid>p{width:69px;text-align:center}.generic_dashboard .stat_display_panel .second_panel .bottom .stat.noSchooling>p{width:83px;text-align:center}.generic_dashboard .stat_display_panel .second_panel .bottom .stat.primarySchooling>p{width:95px;text-align:center}.generic_dashboard .stat_display_panel .second_panel .bottom .stat.secondarySchooling>p{width:115px;text-align:center}.generic_dashboard .stat_display_panel .second_panel .bottom .stat.tertiaryEducation>p{width:77px;text-align:center}.generic_dashboard .stat_display_panel .second_panel .bottom .stat.adequite>p{width:91px;text-align:center}.generic_dashboard .stat_display_panel .second_panel .bottom .stat.inadequite>p{width:91px;text-align:center}.generic_dashboard .stat_display_panel .second_panel .bottom .stat.severelyInadequite>p{width:126px;text-align:center}.generic_dashboard .stat_display_panel .second_panel .bottom .stat>p{font-family:\\"Montserrat\\";font-style:normal;font-weight:400;font-size:10px;line-height:12px;text-transform:uppercase;color:#2f3442}.generic_dashboard .stat_display_panel .second_panel .bottom .stat>h1{font-family:\\"Montserrat\\";font-style:normal;font-weight:600;font-size:24px;line-height:30px;color:#2f3442;padding:10px 0 3px 0}.generic_dashboard .secondaryChartSpacer{height:13px;background-color:#f1f1f1}.generic_dashboard .chart_grid{background-color:#f1f1f1}.generic_dashboard .chart_grid .rounded_container{border-radius:5px 5px 5px 5px;background-color:#fff;margin:15px 15px 0 15px}.generic_dashboard .chart_grid .rounded_container .select_wrapper{border-bottom:2px solid #f1f1f1;padding:7px 0}.generic_dashboard .chart_grid .rounded_container .double{display:flex;flex-direction:row;position:relative}.generic_dashboard .chart_grid .rounded_container .double .conditional_select_wrapper{display:flex;flex-direction:column;gap:6px}.generic_dashboard .chart_grid .rounded_container .double .conditional_select_wrapper .select_title{margin-left:45px;font-family:\\"Montserrat\\";font-style:normal;font-weight:400;font-size:10px;line-height:12px;text-transform:uppercase;color:#2f3442;opacity:.8}.generic_dashboard .chart_grid .rounded_container .double .title_wrapper{position:absolute;left:calc(45px + 63vw + 30px)}.generic_dashboard .chart_grid .rounded_container .double .title_wrapper .macro_select{display:inline !important;width:400px !important;height:36.2px;border-radius:28px;position:relative}.generic_dashboard .chart_grid .rounded_container .double .title_wrapper .macro_select>.title{position:absolute;top:50%;left:12px;transform:translate(0, -50%);display:block !important;width:280px !important;white-space:nowrap !important;overflow:hidden !important;text-overflow:ellipsis !important;align-items:center;font-family:\\"Montserrat\\";font-style:normal;font-weight:400;font-size:13.6px;line-height:1.5;color:#4a4a4a}.generic_dashboard .chart_grid .rounded_container .double .title_wrapper .dropdownbox{display:none;box-shadow:rgba(0,0,0,.24) 0px 3px 8px}.generic_dashboard .chart_grid .rounded_container .double .title_wrapper .dropdownbox.show{display:flex;background-color:#fff;flex-direction:column;align-items:flex-start;position:absolute;width:400px;top:calc(100% + 10px);right:0;z-index:100;border-radius:5px}.generic_dashboard .chart_grid .rounded_container .double .title_wrapper .dropdownbox.show>p{display:block;font-family:\\"Montserrat\\";font-style:normal;font-weight:400;font-size:13.6px;line-height:13px;cursor:pointer}.generic_dashboard .chart_grid .rounded_container .grid-container{display:grid;grid-column-gap:32px;grid-row-gap:21px;grid-template-columns:calc(33.3333333333vw - 51.3333333333px) calc(33.3333333333vw - 51.3333333333px) calc(33.3333333333vw - 51.3333333333px);background-color:#fff;padding:15px 30px 15px 30px;position:relative;border-radius:0 0 5px 5px}.generic_dashboard .chart_grid .rounded_container .grid-container:after{content:\\"\\";position:absolute;width:2px;background:#f1f1f1;height:calc(100% - 30px);left:calc(66.6666666667vw - 102.6666666667px + 32px + 30px + 15px);top:15px}.generic_dashboard .chart_grid .rounded_container .grid-container .heading_wrapper .heading{line-height:1.2;height:unset}.generic_dashboard .chart_grid .rounded_container .grid-container .source_title{margin:0;padding:3px 0 3px 0;font-family:\\"Montserrat\\";font-style:italic;font-weight:400;line-height:1;font-size:10px;color:#8c8f97}.generic_dashboard .chart_grid .rounded_container .grid-container .source_title .source_pre{font-family:\\"Montserrat\\";font-style:normal;font-weight:400;font-size:8px;line-height:10px;text-transform:uppercase;color:#8c8f97;float:left}.generic_dashboard .chart_grid .rounded_container .grid-only-charts-2{display:grid;grid-column-gap:36px;grid-row-gap:10px;grid-template-columns:calc(50vw - 15px - 64px) calc(50vw - 15px - 64px);background-color:#fff;padding:12px 32px;position:relative;border-radius:0 0 5px 5px}.generic_dashboard .chart_grid .rounded_container .grid-only-charts-2 .heading_wrapper{align-items:center}.generic_dashboard .chart_grid .rounded_container .grid-only-charts-2 .heading_wrapper .heading{height:unset;width:418px;line-height:1.2}.generic_dashboard .chart_grid .rounded_container .grid-only-charts-2 .source_title{margin:0;padding:3px 0 3px 0;font-family:\\"Montserrat\\";font-style:italic;font-weight:400;line-height:1;font-size:10px;color:#8c8f97}.generic_dashboard .chart_grid .rounded_container .grid-only-charts-2 .source_title .source_pre{font-family:\\"Montserrat\\";font-style:normal;font-weight:400;font-size:8px;line-height:10px;text-transform:uppercase;color:#8c8f97;float:left}.generic_dashboard .chart_grid .rounded_container .grid-container-1{display:grid;grid-column-gap:0px;grid-row-gap:0px;grid-template-columns:calc(100vw - 30px - 85px);background-color:#fff;padding:25px;position:relative;border-radius:0 0 5px 5px}.generic_dashboard .chart_grid .rounded_container .grid-container-1 .chart_wrapper .source_title{margin:0;padding:3px 0 3px 0;font-family:\\"Montserrat\\";font-style:italic;font-weight:400;line-height:1;font-size:10px;color:#8c8f97}.generic_dashboard .chart_grid .rounded_container .grid-container-1 .chart_wrapper .source_title .source_pre{font-family:\\"Montserrat\\";font-style:normal;font-weight:400;font-size:8px;line-height:10px;text-transform:uppercase;color:#8c8f97;float:left}.generic_dashboard .chart_grid .rounded_container .grid-container-1 .chart_wrapper .heading_wrapper{align-items:center}.generic_dashboard .chart_grid .rounded_container .grid-container-1 .chart_wrapper .heading_wrapper .heading{height:unset;width:100%;line-height:1.2}.generic_dashboard .chart_grid .rounded_container .grid-container-4{display:grid;grid-column-gap:32px;grid-row-gap:10px;grid-template-columns:calc(50vw - 56px) calc(50vw - 56px);background-color:#fff;padding:25px;position:relative;border-radius:0 0 5px 5px}.generic_dashboard .chart_grid .rounded_container .grid-container-4:after{content:\\"\\";position:absolute;width:2px;background:#f1f1f1;height:calc(100% - 20px);left:calc(50% + 8px);top:10px}.generic_dashboard .chart_grid .rounded_container .grid-container-4 .chart_wrapper .source_title{margin:0;padding:3px 0 3px 0;font-family:\\"Montserrat\\";font-style:italic;font-weight:400;line-height:1;font-size:10px;color:#8c8f97}.generic_dashboard .chart_grid .rounded_container .grid-container-4 .chart_wrapper .source_title .source_pre{font-family:\\"Montserrat\\";font-style:normal;font-weight:400;font-size:8px;line-height:10px;text-transform:uppercase;color:#8c8f97;float:left}.generic_dashboard .chart_grid .rounded_container .grid-container-4 .chart_wrapper .heading_wrapper{align-items:center}.generic_dashboard .chart_grid .rounded_container .grid-container-4 .chart_wrapper .heading_wrapper .heading{height:unset;width:418px}.generic_dashboard .chart_grid .rounded_container .horizontal{grid-row-gap:34px;grid-template-columns:calc(50vw - 65px) calc(50vw - 65px)}.generic_dashboard .chart_grid .rounded_container .horizontal:after{content:\\"\\";position:absolute;height:2px;background:#f1f1f1;width:calc(100% - 50px);left:25px;top:50%}.generic_dashboard .chart_grid .rounded_container .horizontal_food{grid-row-gap:32px}.generic_dashboard .chart_grid .rounded_container .horizontal_food:after{content:\\"\\";position:absolute;height:2px;background:#f1f1f1;width:calc(100% - 40px);left:25px;top:50%}.generic_dashboard .chart_grid .rounded_container .grid-2-text{display:grid;grid-column-gap:60px;grid-row-gap:10px;grid-template-columns:62.5vw 40vw;background-color:#fff;padding:12px 32px;position:relative;border-radius:0 0 5px 5px}.generic_dashboard .chart_grid .rounded_container .grid-2-text:after{content:\\"\\";position:absolute;width:2px;background:#f1f1f1;height:calc(100% - 24px);left:calc(30px + 62.5vw + 32px);top:12px}.generic_dashboard .chart_grid .rounded_container .grid-2-text .chart_wrapper .dropdown_chart_source{margin:0;padding:3px 0 3px 0;font-family:\\"Montserrat\\";font-style:italic;font-weight:400;line-height:1;font-size:10px;color:#8c8f97}.generic_dashboard .chart_grid .rounded_container .grid-2-text .chart_wrapper .dropdown_chart_source .source_pre{font-family:\\"Montserrat\\";font-style:normal;font-weight:400;font-size:8px;line-height:10px;text-transform:uppercase;color:#8c8f97;float:left}.generic_dashboard .spacer{height:30px;background-color:#f1f1f1}.secondary{margin:0;padding:13px 0 0 0}.secondary .chart_grid .rounded_container{padding:0;margin:0px 15px 0 15px}.first_chart{padding:0px 0 0 0}.first_chart .chart_grid .rounded_container{padding:0;margin:15px 15px 0 15px}", ""]);\n// Exports\nmodule.exports = exports;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///63304\n')},49596:(module,exports,__webpack_require__)=>{eval('// Imports\nvar ___CSS_LOADER_API_IMPORT___ = __webpack_require__(23645);\nexports = ___CSS_LOADER_API_IMPORT___(false);\n// Module\nexports.push([module.id, ".custom_select{display:flex;flex-direction:row;position:relative;align-items:center;width:63vw;height:36.2px;padding:5px 10px 5px 5px;background:#fff;border:1px solid #4a4a4a;border-radius:28px;margin-left:45px;cursor:pointer}.custom_select .tag{display:flex;align-items:center;font-family:\\"Montserrat\\";justify-content:space-between;font-style:normal;font-weight:400;font-size:13.6px;height:26.2px;width:69.3px;line-height:13px;padding:0 10px;color:#4a4a4a;background:rgba(207,221,232,.6);backdrop-filter:blur(10.8731px);border-radius:12.5px;margin:0 10px 0 0;cursor:pointer}.custom_select .tag span{padding:5px}.custom_select .tag span:hover{background-color:rgba(255,0,0,.4)}.custom_select .tag span>svg{height:8px;width:8px;margin-left:5px}.custom_select .dropdownbox{display:none;box-shadow:rgba(0,0,0,.24) 0px 3px 8px}.custom_select .dropdownbox.show{display:flex;background-color:#fff;flex-direction:column;align-items:flex-start;position:absolute;width:100%;top:calc(100% + 10px);left:0;z-index:4;border-radius:5px}.custom_select .dropdownbox.show>p{display:block;font-family:\\"Montserrat\\";font-style:normal;font-weight:400;font-size:13.6px;line-height:13px;color:#4a4a4a;padding:5px 0 5px 8px;cursor:pointer}.custom_select .dropdownbox.show>p:hover{background-color:rgba(0,255,255,.15);transition:background-color 1s cubic-bezier(0.165, 0.84, 0.44, 1)}.custom_select .line_icon{height:20px;width:14px;position:absolute;right:29px;top:50%;transform:translate(0, -50%)}.custom_select .chevron_icon{height:12px;width:12px;position:absolute;right:13px;top:50%;transform:translate(0, -50%);cursor:pointer}.custom_select>.x_icon{height:12px;width:12px;position:absolute;right:50px;top:50%;transform:translate(0, -50%);cursor:pointer}.custom_select>.x_icon:hover{stroke:rgba(255,0,0,.4)}.mini_select{display:flex;flex-direction:row;position:relative;width:140px;height:20px;padding:4px 0 4px 10px;background:#fff;border:1px solid #4a4a4a;border-radius:12.5px;margin-left:45px;cursor:pointer}.mini_select .title{display:flex;align-items:center;font-family:\\"Montserrat\\";font-style:normal;font-weight:400;font-size:10px;line-height:13px;color:#4a4a4a}.mini_select .dropdownbox{display:none;box-shadow:rgba(0,0,0,.24) 0px 3px 8px}.mini_select .dropdownbox.show{display:flex;background-color:#fff;flex-direction:column;align-items:flex-start;position:absolute;width:140px;top:calc(100% + 10px);right:0;z-index:100;border-radius:5px}.mini_select .dropdownbox.show>p{display:block;font-family:\\"Montserrat\\";font-style:normal;font-weight:400;font-size:10px;line-height:13px;color:#4a4a4a;padding:5px 0 5px 8px;cursor:pointer}.mini_select .dropdownbox.show>p:hover{background-color:rgba(0,255,255,.15);transition:background-color 1s cubic-bezier(0.165, 0.84, 0.44, 1)}.mini_select .chevron_icon{position:absolute;right:10px;top:50%;transform:translate(0, -50%);cursor:pointer}.title_wrapper{display:flex;flex-direction:column;gap:6px}.title_wrapper .dropdown_title{font-family:\\"Montserrat\\";font-style:normal;font-weight:400;font-size:10px;line-height:12px;text-transform:uppercase;color:#2f3442;opacity:.8}.title_wrapper .mini_select{display:flex;flex-direction:row;position:relative;width:140px;height:20px;padding:4px 0 4px 10px;background:#fff;border:1px solid #4a4a4a;border-radius:12.5px;margin-left:45px;cursor:pointer}.title_wrapper .mini_select.macro_select{width:28vw;height:36.2px;border-radius:28px;margin-left:0}.title_wrapper .mini_select.macro_select .title{display:flex;align-items:center;font-family:\\"Montserrat\\";font-style:normal;font-weight:400;font-size:13.6px;line-height:1.5;color:#4a4a4a}.title_wrapper .mini_select.macro_select .dropdownbox{display:none;box-shadow:rgba(0,0,0,.24) 0px 3px 8px}.title_wrapper .mini_select.macro_select .dropdownbox.show{display:flex;background-color:#fff;flex-direction:column;align-items:flex-start;position:absolute;width:28vw;top:calc(100% + 10px);right:0;z-index:100;border-radius:5px}.title_wrapper .mini_select.macro_select .dropdownbox.show>p{display:block;font-family:\\"Montserrat\\";font-style:normal;font-weight:400;font-size:13.6px;line-height:13px;cursor:pointer}.title_wrapper .mini_select.macro_select .chevron_icon{height:12px;width:12px;right:13px}.title_wrapper .mini_select .title{display:flex;align-items:center;font-family:\\"Montserrat\\";font-style:normal;font-weight:400;font-size:10px;line-height:13px;color:#4a4a4a}.title_wrapper .mini_select .dropdownbox{display:none;box-shadow:rgba(0,0,0,.24) 0px 3px 8px}.title_wrapper .mini_select .dropdownbox.show{display:flex;background-color:#fff;flex-direction:column;align-items:flex-start;position:absolute;width:140px;top:calc(100% + 10px);right:0;z-index:100;border-radius:5px}.title_wrapper .mini_select .dropdownbox.show>p{display:block;font-family:\\"Montserrat\\";font-style:normal;font-weight:400;font-size:10px;line-height:13px;color:#4a4a4a;padding:5px 0 5px 8px;cursor:pointer}.title_wrapper .mini_select .dropdownbox.show>p:hover{background-color:rgba(0,255,255,.15);transition:background-color 1s cubic-bezier(0.165, 0.84, 0.44, 1)}.title_wrapper .mini_select .chevron_icon{position:absolute;right:10px;top:50%;transform:translate(0, -50%);cursor:pointer}", ""]);\n// Exports\nmodule.exports = exports;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///49596\n')},95280:(module,exports,__webpack_require__)=>{eval('// Imports\nvar ___CSS_LOADER_API_IMPORT___ = __webpack_require__(23645);\nexports = ___CSS_LOADER_API_IMPORT___(false);\n// Module\nexports.push([module.id, ".charts_dashboards--button{box-shadow:none !important}.charts_dashboards--button:hover{box-shadow:none !important}.dropdown>.btn{box-shadow:none !important}.dropdown>.btn:hover{box-shadow:none !important}", ""]);\n// Exports\nmodule.exports = exports;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTUyODAuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQSxrQ0FBa0MsbUJBQU8sQ0FBQyxLQUFtRDtBQUM3RjtBQUNBO0FBQ0EscURBQXFELDJCQUEyQixpQ0FBaUMsMkJBQTJCLGVBQWUsMkJBQTJCLHFCQUFxQiwyQkFBMkI7QUFDdE87QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL29jbF9iYl9saWJyYXJ5Ly4vc2Nzcy9jb21wb25lbnRzL1N1Ym5hdi5zY3NzP2NkYjAiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gSW1wb3J0c1xudmFyIF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyA9IHJlcXVpcmUoXCIuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCIpO1xuZXhwb3J0cyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhmYWxzZSk7XG4vLyBNb2R1bGVcbmV4cG9ydHMucHVzaChbbW9kdWxlLmlkLCBcIi5jaGFydHNfZGFzaGJvYXJkcy0tYnV0dG9ue2JveC1zaGFkb3c6bm9uZSAhaW1wb3J0YW50fS5jaGFydHNfZGFzaGJvYXJkcy0tYnV0dG9uOmhvdmVye2JveC1zaGFkb3c6bm9uZSAhaW1wb3J0YW50fS5kcm9wZG93bj4uYnRue2JveC1zaGFkb3c6bm9uZSAhaW1wb3J0YW50fS5kcm9wZG93bj4uYnRuOmhvdmVye2JveC1zaGFkb3c6bm9uZSAhaW1wb3J0YW50fVwiLCBcIlwiXSk7XG4vLyBFeHBvcnRzXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHM7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///95280\n')},84050:(module,exports,__webpack_require__)=>{eval('// Imports\nvar ___CSS_LOADER_API_IMPORT___ = __webpack_require__(23645);\nexports = ___CSS_LOADER_API_IMPORT___(false);\n// Module\nexports.push([module.id, ".chart_wrapper{position:relative}.chart_wrapper .heading_wrapper{display:flex;flex-direction:row;justify-content:space-between;align-items:flex-start;padding:0 0 0 0}.chart_wrapper .heading_wrapper .heading_alternate{font-family:\\"Montserrat\\";font-style:normal;font-weight:400;font-size:12px;line-height:15px;color:#2f3442}.chart_wrapper .heading_wrapper .heading_alternate .secondary_title{font-weight:600;font-size:12px}.chart_wrapper .heading_wrapper .heading{padding:0;margin:0;font-family:\\"Montserrat\\";font-style:normal;font-weight:600;font-size:12px;line-height:15px;color:#2f3442;height:32px;width:261px}.chart_wrapper .heading_wrapper .heading .combination_year{font-size:12px}.chart_wrapper .heading_wrapper .title{font-family:\\"Montserrat\\";font-style:normal;font-weight:400;font-size:12px;line-height:15px;color:#2f3442}.chart_wrapper .heading_wrapper .title span{font-weight:600;font-size:12px}.chart_wrapper .heading_wrapper .button_group{display:flex}.chart_wrapper .heading_wrapper .button_group button{border:1px solid #b0b4b9;height:15px;text-align:center;padding:0 9px}.chart_wrapper .heading_wrapper .button_group .number{border-radius:11px 0 0 11px;background-color:#646b75;font-family:\\"Montserrat\\";font-style:normal;font-weight:500;font-size:12px;line-height:14px;text-align:center;color:#fff;outline:none;border:1px solid #646b75}.chart_wrapper .heading_wrapper .button_group .number.deselect{color:#646b75;background-color:#fff;border:1px solid #b0b4b9}.chart_wrapper .heading_wrapper .button_group .percent{border-radius:0 11px 11px 0;background-color:#fff;font-family:\\"Montserrat\\";font-style:normal;font-weight:500;font-size:12px;line-height:12px;text-align:center;color:#646b75;outline:none;margin-right:20px;border:1px solid #b0b4b9}.chart_wrapper .heading_wrapper .button_group .percent.select{color:#fff;background-color:#646b75;border:1px solid #646b75}.chart_wrapper .heading_wrapper .link{font-family:\\"Montserrat\\";font-style:normal;font-weight:500;font-size:10px;line-height:14px;text-align:center;color:#58c1ae;background:#fff;border:1px solid #58c1ae;border-radius:11px;padding:0 5px 0 5px;width:70px}.chart_wrapper .heading_wrapper .link:hover{color:#58c1ae}.chart_wrapper .category{font-family:\\"Montserrat\\";font-style:normal;font-weight:600;font-size:12px;line-height:1.2;color:#2f3442;margin:0;padding:0}.chart_wrapper .text{display:flex;flex-direction:column;gap:5px}.chart_wrapper .text .headings{display:flex;flex-direction:row;gap:2vw}.chart_wrapper .text .headings p{font-family:\\"Montserrat\\";font-style:normal;font-weight:400;font-size:10px;line-height:12px;text-transform:uppercase;color:#979797}.chart_wrapper .text .headings .code{width:84px}.chart_wrapper .text .content{display:flex;flex-direction:row;gap:2vw}.chart_wrapper .text .content .name{width:210px;font-family:\\"Montserrat\\";font-style:normal;font-weight:400;font-size:12px;line-height:14px;color:#2f3442}.chart_wrapper .text .content .code{font-family:\\"Montserrat\\";font-style:normal;font-weight:400;font-size:12px;line-height:14px;color:#2f3442;width:84px}.chart_wrapper .text .view_codebook{margin:0 0 0 calc(84px + 2vw);font-family:\\"Montserrat\\";font-style:normal;font-weight:400;font-size:10px;line-height:12px;text-decoration-line:underline !important;text-transform:uppercase;color:#2f3442}.chart_wrapper .error_message{display:flex;flex-direction:column;align-items:flex-start;gap:8px;position:absolute;top:50%;left:50%;transform:translate(-50%, -50%);background:#ffd1d1;border-radius:12.5px;width:173px;padding:10px 10px 20px 10px;box-shadow:0px 4px 4px rgba(0,0,0,.25)}.chart_wrapper .error_message .top{display:flex;flex-direction:row;justify-content:space-between;width:100%}.chart_wrapper .error_message .top p{font-family:\\"Montserrat\\";font-style:normal;font-weight:400;font-size:18px;line-height:24px;color:#4a4a4a}.chart_wrapper .error_message .top .cancel{margin:5px 5px 0 0;cursor:pointer;width:12px;height:12px}.chart_wrapper .error_message .body{font-family:\\"Montserrat\\";font-style:normal;font-weight:300;font-size:12px;line-height:16px;width:153px;color:#4a4a4a}", ""]);\n// Exports\nmodule.exports = exports;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODQwNTAuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQSxrQ0FBa0MsbUJBQU8sQ0FBQyxLQUFzRDtBQUNoRztBQUNBO0FBQ0EseUNBQXlDLGtCQUFrQixnQ0FBZ0MsYUFBYSxtQkFBbUIsOEJBQThCLHVCQUF1QixnQkFBZ0IsbURBQW1ELDJCQUEyQixrQkFBa0IsZ0JBQWdCLGVBQWUsaUJBQWlCLGNBQWMsb0VBQW9FLGdCQUFnQixlQUFlLHlDQUF5QyxVQUFVLFNBQVMsMkJBQTJCLGtCQUFrQixnQkFBZ0IsZUFBZSxpQkFBaUIsY0FBYyxZQUFZLFlBQVksMkRBQTJELGVBQWUsdUNBQXVDLDJCQUEyQixrQkFBa0IsZ0JBQWdCLGVBQWUsaUJBQWlCLGNBQWMsNENBQTRDLGdCQUFnQixlQUFlLDhDQUE4QyxhQUFhLHFEQUFxRCx5QkFBeUIsWUFBWSxrQkFBa0IsY0FBYyxzREFBc0QsNEJBQTRCLHlCQUF5QiwyQkFBMkIsa0JBQWtCLGdCQUFnQixlQUFlLGlCQUFpQixrQkFBa0IsV0FBVyxhQUFhLHlCQUF5QiwrREFBK0QsY0FBYyxzQkFBc0IseUJBQXlCLHVEQUF1RCw0QkFBNEIsc0JBQXNCLDJCQUEyQixrQkFBa0IsZ0JBQWdCLGVBQWUsaUJBQWlCLGtCQUFrQixjQUFjLGFBQWEsa0JBQWtCLHlCQUF5Qiw4REFBOEQsV0FBVyx5QkFBeUIseUJBQXlCLHNDQUFzQywyQkFBMkIsa0JBQWtCLGdCQUFnQixlQUFlLGlCQUFpQixrQkFBa0IsY0FBYyxnQkFBZ0IseUJBQXlCLG1CQUFtQixvQkFBb0IsV0FBVyw0Q0FBNEMsY0FBYyx5QkFBeUIsMkJBQTJCLGtCQUFrQixnQkFBZ0IsZUFBZSxnQkFBZ0IsY0FBYyxTQUFTLFVBQVUscUJBQXFCLGFBQWEsc0JBQXNCLFFBQVEsK0JBQStCLGFBQWEsbUJBQW1CLFFBQVEsaUNBQWlDLDJCQUEyQixrQkFBa0IsZ0JBQWdCLGVBQWUsaUJBQWlCLHlCQUF5QixjQUFjLHFDQUFxQyxXQUFXLDhCQUE4QixhQUFhLG1CQUFtQixRQUFRLG9DQUFvQyxZQUFZLDJCQUEyQixrQkFBa0IsZ0JBQWdCLGVBQWUsaUJBQWlCLGNBQWMsb0NBQW9DLDJCQUEyQixrQkFBa0IsZ0JBQWdCLGVBQWUsaUJBQWlCLGNBQWMsV0FBVyxvQ0FBb0MsOEJBQThCLDJCQUEyQixrQkFBa0IsZ0JBQWdCLGVBQWUsaUJBQWlCLDBDQUEwQyx5QkFBeUIsY0FBYyw4QkFBOEIsYUFBYSxzQkFBc0IsdUJBQXVCLFFBQVEsa0JBQWtCLFFBQVEsU0FBUyxnQ0FBZ0MsbUJBQW1CLHFCQUFxQixZQUFZLDRCQUE0Qix1Q0FBdUMsbUNBQW1DLGFBQWEsbUJBQW1CLDhCQUE4QixXQUFXLHFDQUFxQywyQkFBMkIsa0JBQWtCLGdCQUFnQixlQUFlLGlCQUFpQixjQUFjLDJDQUEyQyxtQkFBbUIsZUFBZSxXQUFXLFlBQVksb0NBQW9DLDJCQUEyQixrQkFBa0IsZ0JBQWdCLGVBQWUsaUJBQWlCLFlBQVksY0FBYztBQUN0aUk7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL29jbF9iYl9saWJyYXJ5Ly4vc2Nzcy9jb21wb25lbnRzL2NoYXJ0L0NoYXJ0SGVhZGVyLnNjc3M/YmM3NiJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBJbXBvcnRzXG52YXIgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fID0gcmVxdWlyZShcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIik7XG5leHBvcnRzID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKGZhbHNlKTtcbi8vIE1vZHVsZVxuZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsIFwiLmNoYXJ0X3dyYXBwZXJ7cG9zaXRpb246cmVsYXRpdmV9LmNoYXJ0X3dyYXBwZXIgLmhlYWRpbmdfd3JhcHBlcntkaXNwbGF5OmZsZXg7ZmxleC1kaXJlY3Rpb246cm93O2p1c3RpZnktY29udGVudDpzcGFjZS1iZXR3ZWVuO2FsaWduLWl0ZW1zOmZsZXgtc3RhcnQ7cGFkZGluZzowIDAgMCAwfS5jaGFydF93cmFwcGVyIC5oZWFkaW5nX3dyYXBwZXIgLmhlYWRpbmdfYWx0ZXJuYXRle2ZvbnQtZmFtaWx5OlxcXCJNb250c2VycmF0XFxcIjtmb250LXN0eWxlOm5vcm1hbDtmb250LXdlaWdodDo0MDA7Zm9udC1zaXplOjEycHg7bGluZS1oZWlnaHQ6MTVweDtjb2xvcjojMmYzNDQyfS5jaGFydF93cmFwcGVyIC5oZWFkaW5nX3dyYXBwZXIgLmhlYWRpbmdfYWx0ZXJuYXRlIC5zZWNvbmRhcnlfdGl0bGV7Zm9udC13ZWlnaHQ6NjAwO2ZvbnQtc2l6ZToxMnB4fS5jaGFydF93cmFwcGVyIC5oZWFkaW5nX3dyYXBwZXIgLmhlYWRpbmd7cGFkZGluZzowO21hcmdpbjowO2ZvbnQtZmFtaWx5OlxcXCJNb250c2VycmF0XFxcIjtmb250LXN0eWxlOm5vcm1hbDtmb250LXdlaWdodDo2MDA7Zm9udC1zaXplOjEycHg7bGluZS1oZWlnaHQ6MTVweDtjb2xvcjojMmYzNDQyO2hlaWdodDozMnB4O3dpZHRoOjI2MXB4fS5jaGFydF93cmFwcGVyIC5oZWFkaW5nX3dyYXBwZXIgLmhlYWRpbmcgLmNvbWJpbmF0aW9uX3llYXJ7Zm9udC1zaXplOjEycHh9LmNoYXJ0X3dyYXBwZXIgLmhlYWRpbmdfd3JhcHBlciAudGl0bGV7Zm9udC1mYW1pbHk6XFxcIk1vbnRzZXJyYXRcXFwiO2ZvbnQtc3R5bGU6bm9ybWFsO2ZvbnQtd2VpZ2h0OjQwMDtmb250LXNpemU6MTJweDtsaW5lLWhlaWdodDoxNXB4O2NvbG9yOiMyZjM0NDJ9LmNoYXJ0X3dyYXBwZXIgLmhlYWRpbmdfd3JhcHBlciAudGl0bGUgc3Bhbntmb250LXdlaWdodDo2MDA7Zm9udC1zaXplOjEycHh9LmNoYXJ0X3dyYXBwZXIgLmhlYWRpbmdfd3JhcHBlciAuYnV0dG9uX2dyb3Vwe2Rpc3BsYXk6ZmxleH0uY2hhcnRfd3JhcHBlciAuaGVhZGluZ193cmFwcGVyIC5idXR0b25fZ3JvdXAgYnV0dG9ue2JvcmRlcjoxcHggc29saWQgI2IwYjRiOTtoZWlnaHQ6MTVweDt0ZXh0LWFsaWduOmNlbnRlcjtwYWRkaW5nOjAgOXB4fS5jaGFydF93cmFwcGVyIC5oZWFkaW5nX3dyYXBwZXIgLmJ1dHRvbl9ncm91cCAubnVtYmVye2JvcmRlci1yYWRpdXM6MTFweCAwIDAgMTFweDtiYWNrZ3JvdW5kLWNvbG9yOiM2NDZiNzU7Zm9udC1mYW1pbHk6XFxcIk1vbnRzZXJyYXRcXFwiO2ZvbnQtc3R5bGU6bm9ybWFsO2ZvbnQtd2VpZ2h0OjUwMDtmb250LXNpemU6MTJweDtsaW5lLWhlaWdodDoxNHB4O3RleHQtYWxpZ246Y2VudGVyO2NvbG9yOiNmZmY7b3V0bGluZTpub25lO2JvcmRlcjoxcHggc29saWQgIzY0NmI3NX0uY2hhcnRfd3JhcHBlciAuaGVhZGluZ193cmFwcGVyIC5idXR0b25fZ3JvdXAgLm51bWJlci5kZXNlbGVjdHtjb2xvcjojNjQ2Yjc1O2JhY2tncm91bmQtY29sb3I6I2ZmZjtib3JkZXI6MXB4IHNvbGlkICNiMGI0Yjl9LmNoYXJ0X3dyYXBwZXIgLmhlYWRpbmdfd3JhcHBlciAuYnV0dG9uX2dyb3VwIC5wZXJjZW50e2JvcmRlci1yYWRpdXM6MCAxMXB4IDExcHggMDtiYWNrZ3JvdW5kLWNvbG9yOiNmZmY7Zm9udC1mYW1pbHk6XFxcIk1vbnRzZXJyYXRcXFwiO2ZvbnQtc3R5bGU6bm9ybWFsO2ZvbnQtd2VpZ2h0OjUwMDtmb250LXNpemU6MTJweDtsaW5lLWhlaWdodDoxMnB4O3RleHQtYWxpZ246Y2VudGVyO2NvbG9yOiM2NDZiNzU7b3V0bGluZTpub25lO21hcmdpbi1yaWdodDoyMHB4O2JvcmRlcjoxcHggc29saWQgI2IwYjRiOX0uY2hhcnRfd3JhcHBlciAuaGVhZGluZ193cmFwcGVyIC5idXR0b25fZ3JvdXAgLnBlcmNlbnQuc2VsZWN0e2NvbG9yOiNmZmY7YmFja2dyb3VuZC1jb2xvcjojNjQ2Yjc1O2JvcmRlcjoxcHggc29saWQgIzY0NmI3NX0uY2hhcnRfd3JhcHBlciAuaGVhZGluZ193cmFwcGVyIC5saW5re2ZvbnQtZmFtaWx5OlxcXCJNb250c2VycmF0XFxcIjtmb250LXN0eWxlOm5vcm1hbDtmb250LXdlaWdodDo1MDA7Zm9udC1zaXplOjEwcHg7bGluZS1oZWlnaHQ6MTRweDt0ZXh0LWFsaWduOmNlbnRlcjtjb2xvcjojNThjMWFlO2JhY2tncm91bmQ6I2ZmZjtib3JkZXI6MXB4IHNvbGlkICM1OGMxYWU7Ym9yZGVyLXJhZGl1czoxMXB4O3BhZGRpbmc6MCA1cHggMCA1cHg7d2lkdGg6NzBweH0uY2hhcnRfd3JhcHBlciAuaGVhZGluZ193cmFwcGVyIC5saW5rOmhvdmVye2NvbG9yOiM1OGMxYWV9LmNoYXJ0X3dyYXBwZXIgLmNhdGVnb3J5e2ZvbnQtZmFtaWx5OlxcXCJNb250c2VycmF0XFxcIjtmb250LXN0eWxlOm5vcm1hbDtmb250LXdlaWdodDo2MDA7Zm9udC1zaXplOjEycHg7bGluZS1oZWlnaHQ6MS4yO2NvbG9yOiMyZjM0NDI7bWFyZ2luOjA7cGFkZGluZzowfS5jaGFydF93cmFwcGVyIC50ZXh0e2Rpc3BsYXk6ZmxleDtmbGV4LWRpcmVjdGlvbjpjb2x1bW47Z2FwOjVweH0uY2hhcnRfd3JhcHBlciAudGV4dCAuaGVhZGluZ3N7ZGlzcGxheTpmbGV4O2ZsZXgtZGlyZWN0aW9uOnJvdztnYXA6MnZ3fS5jaGFydF93cmFwcGVyIC50ZXh0IC5oZWFkaW5ncyBwe2ZvbnQtZmFtaWx5OlxcXCJNb250c2VycmF0XFxcIjtmb250LXN0eWxlOm5vcm1hbDtmb250LXdlaWdodDo0MDA7Zm9udC1zaXplOjEwcHg7bGluZS1oZWlnaHQ6MTJweDt0ZXh0LXRyYW5zZm9ybTp1cHBlcmNhc2U7Y29sb3I6Izk3OTc5N30uY2hhcnRfd3JhcHBlciAudGV4dCAuaGVhZGluZ3MgLmNvZGV7d2lkdGg6ODRweH0uY2hhcnRfd3JhcHBlciAudGV4dCAuY29udGVudHtkaXNwbGF5OmZsZXg7ZmxleC1kaXJlY3Rpb246cm93O2dhcDoydnd9LmNoYXJ0X3dyYXBwZXIgLnRleHQgLmNvbnRlbnQgLm5hbWV7d2lkdGg6MjEwcHg7Zm9udC1mYW1pbHk6XFxcIk1vbnRzZXJyYXRcXFwiO2ZvbnQtc3R5bGU6bm9ybWFsO2ZvbnQtd2VpZ2h0OjQwMDtmb250LXNpemU6MTJweDtsaW5lLWhlaWdodDoxNHB4O2NvbG9yOiMyZjM0NDJ9LmNoYXJ0X3dyYXBwZXIgLnRleHQgLmNvbnRlbnQgLmNvZGV7Zm9udC1mYW1pbHk6XFxcIk1vbnRzZXJyYXRcXFwiO2ZvbnQtc3R5bGU6bm9ybWFsO2ZvbnQtd2VpZ2h0OjQwMDtmb250LXNpemU6MTJweDtsaW5lLWhlaWdodDoxNHB4O2NvbG9yOiMyZjM0NDI7d2lkdGg6ODRweH0uY2hhcnRfd3JhcHBlciAudGV4dCAudmlld19jb2RlYm9va3ttYXJnaW46MCAwIDAgY2FsYyg4NHB4ICsgMnZ3KTtmb250LWZhbWlseTpcXFwiTW9udHNlcnJhdFxcXCI7Zm9udC1zdHlsZTpub3JtYWw7Zm9udC13ZWlnaHQ6NDAwO2ZvbnQtc2l6ZToxMHB4O2xpbmUtaGVpZ2h0OjEycHg7dGV4dC1kZWNvcmF0aW9uLWxpbmU6dW5kZXJsaW5lICFpbXBvcnRhbnQ7dGV4dC10cmFuc2Zvcm06dXBwZXJjYXNlO2NvbG9yOiMyZjM0NDJ9LmNoYXJ0X3dyYXBwZXIgLmVycm9yX21lc3NhZ2V7ZGlzcGxheTpmbGV4O2ZsZXgtZGlyZWN0aW9uOmNvbHVtbjthbGlnbi1pdGVtczpmbGV4LXN0YXJ0O2dhcDo4cHg7cG9zaXRpb246YWJzb2x1dGU7dG9wOjUwJTtsZWZ0OjUwJTt0cmFuc2Zvcm06dHJhbnNsYXRlKC01MCUsIC01MCUpO2JhY2tncm91bmQ6I2ZmZDFkMTtib3JkZXItcmFkaXVzOjEyLjVweDt3aWR0aDoxNzNweDtwYWRkaW5nOjEwcHggMTBweCAyMHB4IDEwcHg7Ym94LXNoYWRvdzowcHggNHB4IDRweCByZ2JhKDAsMCwwLC4yNSl9LmNoYXJ0X3dyYXBwZXIgLmVycm9yX21lc3NhZ2UgLnRvcHtkaXNwbGF5OmZsZXg7ZmxleC1kaXJlY3Rpb246cm93O2p1c3RpZnktY29udGVudDpzcGFjZS1iZXR3ZWVuO3dpZHRoOjEwMCV9LmNoYXJ0X3dyYXBwZXIgLmVycm9yX21lc3NhZ2UgLnRvcCBwe2ZvbnQtZmFtaWx5OlxcXCJNb250c2VycmF0XFxcIjtmb250LXN0eWxlOm5vcm1hbDtmb250LXdlaWdodDo0MDA7Zm9udC1zaXplOjE4cHg7bGluZS1oZWlnaHQ6MjRweDtjb2xvcjojNGE0YTRhfS5jaGFydF93cmFwcGVyIC5lcnJvcl9tZXNzYWdlIC50b3AgLmNhbmNlbHttYXJnaW46NXB4IDVweCAwIDA7Y3Vyc29yOnBvaW50ZXI7d2lkdGg6MTJweDtoZWlnaHQ6MTJweH0uY2hhcnRfd3JhcHBlciAuZXJyb3JfbWVzc2FnZSAuYm9keXtmb250LWZhbWlseTpcXFwiTW9udHNlcnJhdFxcXCI7Zm9udC1zdHlsZTpub3JtYWw7Zm9udC13ZWlnaHQ6MzAwO2ZvbnQtc2l6ZToxMnB4O2xpbmUtaGVpZ2h0OjE2cHg7d2lkdGg6MTUzcHg7Y29sb3I6IzRhNGE0YX1cIiwgXCJcIl0pO1xuLy8gRXhwb3J0c1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///84050\n')},46700:(Q,F,U)=>{var B={"./af":42786,"./af.js":42786,"./ar":30867,"./ar-dz":14130,"./ar-dz.js":14130,"./ar-kw":96135,"./ar-kw.js":96135,"./ar-ly":56440,"./ar-ly.js":56440,"./ar-ma":47702,"./ar-ma.js":47702,"./ar-sa":16040,"./ar-sa.js":16040,"./ar-tn":37100,"./ar-tn.js":37100,"./ar.js":30867,"./az":31083,"./az.js":31083,"./be":9808,"./be.js":9808,"./bg":68338,"./bg.js":68338,"./bm":67438,"./bm.js":67438,"./bn":8905,"./bn-bd":76225,"./bn-bd.js":76225,"./bn.js":8905,"./bo":11560,"./bo.js":11560,"./br":1278,"./br.js":1278,"./bs":80622,"./bs.js":80622,"./ca":2468,"./ca.js":2468,"./cs":5822,"./cs.js":5822,"./cv":50877,"./cv.js":50877,"./cy":47373,"./cy.js":47373,"./da":24780,"./da.js":24780,"./de":59740,"./de-at":60217,"./de-at.js":60217,"./de-ch":60894,"./de-ch.js":60894,"./de.js":59740,"./dv":5300,"./dv.js":5300,"./el":50837,"./el.js":50837,"./en-au":78348,"./en-au.js":78348,"./en-ca":77925,"./en-ca.js":77925,"./en-gb":22243,"./en-gb.js":22243,"./en-ie":46436,"./en-ie.js":46436,"./en-il":47207,"./en-il.js":47207,"./en-in":44175,"./en-in.js":44175,"./en-nz":76319,"./en-nz.js":76319,"./en-sg":31662,"./en-sg.js":31662,"./eo":92915,"./eo.js":92915,"./es":55655,"./es-do":55251,"./es-do.js":55251,"./es-mx":96112,"./es-mx.js":96112,"./es-us":71146,"./es-us.js":71146,"./es.js":55655,"./et":5603,"./et.js":5603,"./eu":77763,"./eu.js":77763,"./fa":76959,"./fa.js":76959,"./fi":11897,"./fi.js":11897,"./fil":42549,"./fil.js":42549,"./fo":94694,"./fo.js":94694,"./fr":94470,"./fr-ca":63049,"./fr-ca.js":63049,"./fr-ch":52330,"./fr-ch.js":52330,"./fr.js":94470,"./fy":5044,"./fy.js":5044,"./ga":29295,"./ga.js":29295,"./gd":2101,"./gd.js":2101,"./gl":38794,"./gl.js":38794,"./gom-deva":27884,"./gom-deva.js":27884,"./gom-latn":23168,"./gom-latn.js":23168,"./gu":95349,"./gu.js":95349,"./he":24206,"./he.js":24206,"./hi":30094,"./hi.js":30094,"./hr":30316,"./hr.js":30316,"./hu":22138,"./hu.js":22138,"./hy-am":11423,"./hy-am.js":11423,"./id":29218,"./id.js":29218,"./is":90135,"./is.js":90135,"./it":90626,"./it-ch":10150,"./it-ch.js":10150,"./it.js":90626,"./ja":39183,"./ja.js":39183,"./jv":24286,"./jv.js":24286,"./ka":12105,"./ka.js":12105,"./kk":47772,"./kk.js":47772,"./km":18758,"./km.js":18758,"./kn":79282,"./kn.js":79282,"./ko":33730,"./ko.js":33730,"./ku":1408,"./ku.js":1408,"./ky":33291,"./ky.js":33291,"./lb":36841,"./lb.js":36841,"./lo":55466,"./lo.js":55466,"./lt":57010,"./lt.js":57010,"./lv":37595,"./lv.js":37595,"./me":39861,"./me.js":39861,"./mi":35493,"./mi.js":35493,"./mk":95966,"./mk.js":95966,"./ml":87341,"./ml.js":87341,"./mn":5115,"./mn.js":5115,"./mr":10370,"./mr.js":10370,"./ms":9847,"./ms-my":41237,"./ms-my.js":41237,"./ms.js":9847,"./mt":72126,"./mt.js":72126,"./my":56165,"./my.js":56165,"./nb":64924,"./nb.js":64924,"./ne":16744,"./ne.js":16744,"./nl":93901,"./nl-be":59814,"./nl-be.js":59814,"./nl.js":93901,"./nn":83877,"./nn.js":83877,"./oc-lnc":92135,"./oc-lnc.js":92135,"./pa-in":15858,"./pa-in.js":15858,"./pl":64495,"./pl.js":64495,"./pt":89520,"./pt-br":57971,"./pt-br.js":57971,"./pt.js":89520,"./ro":96459,"./ro.js":96459,"./ru":21793,"./ru.js":21793,"./sd":40950,"./sd.js":40950,"./se":10490,"./se.js":10490,"./si":90124,"./si.js":90124,"./sk":64249,"./sk.js":64249,"./sl":14985,"./sl.js":14985,"./sq":51104,"./sq.js":51104,"./sr":49131,"./sr-cyrl":79915,"./sr-cyrl.js":79915,"./sr.js":49131,"./ss":85893,"./ss.js":85893,"./sv":98760,"./sv.js":98760,"./sw":91172,"./sw.js":91172,"./ta":27333,"./ta.js":27333,"./te":23110,"./te.js":23110,"./tet":52095,"./tet.js":52095,"./tg":27321,"./tg.js":27321,"./th":9041,"./th.js":9041,"./tk":19005,"./tk.js":19005,"./tl-ph":75768,"./tl-ph.js":75768,"./tlh":89444,"./tlh.js":89444,"./tr":72397,"./tr.js":72397,"./tzl":28254,"./tzl.js":28254,"./tzm":51106,"./tzm-latn":30699,"./tzm-latn.js":30699,"./tzm.js":51106,"./ug-cn":9288,"./ug-cn.js":9288,"./uk":67691,"./uk.js":67691,"./ur":13795,"./ur.js":13795,"./uz":6791,"./uz-latn":60588,"./uz-latn.js":60588,"./uz.js":6791,"./vi":65666,"./vi.js":65666,"./x-pseudo":14378,"./x-pseudo.js":14378,"./yo":75805,"./yo.js":75805,"./zh-cn":83839,"./zh-cn.js":83839,"./zh-hk":55726,"./zh-hk.js":55726,"./zh-mo":99807,"./zh-mo.js":99807,"./zh-tw":74152,"./zh-tw.js":74152};function e(Q){var F=l(Q);return U(F)}function l(Q){if(!U.o(B,Q)){var F=new Error("Cannot find module '"+Q+"'");throw F.code="MODULE_NOT_FOUND",F}return B[Q]}e.keys=function(){return Object.keys(B)},e.resolve=l,Q.exports=e,e.id=46700},44448:(__unused_webpack_module,__unused_webpack___webpack_exports__,__webpack_require__)=>{"use strict";eval('/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(93379);\n/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(7795);\n/* harmony import */ var _node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(90569);\n/* harmony import */ var _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(3565);\n/* harmony import */ var _node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var _node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(19216);\n/* harmony import */ var _node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var _node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(44589);\n/* harmony import */ var _node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var _node_modules_css_loader_dist_cjs_js_node_modules_sass_loader_dist_cjs_js_Subnav_scss__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(95280);\n/* harmony import */ var _node_modules_css_loader_dist_cjs_js_node_modules_sass_loader_dist_cjs_js_Subnav_scss__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_cjs_js_node_modules_sass_loader_dist_cjs_js_Subnav_scss__WEBPACK_IMPORTED_MODULE_6__);\n\n      \n      \n      \n      \n      \n      \n      \n      \n      \n\nvar options = {};\n\noptions.styleTagTransform = (_node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default());\noptions.setAttributes = (_node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default());\n\n      options.insert = _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default().bind(null, "head");\n    \noptions.domAPI = (_node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default());\noptions.insertStyleElement = (_node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default());\n\nvar update = _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default()((_node_modules_css_loader_dist_cjs_js_node_modules_sass_loader_dist_cjs_js_Subnav_scss__WEBPACK_IMPORTED_MODULE_6___default()), options);\n\n\n\n\n       /* unused harmony default export */ var __WEBPACK_DEFAULT_EXPORT__ = ((_node_modules_css_loader_dist_cjs_js_node_modules_sass_loader_dist_cjs_js_Subnav_scss__WEBPACK_IMPORTED_MODULE_6___default()) && (_node_modules_css_loader_dist_cjs_js_node_modules_sass_loader_dist_cjs_js_Subnav_scss__WEBPACK_IMPORTED_MODULE_6___default().locals) ? (_node_modules_css_loader_dist_cjs_js_node_modules_sass_loader_dist_cjs_js_Subnav_scss__WEBPACK_IMPORTED_MODULE_6___default().locals) : undefined);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDQ0NDguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7O0FBQ0EsTUFBa0c7QUFDbEcsTUFBd0Y7QUFDeEYsTUFBK0Y7QUFDL0YsTUFBa0g7QUFDbEgsTUFBMkc7QUFDM0csTUFBMkc7QUFDM0csTUFBbUo7QUFDbko7QUFDQTs7QUFFQTs7QUFFQSw0QkFBNEIscUdBQW1CO0FBQy9DLHdCQUF3QixrSEFBYTs7QUFFckMsdUJBQXVCLHVHQUFhO0FBQ3BDO0FBQ0EsaUJBQWlCLCtGQUFNO0FBQ3ZCLDZCQUE2QixzR0FBa0I7O0FBRS9DLGFBQWEsMEdBQUcsQ0FBQyw4SEFBTzs7OztBQUk2RjtBQUNySCxPQUFPLHNFQUFlLDhIQUFPLElBQUkscUlBQWMsR0FBRyxxSUFBYyxZQUFZLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9vY2xfYmJfbGlicmFyeS8uL3Njc3MvY29tcG9uZW50cy9TdWJuYXYuc2Nzcz9jMzkzIl0sInNvdXJjZXNDb250ZW50IjpbIlxuICAgICAgaW1wb3J0IEFQSSBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgaW1wb3J0IGRvbUFQSSBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0Rm4gZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzXCI7XG4gICAgICBpbXBvcnQgc2V0QXR0cmlidXRlcyBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydFN0eWxlRWxlbWVudCBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qc1wiO1xuICAgICAgaW1wb3J0IHN0eWxlVGFnVHJhbnNmb3JtRm4gZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qc1wiO1xuICAgICAgaW1wb3J0IGNvbnRlbnQsICogYXMgbmFtZWRFeHBvcnQgZnJvbSBcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vU3VibmF2LnNjc3NcIjtcbiAgICAgIFxuICAgICAgXG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0gPSBzdHlsZVRhZ1RyYW5zZm9ybUZuO1xub3B0aW9ucy5zZXRBdHRyaWJ1dGVzID0gc2V0QXR0cmlidXRlcztcblxuICAgICAgb3B0aW9ucy5pbnNlcnQgPSBpbnNlcnRGbi5iaW5kKG51bGwsIFwiaGVhZFwiKTtcbiAgICBcbm9wdGlvbnMuZG9tQVBJID0gZG9tQVBJO1xub3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7XG5cbnZhciB1cGRhdGUgPSBBUEkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgKiBmcm9tIFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi9TdWJuYXYuc2Nzc1wiO1xuICAgICAgIGV4cG9ydCBkZWZhdWx0IGNvbnRlbnQgJiYgY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHVuZGVmaW5lZDtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///44448\n')}}]);