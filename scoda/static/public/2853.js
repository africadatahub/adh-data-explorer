(self.webpackChunkocl_bb_library=self.webpackChunkocl_bb_library||[]).push([[2853],{9669:(module,__unused_webpack_exports,__webpack_require__)=>{eval("module.exports = __webpack_require__(51609);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTY2OS5qcyIsIm1hcHBpbmdzIjoiQUFBQSwyQ0FBdUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9vY2xfYmJfbGlicmFyeS8uL25vZGVfbW9kdWxlcy9heGlvcy9pbmRleC5qcz9iYzNhIl0sInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9saWIvYXhpb3MnKTsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///9669\n")},11741:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "Z": () => (/* binding */ Button)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(67294);\nfunction _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\nfunction _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nvar Button = /*#__PURE__*/function (_Component) {\n  _inherits(Button, _Component);\n  var _super = _createSuper(Button);\n  function Button() {\n    _classCallCheck(this, Button);\n    return _super.apply(this, arguments);\n  }\n  _createClass(Button, [{\n    key: "render",\n    value: function render() {\n      var imageBootstapStyleOverride = {\n        position: "relative",\n        top: "unset",\n        right: "unset"\n      };\n      var downloadLinkBootstapStyleOverride = {\n        display: "flex",\n        flexDirection: "row",\n        alignItems: "center",\n        gap: "12px"\n      };\n      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement("a", {\n        href: this.props.href,\n        target: this.props.target,\n        id: this.props.id,\n        onClick: this.props.onClick,\n        className: "btn " + this.props.className,\n        style: downloadLinkBootstapStyleOverride\n      }, this.props.text, this.props.icon, this.props.children, this.props.downloadBtn ? /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement("img", {\n        className: "subnav--cta---download_icon",\n        style: imageBootstapStyleOverride,\n        src: "/static/dist/img/icon_download.webp",\n        alt: "download_icon"\n      }) : "", "      ");\n    }\n  }]);\n  return Button;\n}(react__WEBPACK_IMPORTED_MODULE_0__.Component);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTE3NDEuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7O0FBQXlDO0FBQUEsSUFHcEJFLE1BQU07RUFBQTtFQUFBO0VBQUE7SUFBQTtJQUFBO0VBQUE7RUFBQTtJQUFBO0lBQUEsT0FFekIsa0JBQVM7TUFFUCxJQUFNQywwQkFBMEIsR0FBRztRQUNqQ0MsUUFBUSxFQUFFLFVBQVU7UUFDcEJDLEdBQUcsRUFBRSxPQUFPO1FBQ1pDLEtBQUssRUFBRTtNQUNULENBQUM7TUFFRCxJQUFNQyxpQ0FBaUMsR0FBRztRQUN4Q0MsT0FBTyxFQUFFLE1BQU07UUFDZkMsYUFBYSxFQUFFLEtBQUs7UUFDcEJDLFVBQVUsRUFBRSxRQUFRO1FBQ3BCQyxHQUFHLEVBQUU7TUFFUCxDQUFDO01BRUQsb0JBQ0U7UUFBRyxJQUFJLEVBQUUsSUFBSSxDQUFDQyxLQUFLLENBQUNDLElBQUs7UUFBQyxNQUFNLEVBQUUsSUFBSSxDQUFDRCxLQUFLLENBQUNFLE1BQU87UUFDbEQsRUFBRSxFQUFFLElBQUksQ0FBQ0YsS0FBSyxDQUFDRyxFQUFHO1FBQUMsT0FBTyxFQUFFLElBQUksQ0FBQ0gsS0FBSyxDQUFDSSxPQUFRO1FBQy9DLFNBQVMsRUFBRSxNQUFNLEdBQUcsSUFBSSxDQUFDSixLQUFLLENBQUNLLFNBQVU7UUFBQyxLQUFLLEVBQUVWO01BQWtDLEdBRWxGLElBQUksQ0FBQ0ssS0FBSyxDQUFDTSxJQUFJLEVBQUUsSUFBSSxDQUFDTixLQUFLLENBQUNPLElBQUksRUFBRSxJQUFJLENBQUNQLEtBQUssQ0FBQ1EsUUFBUSxFQUUzRCxJQUFJLENBQUNSLEtBQUssQ0FBQ1MsV0FBVyxnQkFDakI7UUFBSyxTQUFTLEVBQUMsNkJBQTZCO1FBQUMsS0FBSyxFQUFFbEIsMEJBQTJCO1FBQUMsR0FBRyxFQUFDLHFDQUFxQztRQUFDLEdBQUcsRUFBQztNQUFlLEVBQUcsR0FBQyxFQUFFLFdBQ2hKO0lBRVQ7RUFBQztFQUFBO0FBQUEsRUE3QmlDRiw0Q0FBUyIsInNvdXJjZXMiOlsid2VicGFjazovL29jbF9iYl9saWJyYXJ5Ly4vanMvY29tcG9uZW50cy9CdXR0b24uanN4PzgwYWQiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcclxuXHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBCdXR0b24gZXh0ZW5kcyBDb21wb25lbnQge1xyXG5cclxuICByZW5kZXIoKSB7XHJcblxyXG4gICAgY29uc3QgaW1hZ2VCb290c3RhcFN0eWxlT3ZlcnJpZGUgPSB7XHJcbiAgICAgIHBvc2l0aW9uOiBcInJlbGF0aXZlXCIsXHJcbiAgICAgIHRvcDogXCJ1bnNldFwiLFxyXG4gICAgICByaWdodDogXCJ1bnNldFwiXHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgZG93bmxvYWRMaW5rQm9vdHN0YXBTdHlsZU92ZXJyaWRlID0ge1xyXG4gICAgICBkaXNwbGF5OiBcImZsZXhcIixcclxuICAgICAgZmxleERpcmVjdGlvbjogXCJyb3dcIixcclxuICAgICAgYWxpZ25JdGVtczogXCJjZW50ZXJcIixcclxuICAgICAgZ2FwOiBcIjEycHhcIixcclxuICAgXHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIChcclxuICAgICAgPGEgaHJlZj17dGhpcy5wcm9wcy5ocmVmfSB0YXJnZXQ9e3RoaXMucHJvcHMudGFyZ2V0fVxyXG4gICAgICAgIGlkPXt0aGlzLnByb3BzLmlkfSBvbkNsaWNrPXt0aGlzLnByb3BzLm9uQ2xpY2t9XHJcbiAgICAgICAgY2xhc3NOYW1lPXtcImJ0biBcIiArIHRoaXMucHJvcHMuY2xhc3NOYW1lfSBzdHlsZT17ZG93bmxvYWRMaW5rQm9vdHN0YXBTdHlsZU92ZXJyaWRlfT5cclxuXHJcbiAgICAgICAge3RoaXMucHJvcHMudGV4dH17dGhpcy5wcm9wcy5pY29ufXt0aGlzLnByb3BzLmNoaWxkcmVufVxyXG5cclxuIHsgdGhpcy5wcm9wcy5kb3dubG9hZEJ0bj9cclxuICAgICAgICA8aW1nIGNsYXNzTmFtZT1cInN1Ym5hdi0tY3RhLS0tZG93bmxvYWRfaWNvblwiIHN0eWxlPXtpbWFnZUJvb3RzdGFwU3R5bGVPdmVycmlkZX0gc3JjPVwiL3N0YXRpYy9kaXN0L2ltZy9pY29uX2Rvd25sb2FkLndlYnBcIiBhbHQ9XCJkb3dubG9hZF9pY29uXCIgLz46XCJcIlxyXG59ICAgICAgPC9hPlxyXG4gICAgKVxyXG4gIH1cclxufSJdLCJuYW1lcyI6WyJSZWFjdCIsIkNvbXBvbmVudCIsIkJ1dHRvbiIsImltYWdlQm9vdHN0YXBTdHlsZU92ZXJyaWRlIiwicG9zaXRpb24iLCJ0b3AiLCJyaWdodCIsImRvd25sb2FkTGlua0Jvb3RzdGFwU3R5bGVPdmVycmlkZSIsImRpc3BsYXkiLCJmbGV4RGlyZWN0aW9uIiwiYWxpZ25JdGVtcyIsImdhcCIsInByb3BzIiwiaHJlZiIsInRhcmdldCIsImlkIiwib25DbGljayIsImNsYXNzTmFtZSIsInRleHQiLCJpY29uIiwiY2hpbGRyZW4iLCJkb3dubG9hZEJ0biJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///11741\n')},10269:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  "default": () => (/* binding */ Charts_dashboards)\n});\n\n// EXTERNAL MODULE: ./node_modules/react/index.js\nvar react = __webpack_require__(67294);\n// EXTERNAL MODULE: ./node_modules/react-select/dist/react-select.esm.js + 32 modules\nvar react_select_esm = __webpack_require__(9713);\n// EXTERNAL MODULE: ./js/components/Button.jsx\nvar Button = __webpack_require__(11741);\n;// CONCATENATED MODULE: ./js/components/Label.jsx\n\nvar Label = function Label(props) {\n  return /*#__PURE__*/react.createElement("label", {\n    id: props.id,\n    htmlFor: props["for"],\n    className: ["label "] + props.className,\n    onClick: props.onClick\n  }, props.text, props.children);\n};\n/* harmony default export */ const components_Label = (Label);\n;// CONCATENATED MODULE: ./js/components/Switch_text.jsx\nfunction _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\nfunction _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\n\nvar Switch_text = /*#__PURE__*/function (_Component) {\n  _inherits(Switch_text, _Component);\n  var _super = _createSuper(Switch_text);\n  function Switch_text() {\n    _classCallCheck(this, Switch_text);\n    return _super.apply(this, arguments);\n  }\n  _createClass(Switch_text, [{\n    key: "render",\n    value: function render() {\n      return /*#__PURE__*/react.createElement("div", {\n        className: "form-group switch_text"\n      }, this.props.title ? /*#__PURE__*/react.createElement(components_Label, {\n        className: "title",\n        text: this.props.title\n      }) : \'\', /*#__PURE__*/react.createElement("input", {\n        className: "form-control ",\n        id: "optionOne",\n        name: "type_id",\n        required: true,\n        type: "radio",\n        value: "1",\n        onChange: this.props.action,\n        checked: this.props.toggle\n      }), /*#__PURE__*/react.createElement(components_Label, {\n        className: "public btn option-one",\n        text: "Number",\n        "for": "optionOne"\n      }), /*#__PURE__*/react.createElement("input", {\n        className: "form-control",\n        id: "optionTwo",\n        name: "type_id",\n        required: true,\n        type: "radio",\n        value: "2",\n        onChange: this.props.action\n      }), /*#__PURE__*/react.createElement(components_Label, {\n        className: "private btn option-two",\n        text: "Percent",\n        "for": "optionTwo"\n      }));\n    }\n  }]);\n  return Switch_text;\n}(react.Component);\n\n;\n// EXTERNAL MODULE: ./node_modules/axios/index.js\nvar axios = __webpack_require__(9669);\nvar axios_default = /*#__PURE__*/__webpack_require__.n(axios);\n// EXTERNAL MODULE: ./node_modules/reactstrap/es/Modal.js + 1 modules\nvar Modal = __webpack_require__(85677);\n// EXTERNAL MODULE: ./node_modules/reactstrap/es/ModalBody.js\nvar ModalBody = __webpack_require__(10684);\n// EXTERNAL MODULE: ./node_modules/reactstrap/es/Spinner.js\nvar Spinner = __webpack_require__(36955);\n// EXTERNAL MODULE: ./node_modules/react-chartjs-2/es/index.js\nvar es = __webpack_require__(46799);\n;// CONCATENATED MODULE: ./js/components/ServiceDelivery/Charts.Service.Delivery.jsx\nfunction Charts_Service_Delivery_typeof(obj) { "@babel/helpers - typeof"; return Charts_Service_Delivery_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, Charts_Service_Delivery_typeof(obj); }\nfunction Charts_Service_Delivery_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction Charts_Service_Delivery_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\nfunction Charts_Service_Delivery_createClass(Constructor, protoProps, staticProps) { if (protoProps) Charts_Service_Delivery_defineProperties(Constructor.prototype, protoProps); if (staticProps) Charts_Service_Delivery_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\nfunction Charts_Service_Delivery_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) Charts_Service_Delivery_setPrototypeOf(subClass, superClass); }\nfunction Charts_Service_Delivery_setPrototypeOf(o, p) { Charts_Service_Delivery_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return Charts_Service_Delivery_setPrototypeOf(o, p); }\nfunction Charts_Service_Delivery_createSuper(Derived) { var hasNativeReflectConstruct = Charts_Service_Delivery_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = Charts_Service_Delivery_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = Charts_Service_Delivery_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return Charts_Service_Delivery_possibleConstructorReturn(this, result); }; }\nfunction Charts_Service_Delivery_possibleConstructorReturn(self, call) { if (call && (Charts_Service_Delivery_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return Charts_Service_Delivery_assertThisInitialized(self); }\nfunction Charts_Service_Delivery_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\nfunction Charts_Service_Delivery_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction Charts_Service_Delivery_getPrototypeOf(o) { Charts_Service_Delivery_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return Charts_Service_Delivery_getPrototypeOf(o); }\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\n\n\n\n\nvar a = true;\nvar years = [];\n\n//Units Receiving Free Basic Services data , static for now since it\'s still not part of codebook.\n// let fbs_data_2018 = [76201, 320406, 15848, 237330, 174687, 29658, 73593, 57250]\n\nvar fbs_data_2018 = [76201, 320406, 237330, 174687, 15848, 29658, 73593, 57250];\nvar fbs_2018_perc = [];\nvar fbs_2018_data = [];\nvar water_supply = [];\nvar basic_sani = [];\nvar access_to_elec = [];\nvar refuse_removal = [];\nvar numberOfHousehold = [];\nvar water_supply_data = [];\nvar water_supply_clean = [];\nvar final_water_supply = [];\nvar waterSupplyCollection = [];\nvar basic_sanitation_data = [];\nvar basic_sanitation_clean = [];\nvar final_basic_sanitation = [];\nvar basicSanitationCollection = [];\nvar access_to_elec_data = [];\nvar access_to_elec_clean = [];\nvar final_access_elec = [];\nvar accessElecCollection = [];\nvar refuse_removal_data = [];\nvar access_to_refuse_clean = [];\nvar refuseRemovalCollection = [];\nvar final_refuse_removal = [];\nvar number_of_households_data = [];\nvar number_of_households_clean = [];\nvar numOfHouseholdCollection = [];\nvar final_num_of_household = [];\n\n//chart declarations\nvar chartRef1, chartRef2, chartRef3, chartRef4, chartRef5, chartRef6;\n\n//City and year data\nvar sortedData = ["BUF", "CPT", "EKU", "ETH", "JHB", "MAN", "NMA", "TSH"];\n\n//Units Receiving Free Basic Services data , static for now since it\'s still not part of codebook.\n\nvar free_basic_services_2018 = fbs_data_2018;\nvar free_basic_services_clean_2018 = fbs_data_2018;\nvar myData = [];\n\n//Units Receiving Free Basic Services data , static for now since it\'s still not part of codebook.\n\nvar free_basic_services_sortedNumber2 = [];\nvar style = {\n  control: function control(base, state) {\n    return _objectSpread(_objectSpread({}, base), {}, {\n      border: \'1px solid #4A4A4A\',\n      borderRadius: \'28px\',\n      boxShadow: \'none\',\n      \'&:hover\': {\n        border: \'1px solid #4A4A4A\',\n        borderRadius: \'28px\'\n      }\n    });\n  }\n};\nvar Charts_dashboards = /*#__PURE__*/function (_Component) {\n  Charts_Service_Delivery_inherits(Charts_dashboards, _Component);\n  var _super = Charts_Service_Delivery_createSuper(Charts_dashboards);\n  function Charts_dashboards() {\n    var _this;\n    Charts_Service_Delivery_classCallCheck(this, Charts_dashboards);\n    _this = _super.call(this);\n    _this.state = {\n      stepSize: 200000,\n      isMulti: true,\n      toggle: true,\n      loader: false,\n      chartYears: 0,\n      noYears: [],\n      multiValue: [{\n        value: "BUF",\n        label: "Buffalo City"\n      }, {\n        value: "CPT",\n        label: "City of Cape Town"\n      }, {\n        value: "JHB",\n        label: "City of Joburg"\n      }, {\n        value: "EKU",\n        label: "Ekurhuleni"\n      }, {\n        value: "ETH",\n        label: "Ethekwini"\n      }, {\n        value: "MAN",\n        label: "Mangaung"\n      }, {\n        value: "NMA",\n        label: "Nelson Mandela Bay"\n      }, {\n        value: "TSH",\n        label: "Tshwane"\n      }],\n      filterOptions: [{\n        value: "BUF",\n        label: "Buffalo City"\n      }, {\n        value: "CPT",\n        label: "City of Cape Town"\n      }, {\n        value: "JHB",\n        label: "City of Joburg"\n      }, {\n        value: "EKU",\n        label: "Ekurhuleni"\n      }, {\n        value: "ETH",\n        label: "Ethekwini"\n      }, {\n        value: "MAN",\n        label: "Mangaung"\n      }, {\n        value: "NMA",\n        label: "Nelson Mandela Bay"\n      }, {\n        value: "TSH",\n        label: "Tshwane"\n      }]\n    };\n    _this.handleMultiChange = _this.handleMultiChange.bind(Charts_Service_Delivery_assertThisInitialized(_this));\n    _this.switchTrigger = _this.switchTrigger.bind(Charts_Service_Delivery_assertThisInitialized(_this));\n    return _this;\n  }\n  Charts_Service_Delivery_createClass(Charts_dashboards, [{\n    key: "componentDidMount",\n    value: function componentDidMount() {\n      this.getYears();\n      this.showLoader();\n      this.renderChart_percentage_of_household_with_basic_water_supply();\n      this.renderChart_percentage_of_households_with_access_to_basic_sanitation();\n      this.renderChart_percentage_of_households_with_access_to_electricity();\n      this.renderChart_percentage_households_with_weekly_municipal_refuse_removal();\n      this.renderChart_total_number_of_households_in_the_municipality();\n      this.renderChart_free_basic_services();\n      this.percentage_of_household_with_basic_water_supply();\n      this.percentage_of_households_with_access_to_basic_sanitation();\n      this.percentage_of_households_with_access_to_electricity();\n      this.percentage_households_with_weekly_municipal_refuse_removal();\n      this.total_number_of_households_in_the_municipality();\n    }\n  }, {\n    key: "componentDidUpdate",\n    value: function componentDidUpdate() {\n      this.renderChart_percentage_of_household_with_basic_water_supply();\n      this.renderChart_percentage_of_households_with_access_to_basic_sanitation();\n      this.renderChart_percentage_of_households_with_access_to_electricity();\n      this.renderChart_percentage_households_with_weekly_municipal_refuse_removal();\n      this.renderChart_total_number_of_households_in_the_municipality();\n      this.renderChart_free_basic_services();\n    }\n  }, {\n    key: "showLoader",\n    value: function showLoader() {\n      this.setState({\n        loader: true\n      });\n    }\n  }, {\n    key: "hideLoader",\n    value: function hideLoader() {\n      this.setState({\n        loader: false\n      });\n    }\n  }, {\n    key: "activate",\n    value: function activate() {\n      document.getElementById(\'optionTwo\').click();\n      document.getElementById(\'optionOne\').click();\n    }\n    //API\n  }, {\n    key: "getYears",\n    value: function getYears() {\n      var _this2 = this;\n      axios_default().get("/api/explore/codebook?indicator_id=392").then(function (res) {\n        _this2.setState({\n          noYears: res.data.years\n        });\n        _this2.state.noYears.shift();\n        _this2.state.noYears.sort();\n        years = _this2.state.noYears;\n      });\n    }\n  }, {\n    key: "percentage_of_household_with_basic_water_supply",\n    value: function percentage_of_household_with_basic_water_supply() {\n      var _this3 = this;\n      axios_default().get("/api/explore/codebook?indicator_id=392").then(function (res) {\n        _this3.getYears();\n        var toNum = new Object();\n        var years = parseInt(res.data.years[1]);\n        var startingYear = parseInt(res.data.years.slice(-1)[0]);\n        var count = 0;\n        var jhb;\n        var ekh;\n        var man;\n        var nmb;\n        var tsh;\n        var etk;\n        _this3.setState({\n          chartYears: res.data.years\n        });\n        for (var i = 0; i < res.data.years.length; i++) {\n          for (var k = 0; k < 1; k++) {\n            if (i === 0) {} else {\n              toNum[2014 + i] = i;\n            }\n          }\n        }\n        for (var year = startingYear; year < years + 1; year++) {\n          var citydata = [];\n          for (var _i = 0; _i < sortedData.length; _i++) {\n            var index = _i * 4 + toNum[year];\n            citydata.push(res.data.table[index].slice(2, 3)[0]);\n          }\n\n          //sorting data since its not populated aphabetically in the API.\n          jhb = citydata[2];\n          ekh = citydata[3];\n          man = citydata[4];\n          nmb = citydata[5];\n          tsh = citydata[6];\n          etk = citydata[7];\n          //re-assigning it correctly.\n          citydata[4] = jhb;\n          citydata[2] = ekh;\n          citydata[5] = man;\n          citydata[6] = nmb;\n          citydata[7] = tsh;\n          citydata[3] = etk;\n          waterSupplyCollection.push(citydata);\n          water_supply.push(waterSupplyCollection[count]);\n          water_supply_clean.push(water_supply);\n          count++;\n        }\n        final_water_supply = water_supply_clean[0];\n        //end\n        _this3.activate();\n      });\n    }\n  }, {\n    key: "percentage_of_households_with_access_to_basic_sanitation",\n    value: function percentage_of_households_with_access_to_basic_sanitation() {\n      var _this4 = this;\n      axios_default().get("/api/explore/codebook?indicator_id=384").then(function (res) {\n        var toNum = new Object();\n        var years = parseInt(res.data.years[1]);\n        var startingYear = parseInt(res.data.years.slice(-1)[0]);\n        var count = 0;\n        var jhb;\n        var ekh;\n        var man;\n        var nmb;\n        var tsh;\n        var etk;\n        for (var i = 0; i < res.data.years.length; i++) {\n          for (var k = 0; k < 1; k++) {\n            if (i === 0) {} else {\n              toNum[2014 + i] = i;\n            }\n          }\n        }\n        for (var year = startingYear; year < years + 1; year++) {\n          var citydata = [];\n          for (var _i2 = 0; _i2 < sortedData.length; _i2++) {\n            var index = _i2 * 4 + toNum[year];\n            citydata.push(res.data.table[index].slice(2, 3)[0]);\n          }\n\n          //sorting data since its not populated aphabetically in the API.\n          jhb = citydata[2];\n          ekh = citydata[3];\n          man = citydata[4];\n          nmb = citydata[5];\n          tsh = citydata[6];\n          etk = citydata[7];\n          //re-assigning it correctly.\n          citydata[4] = jhb;\n          citydata[2] = ekh;\n          citydata[5] = man;\n          citydata[6] = nmb;\n          citydata[7] = tsh;\n          citydata[3] = etk;\n          basicSanitationCollection.push(citydata);\n          basic_sani.push(basicSanitationCollection[count]);\n          basic_sanitation_clean.push(basic_sani);\n          count++;\n        }\n        final_basic_sanitation = basic_sanitation_clean[0];\n\n        //end\n        _this4.activate();\n      });\n    }\n  }, {\n    key: "percentage_of_households_with_access_to_electricity",\n    value: function percentage_of_households_with_access_to_electricity() {\n      var _this5 = this;\n      axios_default().get("/api/explore/codebook?indicator_id=10").then(function (res) {\n        var toNum = new Object();\n        var years = parseInt(res.data.years[1]);\n        var startingYear = parseInt(res.data.years.slice(-1)[0]);\n        var count = 0;\n        var jhb;\n        var ekh;\n        var man;\n        var nmb;\n        var tsh;\n        var etk;\n        for (var i = 0; i < res.data.years.length; i++) {\n          for (var k = 0; k < 1; k++) {\n            if (i === 0) {} else {\n              toNum[2014 + i] = i;\n            }\n          }\n        }\n        for (var year = startingYear; year < years + 1; year++) {\n          var citydata = [];\n          for (var _i3 = 0; _i3 < sortedData.length; _i3++) {\n            var index = _i3 * 4 + toNum[year];\n            citydata.push(res.data.table[index].slice(2, 3)[0]);\n          }\n\n          //sorting data since its not populated aphabetically in the API.\n          jhb = citydata[2];\n          ekh = citydata[3];\n          man = citydata[4];\n          nmb = citydata[5];\n          tsh = citydata[6];\n          etk = citydata[7];\n          //re-assigning it correctly.\n          citydata[4] = jhb;\n          citydata[2] = ekh;\n          citydata[5] = man;\n          citydata[6] = nmb;\n          citydata[7] = tsh;\n          citydata[3] = etk;\n          accessElecCollection.push(citydata);\n          access_to_elec.push(accessElecCollection[count]);\n          access_to_elec_clean.push(access_to_elec);\n          count++;\n        }\n        final_access_elec = access_to_elec_clean[0];\n\n        //end\n        _this5.activate();\n      });\n    }\n  }, {\n    key: "percentage_households_with_weekly_municipal_refuse_removal",\n    value: function percentage_households_with_weekly_municipal_refuse_removal() {\n      var _this6 = this;\n      axios_default().get("/api/explore/codebook?indicator_id=1114").then(function (res) {\n        var toNum = new Object();\n        var years = parseInt(res.data.years[1]);\n        var startingYear = parseInt(res.data.years.slice(-1)[0]);\n        var count = 0;\n        var jhb;\n        var ekh;\n        var man;\n        var nmb;\n        var tsh;\n        var etk;\n        for (var i = 0; i < res.data.years.length; i++) {\n          for (var k = 0; k < 1; k++) {\n            if (i === 0) {} else {\n              toNum[2014 + i] = i;\n            }\n          }\n        }\n        for (var year = startingYear; year < years + 1; year++) {\n          var citydata = [];\n          for (var _i4 = 0; _i4 < sortedData.length; _i4++) {\n            var index = _i4 * 4 + toNum[year];\n            citydata.push(res.data.table[index].slice(2, 3)[0]);\n          }\n\n          //sorting data since its not populated aphabetically in the API.\n          jhb = citydata[2];\n          ekh = citydata[3];\n          man = citydata[4];\n          nmb = citydata[5];\n          tsh = citydata[6];\n          etk = citydata[7];\n          //re-assigning it correctly.\n          citydata[4] = jhb;\n          citydata[2] = ekh;\n          citydata[5] = man;\n          citydata[6] = nmb;\n          citydata[7] = tsh;\n          citydata[3] = etk;\n          refuseRemovalCollection.push(citydata);\n          refuse_removal.push(refuseRemovalCollection[count]);\n          access_to_refuse_clean.push(refuse_removal);\n          count++;\n        }\n        final_refuse_removal = access_to_refuse_clean[0];\n        //end\n        _this6.activate();\n      });\n    }\n  }, {\n    key: "total_number_of_households_in_the_municipality",\n    value: function total_number_of_households_in_the_municipality() {\n      var _this7 = this;\n      axios_default().get("/api/explore/codebook?indicator_id=12").then(function (res) {\n        var toNum = new Object();\n        var years = parseInt(res.data.years[1]);\n        var startingYear = parseInt(res.data.years.slice(-1)[0]);\n        var count = 0;\n        var jhb;\n        var ekh;\n        var man;\n        var nmb;\n        var tsh;\n        var etk;\n        for (var i = 0; i < res.data.years.length; i++) {\n          for (var k = 0; k < 1; k++) {\n            if (i === 0) {} else {\n              toNum[2014 + i] = i;\n            }\n          }\n        }\n        for (var year = startingYear; year < years + 1; year++) {\n          var citydata = [];\n          for (var _i5 = 0; _i5 < sortedData.length; _i5++) {\n            var index = _i5 * 4 + toNum[year];\n            citydata.push(res.data.table[index].slice(2, 3)[0]);\n          }\n\n          //sorting data since its not populated aphabetically in the API.\n          jhb = citydata[2];\n          ekh = citydata[3];\n          man = citydata[4];\n          nmb = citydata[5];\n          tsh = citydata[6];\n          etk = citydata[7];\n          //re-assigning it correctly.\n          citydata[4] = jhb;\n          citydata[2] = ekh;\n          citydata[5] = man;\n          citydata[6] = nmb;\n          citydata[7] = tsh;\n          citydata[3] = etk;\n          numOfHouseholdCollection.push(citydata);\n          numberOfHousehold.push(numOfHouseholdCollection[count]);\n          number_of_households_clean.push(numberOfHousehold);\n          count++;\n        }\n        final_num_of_household = number_of_households_clean[0];\n        //end\n        _this7.activate();\n        _this7.hideLoader();\n      });\n    }\n  }, {\n    key: "switchTrigger",\n    value: function switchTrigger() {\n      console.log(\'-----------------\', final_num_of_household[3]);\n      this.setState({\n        toggle: !this.state.toggle\n      });\n      if (!this.state.toggle) {\n        a = false;\n        fbs_2018_data = free_basic_services_clean_2018;\n        this.setState({\n          stepSize: 200000\n        });\n      } else {\n        a = true;\n        for (var i = 0; i < free_basic_services_clean_2018.length; i++) {\n          fbs_2018_perc[i] = free_basic_services_clean_2018[i] / final_num_of_household[3][i] * 100;\n          fbs_2018_data = fbs_2018_perc;\n          var max = 0;\n          max = Math.max(fbs_2018_perc);\n          if (max > 50) {\n            this.setState({\n              stepSize: 50\n            });\n          } else {\n            this.setState({\n              stepSize: 25\n            });\n          }\n        }\n      }\n    }\n  }, {\n    key: "handleMultiChange",\n    value: function handleMultiChange(option) {\n      this.setState({\n        multiValue: option\n      });\n      water_supply_data = [];\n      basic_sanitation_data = [];\n      access_to_elec_data = [];\n      refuse_removal_data = [];\n      number_of_households_data = [];\n      fbs_2018_perc = [];\n      fbs_2018_data = [];\n      var cYears = this.state.chartYears;\n      for (var item = 0; item < cYears.length - 1; item++) {\n        water_supply_data.push([]);\n        basic_sanitation_data.push([]);\n        access_to_elec_data.push([]);\n        refuse_removal_data.push([]);\n        number_of_households_data.push([]);\n      }\n\n      //Empty array so new data can be assigned\n\n      free_basic_services_sortedNumber2 = [];\n      myData = [];\n\n      //new \n      final_water_supply = [];\n      final_basic_sanitation = [];\n      final_access_elec = [];\n      final_refuse_removal = [];\n      final_num_of_household = [];\n      free_basic_services_clean_2018 = [];\n      option.map(function (item, i) {\n        myData.push(item.value);\n        sortedData = myData.sort();\n        if (sortedData.includes(\'BUF\')) {\n          //water_supply_data[year][index]  waterSupplyCollection[year][index]\n          for (var index = 0; index < cYears.length - 1; index++) {\n            water_supply_data[index][0] = waterSupplyCollection[index][0];\n            basic_sanitation_data[index][0] = basicSanitationCollection[index][0];\n            access_to_elec_data[index][0] = accessElecCollection[index][0];\n            refuse_removal_data[index][0] = refuseRemovalCollection[index][0];\n            number_of_households_data[index][0] = numOfHouseholdCollection[index][0];\n          }\n          free_basic_services_sortedNumber2[0] = free_basic_services_2018[0];\n        }\n        if (sortedData.includes(\'CPT\')) {\n          for (var _index = 0; _index < cYears.length - 1; _index++) {\n            water_supply_data[_index][1] = waterSupplyCollection[_index][1];\n            basic_sanitation_data[_index][1] = basicSanitationCollection[_index][1];\n            access_to_elec_data[_index][1] = accessElecCollection[_index][1];\n            refuse_removal_data[_index][1] = refuseRemovalCollection[_index][1];\n            number_of_households_data[_index][1] = numOfHouseholdCollection[_index][1];\n          }\n          free_basic_services_sortedNumber2[1] = free_basic_services_2018[1];\n        }\n        if (sortedData.includes(\'EKU\')) {\n          for (var _index2 = 0; _index2 < cYears.length - 1; _index2++) {\n            water_supply_data[_index2][2] = waterSupplyCollection[_index2][2];\n            basic_sanitation_data[_index2][2] = basicSanitationCollection[_index2][2];\n            access_to_elec_data[_index2][2] = accessElecCollection[_index2][2];\n            refuse_removal_data[_index2][2] = refuseRemovalCollection[_index2][2];\n            number_of_households_data[_index2][2] = numOfHouseholdCollection[_index2][2];\n          }\n          free_basic_services_sortedNumber2[2] = free_basic_services_2018[2];\n        }\n        if (sortedData.includes(\'ETH\')) {\n          for (var _index3 = 0; _index3 < cYears.length - 1; _index3++) {\n            water_supply_data[_index3][3] = waterSupplyCollection[_index3][3];\n            basic_sanitation_data[_index3][3] = basicSanitationCollection[_index3][3];\n            access_to_elec_data[_index3][3] = accessElecCollection[_index3][3];\n            refuse_removal_data[_index3][3] = refuseRemovalCollection[_index3][3];\n            number_of_households_data[_index3][3] = numOfHouseholdCollection[_index3][3];\n          }\n          free_basic_services_sortedNumber2[3] = free_basic_services_2018[3];\n        }\n        if (sortedData.includes(\'JHB\')) {\n          for (var _index4 = 0; _index4 < cYears.length - 1; _index4++) {\n            water_supply_data[_index4][4] = waterSupplyCollection[_index4][4];\n            basic_sanitation_data[_index4][4] = basicSanitationCollection[_index4][4];\n            access_to_elec_data[_index4][4] = accessElecCollection[_index4][4];\n            refuse_removal_data[_index4][4] = refuseRemovalCollection[_index4][4];\n            number_of_households_data[_index4][4] = numOfHouseholdCollection[_index4][4];\n          }\n          free_basic_services_sortedNumber2[4] = free_basic_services_2018[4];\n        }\n        if (sortedData.includes(\'MAN\')) {\n          for (var _index5 = 0; _index5 < cYears.length - 1; _index5++) {\n            water_supply_data[_index5][5] = waterSupplyCollection[_index5][5];\n            basic_sanitation_data[_index5][5] = basicSanitationCollection[_index5][5];\n            access_to_elec_data[_index5][5] = accessElecCollection[_index5][5];\n            refuse_removal_data[_index5][5] = refuseRemovalCollection[_index5][5];\n            number_of_households_data[_index5][5] = numOfHouseholdCollection[_index5][5];\n          }\n          free_basic_services_sortedNumber2[5] = free_basic_services_2018[5];\n        }\n        if (sortedData.includes(\'NMA\')) {\n          for (var _index6 = 0; _index6 < cYears.length - 1; _index6++) {\n            water_supply_data[_index6][6] = waterSupplyCollection[_index6][6];\n            basic_sanitation_data[_index6][6] = basicSanitationCollection[_index6][6];\n            access_to_elec_data[_index6][6] = accessElecCollection[_index6][6];\n            refuse_removal_data[_index6][6] = refuseRemovalCollection[_index6][6];\n            number_of_households_data[_index6][6] = numOfHouseholdCollection[_index6][6];\n          }\n          free_basic_services_sortedNumber2[6] = free_basic_services_2018[6];\n        }\n        if (sortedData.includes(\'TSH\')) {\n          for (var _index7 = 0; _index7 < cYears.length - 1; _index7++) {\n            water_supply_data[_index7][7] = waterSupplyCollection[_index7][7];\n            basic_sanitation_data[_index7][7] = basicSanitationCollection[_index7][7];\n            access_to_elec_data[_index7][7] = accessElecCollection[_index7][7];\n            refuse_removal_data[_index7][7] = refuseRemovalCollection[_index7][7];\n            number_of_households_data[_index7][7] = numOfHouseholdCollection[_index7][7];\n          }\n          free_basic_services_sortedNumber2[7] = free_basic_services_2018[7];\n        }\n        for (var _index8 = 0; _index8 < cYears.length - 1; _index8++) {\n          final_water_supply[_index8] = water_supply_data[_index8].filter(Boolean);\n          final_basic_sanitation[_index8] = basic_sanitation_data[_index8].filter(Boolean);\n          final_access_elec[_index8] = access_to_elec_data[_index8].filter(Boolean);\n          final_refuse_removal[_index8] = refuse_removal_data[_index8].filter(Boolean);\n          final_num_of_household[_index8] = number_of_households_data[_index8].filter(Boolean);\n        }\n        free_basic_services_clean_2018 = free_basic_services_sortedNumber2.filter(Boolean);\n        fbs_2018_data = free_basic_services_clean_2018;\n        document.getElementById(\'optionOne\').click();\n      });\n    }\n  }, {\n    key: "renderChart_percentage_of_household_with_basic_water_supply",\n    value: function renderChart_percentage_of_household_with_basic_water_supply() {\n      var color = \'#d6d6d6\';\n      var data = {\n        labels: sortedData,\n        datasets: []\n      };\n      years.forEach(function (a, i) {\n        switch (i) {\n          case 0:\n            color = \'#D0D1E6\';\n            break;\n          case 1:\n            color = \'#74A9CF\';\n            break;\n          case 2:\n            color = \'#0570B0\';\n            break;\n          case 3:\n            color = \'#023858\';\n            break;\n          default:\n            color = \'#d6d6d6\';\n        }\n        data.datasets.push({\n          label: a,\n          stack: \'Stack \' + i,\n          data: final_water_supply[i],\n          backgroundColor: color,\n          borderColor: color\n        });\n      });\n      if (chartRef1) {\n        chartRef1.destroy();\n      }\n      var ctx = document.getElementById(\'mc\').getContext(\'2d\');\n      chartRef1 = new Chart(ctx, {\n        type: \'bar\',\n        data: data,\n        options: {\n          legend: {\n            labels: {\n              fontColor: "#4A4A4A",\n              fontSize: 8,\n              fontFamily: "Montserrat"\n            }\n          },\n          title: {\n            display: false,\n            text: \'Title\',\n            fontFamily: "Montserrat"\n          },\n          tooltips: {\n            mode: \'index\',\n            intercept: false,\n            callbacks: {\n              label: function label(tooltipItem, data) {\n                var label = data.datasets[tooltipItem.datasetIndex].label || \'\';\n                if (label) {\n                  label += \': \';\n                }\n                label += Math.round(tooltipItem.yLabel * 100) / 100;\n                return label;\n              }\n            }\n          },\n          responsive: true,\n          scales: {\n            xAxes: [{\n              stacked: true,\n              ticks: {\n                fontStyle: \'bold\',\n                steps: 4,\n                fontFamily: "Montserrat"\n              },\n              gridLines: {\n                display: false\n              }\n            }],\n            yAxes: [{\n              stacked: true,\n              ticks: {\n                stepSize: 25,\n                callback: function callback(value, index, values) {\n                  return Math.round(value * 100) / 100 + \'  \';\n                }\n              },\n              gridLines: {\n                drawTicks: false\n              },\n              scaleLabel: {\n                display: true,\n                labelString: "Percent of Households",\n                fontStyle: \'bold\',\n                fontFamily: "Montserrat",\n                fontSize: 12\n              }\n            }]\n          }\n        }\n      });\n    }\n  }, {\n    key: "renderChart_percentage_of_households_with_access_to_basic_sanitation",\n    value: function renderChart_percentage_of_households_with_access_to_basic_sanitation() {\n      var color = \'#d6d6d6\';\n      var data = {\n        labels: sortedData,\n        datasets: []\n      };\n      years.forEach(function (a, i) {\n        switch (i) {\n          case 0:\n            color = \'#D0D1E6\';\n            break;\n          case 1:\n            color = \'#74A9CF\';\n            break;\n          case 2:\n            color = \'#0570B0\';\n            break;\n          case 3:\n            color = \'#023858\';\n            break;\n          default:\n            color = \'#d6d6d6\';\n        }\n        data.datasets.push({\n          label: a,\n          stack: \'Stack \' + i,\n          data: final_basic_sanitation[i],\n          backgroundColor: color,\n          borderColor: color\n        });\n      });\n      if (chartRef2) {\n        chartRef2.destroy();\n      }\n      var ctx = document.getElementById(\'mc1\').getContext(\'2d\');\n      chartRef2 = new Chart(ctx, {\n        type: \'bar\',\n        data: data,\n        options: {\n          legend: {\n            labels: {\n              fontColor: "#4A4A4A",\n              fontSize: 8,\n              fontFamily: "Montserrat"\n            }\n          },\n          title: {\n            display: false,\n            text: \'Title\',\n            fontFamily: "Montserrat"\n          },\n          tooltips: {\n            mode: \'index\',\n            intercept: false,\n            callbacks: {\n              label: function label(tooltipItem, data) {\n                var label = data.datasets[tooltipItem.datasetIndex].label || \'\';\n                if (label) {\n                  label += \': \';\n                }\n                label += Math.round(tooltipItem.yLabel * 100) / 100;\n                return label;\n              }\n            }\n          },\n          responsive: true,\n          scales: {\n            xAxes: [{\n              stacked: true,\n              ticks: {\n                fontStyle: \'bold\',\n                fontFamily: "Montserrat"\n              },\n              gridLines: {\n                display: false\n              }\n            }],\n            yAxes: [{\n              stacked: true,\n              ticks: {\n                stepSize: 25,\n                callback: function callback(value, index, values) {\n                  return Math.round(value * 100) / 100 + \'  \';\n                }\n              },\n              gridLines: {\n                drawTicks: false\n              },\n              scaleLabel: {\n                display: true,\n                labelString: "Percent of Households",\n                fontStyle: \'bold\',\n                fontFamily: "Montserrat",\n                fontSize: 12\n              }\n            }]\n          }\n        }\n      });\n    }\n  }, {\n    key: "renderChart_percentage_of_households_with_access_to_electricity",\n    value: function renderChart_percentage_of_households_with_access_to_electricity() {\n      var color = \'#d6d6d6\';\n      var data = {\n        labels: sortedData,\n        datasets: []\n      };\n      years.forEach(function (a, i) {\n        switch (i) {\n          case 0:\n            color = \'#D0D1E6\';\n            break;\n          case 1:\n            color = \'#74A9CF\';\n            break;\n          case 2:\n            color = \'#0570B0\';\n            break;\n          case 3:\n            color = \'#023858\';\n            break;\n          default:\n            color = \'#d6d6d6\';\n        }\n        data.datasets.push({\n          label: a,\n          stack: \'Stack \' + i,\n          data: final_access_elec[i],\n          backgroundColor: color,\n          borderColor: color\n        });\n      });\n      if (chartRef3) {\n        chartRef3.destroy();\n      }\n      var ctx = document.getElementById(\'mc2\').getContext(\'2d\');\n      chartRef3 = new Chart(ctx, {\n        type: \'bar\',\n        data: data,\n        options: {\n          legend: {\n            labels: {\n              fontColor: "#4A4A4A",\n              fontSize: 8,\n              fontFamily: "Montserrat"\n            }\n          },\n          title: {\n            display: false,\n            text: \'Title\',\n            fontFamily: "Montserrat"\n          },\n          tooltips: {\n            mode: \'index\',\n            intercept: false,\n            callbacks: {\n              label: function label(tooltipItem, data) {\n                var label = data.datasets[tooltipItem.datasetIndex].label || \'\';\n                if (label) {\n                  label += \': \';\n                }\n                label += Math.round(tooltipItem.yLabel * 100) / 100;\n                return label;\n              }\n            }\n          },\n          responsive: true,\n          scales: {\n            xAxes: [{\n              stacked: true,\n              ticks: {\n                fontStyle: \'bold\',\n                fontFamily: "Montserrat"\n              },\n              gridLines: {\n                display: false\n              }\n            }],\n            yAxes: [{\n              stacked: true,\n              ticks: {\n                stepSize: 25,\n                callback: function callback(value, index, values) {\n                  return Math.round(value * 100) / 100 + \'  \';\n                }\n              },\n              gridLines: {\n                drawTicks: false\n              },\n              scaleLabel: {\n                display: true,\n                labelString: "Percent of Households",\n                fontStyle: \'bold\',\n                fontFamily: "Montserrat",\n                fontSize: 12\n              }\n            }]\n          }\n        }\n      });\n    }\n  }, {\n    key: "renderChart_percentage_households_with_weekly_municipal_refuse_removal",\n    value: function renderChart_percentage_households_with_weekly_municipal_refuse_removal() {\n      var color = \'#d6d6d6\';\n      var data = {\n        labels: sortedData,\n        datasets: []\n      };\n      years.forEach(function (a, i) {\n        switch (i) {\n          case 0:\n            color = \'#D0D1E6\';\n            break;\n          case 1:\n            color = \'#74A9CF\';\n            break;\n          case 2:\n            color = \'#0570B0\';\n            break;\n          case 3:\n            color = \'#023858\';\n            break;\n          default:\n            color = \'#d6d6d6\';\n        }\n        data.datasets.push({\n          label: a,\n          stack: \'Stack \' + i,\n          data: final_refuse_removal[i],\n          backgroundColor: color,\n          borderColor: color\n        });\n      });\n      if (chartRef4) {\n        chartRef4.destroy();\n      }\n      var ctx = document.getElementById(\'mc3\').getContext(\'2d\');\n      chartRef4 = new Chart(ctx, {\n        type: \'bar\',\n        data: data,\n        options: {\n          legend: {\n            labels: {\n              fontColor: "#4A4A4A",\n              fontSize: 8,\n              fontFamily: "Montserrat"\n            }\n          },\n          title: {\n            display: false,\n            text: \'Title\',\n            fontFamily: "Montserrat"\n          },\n          tooltips: {\n            mode: \'index\',\n            intercept: false,\n            callbacks: {\n              label: function label(tooltipItem, data) {\n                var label = data.datasets[tooltipItem.datasetIndex].label || \'\';\n                if (label) {\n                  label += \': \';\n                }\n                label += Math.round(tooltipItem.yLabel * 100) / 100;\n                return label;\n              }\n            }\n          },\n          responsive: true,\n          scales: {\n            xAxes: [{\n              stacked: true,\n              ticks: {\n                fontStyle: \'bold\',\n                fontFamily: "Montserrat"\n              },\n              gridLines: {\n                display: false\n              }\n            }],\n            yAxes: [{\n              stacked: true,\n              ticks: {\n                stepSize: 25,\n                callback: function callback(value, index, values) {\n                  return Math.round(value * 100) / 100 + \'  \';\n                }\n              },\n              gridLines: {\n                drawTicks: false\n              },\n              scaleLabel: {\n                display: true,\n                labelString: "Percent of Households",\n                fontStyle: \'bold\',\n                fontFamily: "Montserrat",\n                fontSize: 12\n              }\n            }]\n          }\n        }\n      });\n    }\n  }, {\n    key: "renderChart_total_number_of_households_in_the_municipality",\n    value: function renderChart_total_number_of_households_in_the_municipality() {\n      var color = \'#d6d6d6\';\n      var data = {\n        labels: sortedData,\n        datasets: []\n      };\n      years.forEach(function (a, i) {\n        switch (i) {\n          case 0:\n            color = \'#D0D1E6\';\n            break;\n          case 1:\n            color = \'#74A9CF\';\n            break;\n          case 2:\n            color = \'#0570B0\';\n            break;\n          case 3:\n            color = \'#023858\';\n            break;\n          default:\n            color = \'#d6d6d6\';\n        }\n        data.datasets.push({\n          label: a,\n          stack: \'Stack \' + i,\n          data: final_num_of_household[i],\n          backgroundColor: color,\n          borderColor: color\n        });\n      });\n      if (chartRef5) {\n        chartRef5.destroy();\n      }\n      var ctx = document.getElementById(\'mc4\').getContext(\'2d\');\n      chartRef5 = new Chart(ctx, {\n        type: \'bar\',\n        data: data,\n        options: {\n          legend: {\n            labels: {\n              fontColor: "#4A4A4A",\n              fontSize: 8,\n              fontFamily: "Montserrat"\n            }\n          },\n          title: {\n            display: false,\n            text: \'Title\',\n            fontFamily: "Montserrat"\n          },\n          tooltips: {\n            mode: \'index\',\n            intercept: false,\n            callbacks: {\n              label: function label(tooltipItem, data) {\n                var label = data.datasets[tooltipItem.datasetIndex].label || \'\';\n                if (label) {\n                  label += \': \';\n                }\n                label += Math.round(tooltipItem.yLabel * 100) / 100;\n                return label;\n              }\n            }\n          },\n          responsive: true,\n          scales: {\n            xAxes: [{\n              stacked: true,\n              ticks: {\n                fontStyle: \'bold\',\n                fontFamily: "Montserrat"\n              },\n              gridLines: {\n                display: false\n              }\n            }],\n            yAxes: [{\n              stacked: true,\n              ticks: {\n                stepSize: 500000,\n                callback: function callback(value, index, values) {\n                  return Math.round(value * 100) / 100000 + \'k  \';\n                }\n              },\n              gridLines: {\n                drawTicks: false\n              },\n              scaleLabel: {\n                display: true,\n                labelString: "No. of Households",\n                fontStyle: \'bold\',\n                fontFamily: "Montserrat",\n                fontSize: 12\n              }\n            }]\n          }\n        }\n      });\n    }\n  }, {\n    key: "renderChart_free_basic_services",\n    value: function renderChart_free_basic_services() {\n      if (chartRef6) {\n        chartRef6.destroy();\n      }\n      var ctx = document.getElementById(\'mc5\').getContext(\'2d\');\n      chartRef6 = new Chart(ctx, {\n        type: \'bar\',\n        data: {\n          labels: sortedData,\n          datasets: [{\n            label: \'2018\',\n            stack: \'Stack 3\',\n            data: fbs_2018_data,\n            backgroundColor: \'#C8EBBA\',\n            borderColor: \'#C8EBBA\'\n          }]\n        },\n        options: {\n          legend: {\n            labels: {\n              fontColor: "#4A4A4A",\n              fontSize: 8,\n              fontFamily: "Montserrat"\n            }\n          },\n          title: {\n            display: false,\n            text: \'Title\',\n            fontFamily: "Montserrat"\n          },\n          tooltips: {\n            mode: \'index\',\n            intercept: false,\n            callbacks: {\n              label: function label(tooltipItem, data) {\n                var label = data.datasets[tooltipItem.datasetIndex].label || \'\';\n                if (label) {\n                  label += \': \';\n                }\n                label += Math.round(tooltipItem.yLabel * 100) / 100;\n                {\n                  a ? label = label + \'%\' : label;\n                }\n                return label;\n              }\n            }\n          },\n          responsive: true,\n          scales: {\n            xAxes: [{\n              stacked: true,\n              ticks: {\n                fontStyle: \'bold\',\n                fontFamily: "Montserrat"\n              },\n              gridLines: {\n                display: false\n              }\n            }],\n            yAxes: [{\n              stacked: true,\n              ticks: {\n                stepSize: this.state.stepSize,\n                callback: function callback(value, index, values) {\n                  {\n                    a ? values = value + \'%  \' : values = Math.round(value * 100) / 100000 + \'k\';\n                  }\n                  return values;\n                }\n              },\n              gridLines: {\n                drawTicks: false\n              },\n              scaleLabel: {\n                display: true,\n                labelString: "No. of Domestic Units",\n                fontStyle: \'bold\',\n                fontFamily: "Montserrat",\n                fontSize: 12\n              }\n            }]\n          }\n        }\n      });\n    }\n  }, {\n    key: "render",\n    value: function render() {\n      return /*#__PURE__*/react.createElement("div", null, this.state.loader ? /*#__PURE__*/react.createElement(Modal/* default */.Z, {\n        id: "loader",\n        isOpen: this.state.loader,\n        className: "modal-dialog-centered loader"\n      }, /*#__PURE__*/react.createElement(ModalBody/* default */.Z, null, /*#__PURE__*/react.createElement("div", {\n        className: "row"\n      }, /*#__PURE__*/react.createElement("div", {\n        className: "col-2"\n      }), /*#__PURE__*/react.createElement("div", {\n        className: "col-0 ml-3 pt-4"\n      }, /*#__PURE__*/react.createElement(Spinner/* default */.Z, {\n        type: "grow",\n        color: "secondary",\n        size: "sm"\n      }), /*#__PURE__*/react.createElement(Spinner/* default */.Z, {\n        type: "grow",\n        color: "success",\n        size: "sm"\n      }), /*#__PURE__*/react.createElement(Spinner/* default */.Z, {\n        type: "grow",\n        color: "danger",\n        size: "sm"\n      }), /*#__PURE__*/react.createElement(Spinner/* default */.Z, {\n        type: "grow",\n        color: "warning",\n        size: "sm"\n      })), /*#__PURE__*/react.createElement("div", {\n        className: "col-0 pt-4 pl-4 float-left"\n      }, "Loading Content...")), /*#__PURE__*/react.createElement("br", null))) : \'\', /*#__PURE__*/react.createElement("div", {\n        className: "container-fluid charts_dashboards"\n      }, /*#__PURE__*/react.createElement("div", {\n        className: "row"\n      }, /*#__PURE__*/react.createElement("div", {\n        className: "charts_dashboards--left_container col-md-8 p-0"\n      }, /*#__PURE__*/react.createElement("div", {\n        className: "charts_dashboards--select"\n      }, /*#__PURE__*/react.createElement(react_select_esm/* default */.ZP, {\n        id: "multiple",\n        name: "filters",\n        placeholder: "Filter City",\n        value: this.state.multiValue,\n        options: this.state.filterOptions,\n        onChange: this.handleMultiChange,\n        isMulti: this.state.isMulti,\n        styles: style\n      })), /*#__PURE__*/react.createElement("div", {\n        className: "charts_dashboards--barcharts"\n      }, /*#__PURE__*/react.createElement("div", {\n        className: "row"\n      }, /*#__PURE__*/react.createElement("div", {\n        className: "col-md-6"\n      }, /*#__PURE__*/react.createElement("div", {\n        className: "charts"\n      }, /*#__PURE__*/react.createElement("div", {\n        className: "row"\n      }, /*#__PURE__*/react.createElement("div", {\n        className: "col-md-9"\n      }, /*#__PURE__*/react.createElement("h1", {\n        className: "charts_dashboards--households"\n      }, "Households: Access to Basic Water Supply")), /*#__PURE__*/react.createElement("div", {\n        className: "col-md-3"\n      }, /*#__PURE__*/react.createElement(Button/* default */.Z, {\n        className: "charts_dashboards--button",\n        text: "Raw Data",\n        href: "toolkit#/codebook-explorer/392",\n        target: "_blank"\n      }))), /*#__PURE__*/react.createElement("canvas", {\n        id: "mc"\n      }))), /*#__PURE__*/react.createElement("div", {\n        className: "col-md-6"\n      }, /*#__PURE__*/react.createElement("div", {\n        className: "charts"\n      }, /*#__PURE__*/react.createElement("div", {\n        className: "row"\n      }, /*#__PURE__*/react.createElement("div", {\n        className: "col-md-9"\n      }, /*#__PURE__*/react.createElement("h1", {\n        className: "charts_dashboards--households"\n      }, "Households: Access to Basic Sanitation")), /*#__PURE__*/react.createElement("div", {\n        className: "col-md-3"\n      }, /*#__PURE__*/react.createElement(Button/* default */.Z, {\n        className: "charts_dashboards--button",\n        text: "Raw Data",\n        href: "toolkit#/codebook-explorer/384",\n        target: "_blank"\n      }))), /*#__PURE__*/react.createElement("canvas", {\n        id: "mc1"\n      })))), /*#__PURE__*/react.createElement("div", {\n        className: "row"\n      }, /*#__PURE__*/react.createElement("div", {\n        className: "col-md-6"\n      }, /*#__PURE__*/react.createElement("div", {\n        className: "charts"\n      }, /*#__PURE__*/react.createElement("div", {\n        className: "row"\n      }, /*#__PURE__*/react.createElement("div", {\n        className: "col-md-9"\n      }, /*#__PURE__*/react.createElement("h1", {\n        className: "charts_dashboards--households"\n      }, "Households: Access to Electricity")), /*#__PURE__*/react.createElement("div", {\n        className: "col-md-3"\n      }, /*#__PURE__*/react.createElement(Button/* default */.Z, {\n        className: "charts_dashboards--button",\n        text: "Raw Data",\n        href: "toolkit#/codebook-explorer/10",\n        target: "_blank"\n      }))), /*#__PURE__*/react.createElement("canvas", {\n        id: "mc2"\n      }))), /*#__PURE__*/react.createElement("div", {\n        className: "col-md-6"\n      }, /*#__PURE__*/react.createElement("div", {\n        className: "charts"\n      }, /*#__PURE__*/react.createElement("div", {\n        className: "row"\n      }, /*#__PURE__*/react.createElement("div", {\n        className: "col-md-9"\n      }, /*#__PURE__*/react.createElement("h1", {\n        className: "charts_dashboards--households"\n      }, "Households: Access to Refuse Removal")), /*#__PURE__*/react.createElement("div", {\n        className: "col-md-3"\n      }, /*#__PURE__*/react.createElement(Button/* default */.Z, {\n        className: "charts_dashboards--button",\n        text: "Raw Data",\n        href: "toolkit#/codebook-explorer/1114",\n        target: "_blank"\n      }))), /*#__PURE__*/react.createElement("canvas", {\n        id: "mc3"\n      })))))), /*#__PURE__*/react.createElement("div", {\n        className: "col-md-4"\n      }, /*#__PURE__*/react.createElement("div", {\n        className: "charts p-0"\n      }, /*#__PURE__*/react.createElement("div", {\n        className: "row"\n      }, /*#__PURE__*/react.createElement("div", {\n        className: "col-md-9"\n      }, /*#__PURE__*/react.createElement("h1", {\n        className: "charts_dashboards--households"\n      }, "Total Number of Households/Municipality")), /*#__PURE__*/react.createElement("div", {\n        className: "col-md-3"\n      }, /*#__PURE__*/react.createElement(Button/* default */.Z, {\n        className: "charts_dashboards--button",\n        text: "Raw Data",\n        href: "toolkit#/codebook-explorer/12",\n        target: "_blank"\n      }))), /*#__PURE__*/react.createElement("canvas", {\n        id: "mc4"\n      })), /*#__PURE__*/react.createElement("div", {\n        className: "charts p-0 mt-4"\n      }, /*#__PURE__*/react.createElement("div", {\n        className: "row"\n      }, /*#__PURE__*/react.createElement("div", {\n        className: "col-md-9"\n      }, /*#__PURE__*/react.createElement("h1", {\n        className: "charts_dashboards--households"\n      }, "Units Receiving Free Basic Services")), /*#__PURE__*/react.createElement("div", {\n        className: "col-md-3 d-none"\n      }, /*#__PURE__*/react.createElement(Button/* default */.Z, {\n        className: "charts_dashboards--button",\n        text: "Raw Data",\n        href: "toolkit#/codebook-explorer/384",\n        target: "_blank"\n      }))), /*#__PURE__*/react.createElement(Switch_text, {\n        toggle: this.state.toggle,\n        action: this.switchTrigger\n      }), /*#__PURE__*/react.createElement("canvas", {\n        id: "mc5"\n      }))))));\n    }\n  }]);\n  return Charts_dashboards;\n}(react.Component);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///10269\n')},46700:(I,Q,g)=>{var C={"./af":42786,"./af.js":42786,"./ar":30867,"./ar-dz":14130,"./ar-dz.js":14130,"./ar-kw":96135,"./ar-kw.js":96135,"./ar-ly":56440,"./ar-ly.js":56440,"./ar-ma":47702,"./ar-ma.js":47702,"./ar-sa":16040,"./ar-sa.js":16040,"./ar-tn":37100,"./ar-tn.js":37100,"./ar.js":30867,"./az":31083,"./az.js":31083,"./be":9808,"./be.js":9808,"./bg":68338,"./bg.js":68338,"./bm":67438,"./bm.js":67438,"./bn":8905,"./bn-bd":76225,"./bn-bd.js":76225,"./bn.js":8905,"./bo":11560,"./bo.js":11560,"./br":1278,"./br.js":1278,"./bs":80622,"./bs.js":80622,"./ca":2468,"./ca.js":2468,"./cs":5822,"./cs.js":5822,"./cv":50877,"./cv.js":50877,"./cy":47373,"./cy.js":47373,"./da":24780,"./da.js":24780,"./de":59740,"./de-at":60217,"./de-at.js":60217,"./de-ch":60894,"./de-ch.js":60894,"./de.js":59740,"./dv":5300,"./dv.js":5300,"./el":50837,"./el.js":50837,"./en-au":78348,"./en-au.js":78348,"./en-ca":77925,"./en-ca.js":77925,"./en-gb":22243,"./en-gb.js":22243,"./en-ie":46436,"./en-ie.js":46436,"./en-il":47207,"./en-il.js":47207,"./en-in":44175,"./en-in.js":44175,"./en-nz":76319,"./en-nz.js":76319,"./en-sg":31662,"./en-sg.js":31662,"./eo":92915,"./eo.js":92915,"./es":55655,"./es-do":55251,"./es-do.js":55251,"./es-mx":96112,"./es-mx.js":96112,"./es-us":71146,"./es-us.js":71146,"./es.js":55655,"./et":5603,"./et.js":5603,"./eu":77763,"./eu.js":77763,"./fa":76959,"./fa.js":76959,"./fi":11897,"./fi.js":11897,"./fil":42549,"./fil.js":42549,"./fo":94694,"./fo.js":94694,"./fr":94470,"./fr-ca":63049,"./fr-ca.js":63049,"./fr-ch":52330,"./fr-ch.js":52330,"./fr.js":94470,"./fy":5044,"./fy.js":5044,"./ga":29295,"./ga.js":29295,"./gd":2101,"./gd.js":2101,"./gl":38794,"./gl.js":38794,"./gom-deva":27884,"./gom-deva.js":27884,"./gom-latn":23168,"./gom-latn.js":23168,"./gu":95349,"./gu.js":95349,"./he":24206,"./he.js":24206,"./hi":30094,"./hi.js":30094,"./hr":30316,"./hr.js":30316,"./hu":22138,"./hu.js":22138,"./hy-am":11423,"./hy-am.js":11423,"./id":29218,"./id.js":29218,"./is":90135,"./is.js":90135,"./it":90626,"./it-ch":10150,"./it-ch.js":10150,"./it.js":90626,"./ja":39183,"./ja.js":39183,"./jv":24286,"./jv.js":24286,"./ka":12105,"./ka.js":12105,"./kk":47772,"./kk.js":47772,"./km":18758,"./km.js":18758,"./kn":79282,"./kn.js":79282,"./ko":33730,"./ko.js":33730,"./ku":1408,"./ku.js":1408,"./ky":33291,"./ky.js":33291,"./lb":36841,"./lb.js":36841,"./lo":55466,"./lo.js":55466,"./lt":57010,"./lt.js":57010,"./lv":37595,"./lv.js":37595,"./me":39861,"./me.js":39861,"./mi":35493,"./mi.js":35493,"./mk":95966,"./mk.js":95966,"./ml":87341,"./ml.js":87341,"./mn":5115,"./mn.js":5115,"./mr":10370,"./mr.js":10370,"./ms":9847,"./ms-my":41237,"./ms-my.js":41237,"./ms.js":9847,"./mt":72126,"./mt.js":72126,"./my":56165,"./my.js":56165,"./nb":64924,"./nb.js":64924,"./ne":16744,"./ne.js":16744,"./nl":93901,"./nl-be":59814,"./nl-be.js":59814,"./nl.js":93901,"./nn":83877,"./nn.js":83877,"./oc-lnc":92135,"./oc-lnc.js":92135,"./pa-in":15858,"./pa-in.js":15858,"./pl":64495,"./pl.js":64495,"./pt":89520,"./pt-br":57971,"./pt-br.js":57971,"./pt.js":89520,"./ro":96459,"./ro.js":96459,"./ru":21793,"./ru.js":21793,"./sd":40950,"./sd.js":40950,"./se":10490,"./se.js":10490,"./si":90124,"./si.js":90124,"./sk":64249,"./sk.js":64249,"./sl":14985,"./sl.js":14985,"./sq":51104,"./sq.js":51104,"./sr":49131,"./sr-cyrl":79915,"./sr-cyrl.js":79915,"./sr.js":49131,"./ss":85893,"./ss.js":85893,"./sv":98760,"./sv.js":98760,"./sw":91172,"./sw.js":91172,"./ta":27333,"./ta.js":27333,"./te":23110,"./te.js":23110,"./tet":52095,"./tet.js":52095,"./tg":27321,"./tg.js":27321,"./th":9041,"./th.js":9041,"./tk":19005,"./tk.js":19005,"./tl-ph":75768,"./tl-ph.js":75768,"./tlh":89444,"./tlh.js":89444,"./tr":72397,"./tr.js":72397,"./tzl":28254,"./tzl.js":28254,"./tzm":51106,"./tzm-latn":30699,"./tzm-latn.js":30699,"./tzm.js":51106,"./ug-cn":9288,"./ug-cn.js":9288,"./uk":67691,"./uk.js":67691,"./ur":13795,"./ur.js":13795,"./uz":6791,"./uz-latn":60588,"./uz-latn.js":60588,"./uz.js":6791,"./vi":65666,"./vi.js":65666,"./x-pseudo":14378,"./x-pseudo.js":14378,"./yo":75805,"./yo.js":75805,"./zh-cn":83839,"./zh-cn.js":83839,"./zh-hk":55726,"./zh-hk.js":55726,"./zh-mo":99807,"./zh-mo.js":99807,"./zh-tw":74152,"./zh-tw.js":74152};function F(I){var Q=U(I);return g(Q)}function U(I){if(!g.o(C,I)){var Q=new Error("Cannot find module '"+I+"'");throw Q.code="MODULE_NOT_FOUND",Q}return C[I]}F.keys=function(){return Object.keys(C)},F.resolve=U,I.exports=F,F.id=46700}}]);