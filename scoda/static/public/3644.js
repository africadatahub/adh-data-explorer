"use strict";(self.webpackChunkocl_bb_library=self.webpackChunkocl_bb_library||[]).push([[3644],{9365:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "Z": () => (/* binding */ IndicatorExplorerDataBoxChartFilter)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(67294);\n/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(19755);\n/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(jquery__WEBPACK_IMPORTED_MODULE_1__);\nfunction _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\nfunction _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\n\nvar IndicatorExplorerDataBoxChartFilter = /*#__PURE__*/function (_Component) {\n  _inherits(IndicatorExplorerDataBoxChartFilter, _Component);\n  var _super = _createSuper(IndicatorExplorerDataBoxChartFilter);\n  function IndicatorExplorerDataBoxChartFilter(props) {\n    _classCallCheck(this, IndicatorExplorerDataBoxChartFilter);\n    return _super.call(this, props);\n  }\n  _createClass(IndicatorExplorerDataBoxChartFilter, [{\n    key: "componentDidUpdate",\n    value: function componentDidUpdate() {\n      if (this.props.results.length !== 0) {\n        this.loadGoogleVizApi(this.props.results, this.props.filterYear);\n      }\n    }\n  }, {\n    key: "loadGoogleVizApi",\n    value: function loadGoogleVizApi(resultSet, selectedYear) {\n      var options = {\n        dataType: "script",\n        cache: true,\n        url: "https://www.google.com/jsapi"\n      };\n      jquery__WEBPACK_IMPORTED_MODULE_1___default().ajax(options).done(function () {\n        google.load("visualization", "1", {\n          packages: [\'controls\', \'bar\', \'corechart\', \'geochart\'],\n          callback: function callback() {\n            var dataSet = resultSet.table;\n            var rows = [];\n            var rowHeader = [];\n            for (var i = 0; i < dataSet[0].length; i++) {\n              rowHeader.push(dataSet[0][i]);\n            }\n            rows.push(rowHeader);\n            for (var j = 1; j < dataSet.length; j++) {\n              var rowItem = dataSet[j];\n              var row = [];\n              if (rowItem[1].toString() === selectedYear) {\n                for (var k = 0; k < rowItem.length; k++) {\n                  row.push(rowItem[k]);\n                }\n                rows.push(row);\n              }\n            }\n            var data = google.visualization.arrayToDataTable(resultSet.table);\n            var categoryPicker1 = new google.visualization.ControlWrapper({\n              \'controlType\': \'CategoryFilter\',\n              \'containerId\': \'categorySelector1\',\n              \'state\': {\n                \'selectedValues\': resultSet.cities\n              },\n              \'options\': {\n                \'filterColumnLabel\': \'City\',\n                \'ui\': {\n                  \'labelStacking\': \'vertical\',\n                  \'allowMultiple\': true,\n                  \'allowNone\': false,\n                  \'allowTyping\': false,\n                  \'caption\': \'Choose a city...\'\n                }\n              }\n            });\n            var categoryPicker2 = new google.visualization.ControlWrapper({\n              \'controlType\': \'CategoryFilter\',\n              \'containerId\': \'categorySelector2\',\n              \'state\': {\n                \'selectedValues\': resultSet.years\n              },\n              \'options\': {\n                \'filterColumnLabel\': \'Year\',\n                \'ui\': {\n                  \'labelStacking\': \'vertical\',\n                  \'allowTyping\': false,\n                  \'allowMultiple\': false,\n                  \'allowNone\': false\n                }\n              }\n            });\n\n            //var dashboard = new google.visualization.Dashboard(document.getElementById(\'dashboard\'));\n            //dashboard.bind(categoryPicker1,categoryPicker2,bar);\n            //dashboard.draw(data);\n          }\n        });\n      });\n    }\n  }, {\n    key: "render",\n    value: function render() {\n      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", {\n        className: "ie-box-card box-height"\n      }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", {\n        className: "ie-box-card-header"\n      }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", {\n        className: "row"\n      }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", {\n        className: "col ml-3"\n      }, "Select Data"))), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", {\n        className: "mt-2 ml-2 mr-2"\n      }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", {\n        id: "categorySelector2"\n      }), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", {\n        id: "cat-spacer",\n        className: "ml-2 mr-2 mt-4 mb-2 ie-small-border"\n      }), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", {\n        id: "categorySelector1"\n      })), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", {\n        className: "row mt-3"\n      }));\n    }\n  }]);\n  return IndicatorExplorerDataBoxChartFilter;\n}(react__WEBPACK_IMPORTED_MODULE_0__.Component);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///9365\n')},33420:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "Z": () => (/* binding */ IndicatorExplorerDataBoxMapFilter)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(67294);\nfunction _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\nfunction _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nvar IndicatorExplorerDataBoxMapFilter = /*#__PURE__*/function (_Component) {\n  _inherits(IndicatorExplorerDataBoxMapFilter, _Component);\n  var _super = _createSuper(IndicatorExplorerDataBoxMapFilter);\n  function IndicatorExplorerDataBoxMapFilter(props) {\n    var _this;\n    _classCallCheck(this, IndicatorExplorerDataBoxMapFilter);\n    _this = _super.call(this, props);\n    _this.reBindMap = _this.reBindMap.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n  _createClass(IndicatorExplorerDataBoxMapFilter, [{\n    key: "reBindMap",\n    value: function reBindMap() {\n      if (this.props.results.plot_type === 2) {\n        this.props.changeHook(document.getElementById(\'map-selector\').value, 2);\n      }\n\n      /*if(this.props.results.plot_type === 1) {\r\n          var year = Number(document.getElementById(\'map-selector\').value);\r\n          this.props.changeHook(year,1);\r\n      }*/\n    }\n  }, {\n    key: "render",\n    value: function render() {\n      var _this2 = this;\n      var selectorOptions = [];\n      if (this.props.results.length !== 0) {\n        if (this.props.results.plot_type === 2) {\n          selectorOptions = this.props.results.options_list.map(function (dataset, index) {\n            return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement("option", {\n              key: index,\n              value: dataset.optid\n            }, dataset.optname);\n          });\n        }\n        if (this.props.results.plot_type === 1) {\n          selectorOptions = this.props.results.years_list.map(function (dataset, index) {\n            return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement("option", {\n              key: index,\n              value: dataset.optid\n            }, dataset.optname);\n          });\n        }\n      }\n      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", {\n        className: "ie-box-card"\n      }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", {\n        className: "ie-box-card-header"\n      }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", {\n        className: "row"\n      }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", {\n        className: "col ml-3"\n      }, "Data on Map"))), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", {\n        className: "col-0 pt-2 pl-1 pr-1"\n      }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", {\n        className: "ie-box-results mtp-2 mr-2 ml-2"\n      }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement("select", {\n        id: "map-selector",\n        className: "mt-2 mr-2 ie-dropdown-small",\n        onChange: function onChange() {\n          return _this2.reBindMap();\n        }\n      }, selectorOptions))), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", {\n        className: "row mt-3"\n      }));\n    }\n  }]);\n  return IndicatorExplorerDataBoxMapFilter;\n}(react__WEBPACK_IMPORTED_MODULE_0__.Component);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzM0MjAuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7O0FBQXlDO0FBQUEsSUFHcEJFLGlDQUFpQztFQUFBO0VBQUE7RUFDbEQsMkNBQVlDLEtBQUssRUFBRTtJQUFBO0lBQUE7SUFDZiwwQkFBTUEsS0FBSztJQUVYLE1BQUtDLFNBQVMsR0FBRyxNQUFLQSxTQUFTLENBQUNDLElBQUksK0JBQU07SUFBQztFQUMvQztFQUFDO0lBQUE7SUFBQSxPQUVELHFCQUFZO01BQ1IsSUFBRyxJQUFJLENBQUNGLEtBQUssQ0FBQ0csT0FBTyxDQUFDQyxTQUFTLEtBQUssQ0FBQyxFQUFFO1FBQ25DLElBQUksQ0FBQ0osS0FBSyxDQUFDSyxVQUFVLENBQUNDLFFBQVEsQ0FBQ0MsY0FBYyxDQUFDLGNBQWMsQ0FBQyxDQUFDQyxLQUFLLEVBQUMsQ0FBQyxDQUFDO01BQzFFOztNQUVBO0FBQ1I7QUFDQTtBQUNBO0lBQ0k7RUFBQztJQUFBO0lBQUEsT0FFRCxrQkFBUztNQUFBO01BQ0wsSUFBSUMsZUFBZSxHQUFHLEVBQUU7TUFDeEIsSUFBRyxJQUFJLENBQUNULEtBQUssQ0FBQ0csT0FBTyxDQUFDTyxNQUFNLEtBQUssQ0FBQyxFQUFFO1FBQ2hDLElBQUcsSUFBSSxDQUFDVixLQUFLLENBQUNHLE9BQU8sQ0FBQ0MsU0FBUyxLQUFLLENBQUMsRUFBRTtVQUNuQ0ssZUFBZSxHQUFHLElBQUksQ0FBQ1QsS0FBSyxDQUFDRyxPQUFPLENBQUNRLFlBQVksQ0FBQ0MsR0FBRyxDQUFDLFVBQUNDLE9BQU8sRUFBQ0MsS0FBSztZQUFBLG9CQUNoRTtjQUFRLEdBQUcsRUFBRUEsS0FBTTtjQUFDLEtBQUssRUFBRUQsT0FBTyxDQUFDRTtZQUFNLEdBQUVGLE9BQU8sQ0FBQ0csT0FBTyxDQUFVO1VBQUEsQ0FDdkUsQ0FBQztRQUNOO1FBQ0EsSUFBRyxJQUFJLENBQUNoQixLQUFLLENBQUNHLE9BQU8sQ0FBQ0MsU0FBUyxLQUFLLENBQUMsRUFBRTtVQUNuQ0ssZUFBZSxHQUFHLElBQUksQ0FBQ1QsS0FBSyxDQUFDRyxPQUFPLENBQUNjLFVBQVUsQ0FBQ0wsR0FBRyxDQUFDLFVBQUNDLE9BQU8sRUFBQ0MsS0FBSztZQUFBLG9CQUM5RDtjQUFRLEdBQUcsRUFBRUEsS0FBTTtjQUFDLEtBQUssRUFBRUQsT0FBTyxDQUFDRTtZQUFNLEdBQUVGLE9BQU8sQ0FBQ0csT0FBTyxDQUFVO1VBQUEsQ0FDdkUsQ0FBQztRQUNOO01BRUo7TUFFQSxvQkFDZ0I7UUFBSyxTQUFTLEVBQUM7TUFBYSxnQkFDeEI7UUFBSyxTQUFTLEVBQUM7TUFBb0IsZ0JBQ2pDO1FBQUssU0FBUyxFQUFDO01BQUssZ0JBQ2hCO1FBQUssU0FBUyxFQUFDO01BQVUsaUJBRW5CLENBQ0osQ0FDRixlQUNOO1FBQUssU0FBUyxFQUFDO01BQXNCLGdCQUNqQztRQUFLLFNBQVMsRUFBQztNQUFnQyxnQkFDL0M7UUFBUSxFQUFFLEVBQUMsY0FBYztRQUFDLFNBQVMsRUFBQyw2QkFBNkI7UUFBQyxRQUFRLEVBQUU7VUFBQSxPQUFJLE1BQUksQ0FBQ2YsU0FBUyxFQUFFO1FBQUE7TUFBQyxHQUM5RlEsZUFBZSxDQUNULENBQ0gsQ0FDSixlQUNOO1FBQUssU0FBUyxFQUFDO01BQVUsRUFBTyxDQUM5QjtJQUUxQjtFQUFDO0VBQUE7QUFBQSxFQXJEMERYLDRDQUFTIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vb2NsX2JiX2xpYnJhcnkvLi9qcy9jb21wb25lbnRzL0luZGljYXRvckV4cGxvcmVyLkRhdGEuQm94LlNtYWxsLk1hcEZpbHRlci5qc3g/MDNkYiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnO1xyXG5cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEluZGljYXRvckV4cGxvcmVyRGF0YUJveE1hcEZpbHRlciBleHRlbmRzIENvbXBvbmVudCB7XHJcbiAgICBjb25zdHJ1Y3Rvcihwcm9wcykge1xyXG4gICAgICAgIHN1cGVyKHByb3BzKTtcclxuXHJcbiAgICAgICAgdGhpcy5yZUJpbmRNYXAgPSB0aGlzLnJlQmluZE1hcC5iaW5kKHRoaXMpO1xyXG4gICAgfVxyXG5cclxuICAgIHJlQmluZE1hcCgpIHtcclxuICAgICAgICBpZih0aGlzLnByb3BzLnJlc3VsdHMucGxvdF90eXBlID09PSAyKSB7XHJcbiAgICAgICAgICAgIHRoaXMucHJvcHMuY2hhbmdlSG9vayhkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbWFwLXNlbGVjdG9yJykudmFsdWUsMik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKmlmKHRoaXMucHJvcHMucmVzdWx0cy5wbG90X3R5cGUgPT09IDEpIHtcclxuICAgICAgICAgICAgdmFyIHllYXIgPSBOdW1iZXIoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ21hcC1zZWxlY3RvcicpLnZhbHVlKTtcclxuICAgICAgICAgICAgdGhpcy5wcm9wcy5jaGFuZ2VIb29rKHllYXIsMSk7XHJcbiAgICAgICAgfSovXHJcbiAgICB9XHJcblxyXG4gICAgcmVuZGVyKCkge1xyXG4gICAgICAgIGxldCBzZWxlY3Rvck9wdGlvbnMgPSBbXTtcclxuICAgICAgICBpZih0aGlzLnByb3BzLnJlc3VsdHMubGVuZ3RoICE9PSAwKSB7XHJcbiAgICAgICAgICAgIGlmKHRoaXMucHJvcHMucmVzdWx0cy5wbG90X3R5cGUgPT09IDIpIHtcclxuICAgICAgICAgICAgICAgIHNlbGVjdG9yT3B0aW9ucyA9IHRoaXMucHJvcHMucmVzdWx0cy5vcHRpb25zX2xpc3QubWFwKChkYXRhc2V0LGluZGV4KSA9PihcclxuICAgICAgICAgICAgICAgICAgICA8b3B0aW9uIGtleT17aW5kZXh9IHZhbHVlPXtkYXRhc2V0Lm9wdGlkfT57ZGF0YXNldC5vcHRuYW1lfTwvb3B0aW9uPlxyXG4gICAgICAgICAgICAgICAgKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYodGhpcy5wcm9wcy5yZXN1bHRzLnBsb3RfdHlwZSA9PT0gMSkge1xyXG4gICAgICAgICAgICAgICAgc2VsZWN0b3JPcHRpb25zID0gdGhpcy5wcm9wcy5yZXN1bHRzLnllYXJzX2xpc3QubWFwKChkYXRhc2V0LGluZGV4KSA9PihcclxuICAgICAgICAgICAgICAgICAgICA8b3B0aW9uIGtleT17aW5kZXh9IHZhbHVlPXtkYXRhc2V0Lm9wdGlkfT57ZGF0YXNldC5vcHRuYW1lfTwvb3B0aW9uPlxyXG4gICAgICAgICAgICAgICAgKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICBcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaWUtYm94LWNhcmRcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaWUtYm94LWNhcmQtaGVhZGVyXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwicm93XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbCBtbC0zXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRGF0YSBvbiBNYXBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb2wtMCBwdC0yIHBsLTEgcHItMVwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaWUtYm94LXJlc3VsdHMgbXRwLTIgbXItMiBtbC0yXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNlbGVjdCBpZD1cIm1hcC1zZWxlY3RvclwiIGNsYXNzTmFtZT1cIm10LTIgbXItMiBpZS1kcm9wZG93bi1zbWFsbFwiIG9uQ2hhbmdlPXsoKT0+dGhpcy5yZUJpbmRNYXAoKX0+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7c2VsZWN0b3JPcHRpb25zfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc2VsZWN0PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInJvdyBtdC0zXCI+PC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgIClcclxuICAgIH1cclxufSJdLCJuYW1lcyI6WyJSZWFjdCIsIkNvbXBvbmVudCIsIkluZGljYXRvckV4cGxvcmVyRGF0YUJveE1hcEZpbHRlciIsInByb3BzIiwicmVCaW5kTWFwIiwiYmluZCIsInJlc3VsdHMiLCJwbG90X3R5cGUiLCJjaGFuZ2VIb29rIiwiZG9jdW1lbnQiLCJnZXRFbGVtZW50QnlJZCIsInZhbHVlIiwic2VsZWN0b3JPcHRpb25zIiwibGVuZ3RoIiwib3B0aW9uc19saXN0IiwibWFwIiwiZGF0YXNldCIsImluZGV4Iiwib3B0aWQiLCJvcHRuYW1lIiwieWVhcnNfbGlzdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///33420\n')},589:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval("\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  \"Z\": () => (/* binding */ IndicatorExplorerDataBox)\n});\n\n// EXTERNAL MODULE: ./node_modules/react/index.js\nvar react = __webpack_require__(67294);\n// EXTERNAL MODULE: ./node_modules/jquery/dist/jquery.js\nvar jquery = __webpack_require__(19755);\nvar jquery_default = /*#__PURE__*/__webpack_require__.n(jquery);\n// EXTERNAL MODULE: ./node_modules/canvg/lib/index.es.js + 3 modules\nvar index_es = __webpack_require__(83894);\n;// CONCATENATED MODULE: ./js/components/IndicatorExplorer.Data.Charts.jsx\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, \"prototype\", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } else if (call !== void 0) { throw new TypeError(\"Derived constructors may only return object or undefined\"); } return _assertThisInitialized(self); }\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\n\n\nvar IndicatorExplorerDataChart = /*#__PURE__*/function (_PureComponent) {\n  _inherits(IndicatorExplorerDataChart, _PureComponent);\n  var _super = _createSuper(IndicatorExplorerDataChart);\n  function IndicatorExplorerDataChart(props) {\n    var _this;\n    _classCallCheck(this, IndicatorExplorerDataChart);\n    _this = _super.call(this, props);\n    _this.state = {\n      containerWidth: '100%',\n      containerHeight: '450px'\n    };\n    _this.handleResize = _this.handleResize.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n  _createClass(IndicatorExplorerDataChart, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      window.addEventListener('resize', this.handleResize);\n      this.handleResize();\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      window.addEventListener('resize', this.handleResize);\n      this.handleResize();\n      if (this.props.data.length !== 0) {\n        this.loadGoogleVizApi(this.props.data, this.props.filterYear, '100%', '100%');\n      }\n    }\n  }, {\n    key: \"handleResize\",\n    value: function handleResize() {\n      var element = document.getElementById('chart');\n      var positionInfo = element.getBoundingClientRect();\n      var height = positionInfo.height;\n      var width = positionInfo.width;\n      var elementT = document.getElementById('tableD');\n      var positionInfoT = elementT.getBoundingClientRect();\n      var heightT = positionInfoT.height;\n      var widthT = positionInfoT.width;\n      var windowWidth = document.body.clientWidth;\n      var windowHeight = document.body.clientHeight;\n      if (windowWidth <= 768) {\n        windowWidth = width;\n        windowHeight = '225px';\n      } else {\n        widthT = '96%';\n        windowWidth = '100%';\n        windowHeight = '450px';\n      }\n      document.getElementById('chart').style.height = windowHeight;\n      document.getElementById('chart').style.width = windowWidth;\n\n      /*if(this.props.data.length !== 0) {\r\n          this.loadGoogleVizApi(this.props.data,this.props.filterYear,windowWidth,windowHeight);\r\n      }*/\n    }\n  }, {\n    key: \"loadGoogleVizApi\",\n    value: function loadGoogleVizApi(resultSet, selectedYear, winWidth, winHeight) {\n      var options = {\n        dataType: \"script\",\n        cache: true,\n        url: \"https://www.google.com/jsapi\"\n      };\n      jquery_default().ajax(options).done(function () {\n        google.load(\"visualization\", \"1\", {\n          packages: ['controls', 'bar', 'corechart', 'geochart', 'line'],\n          callback: function callback() {\n            document.getElementById('chartPng').value = '';\n            var dataSet = resultSet.table;\n            var options = {};\n            var rows = [];\n            var rowHeader = [];\n            for (var i = 0; i < dataSet[0].length; i++) {\n              rowHeader.push(dataSet[0][i]);\n            }\n            rows.push(rowHeader);\n            for (var j = 1; j < dataSet.length; j++) {\n              var rowItem = dataSet[j];\n              var row = [];\n              if (rowItem[1].toString() === selectedYear) {\n                for (var k = 0; k < rowItem.length; k++) {\n                  row.push(rowItem[k]);\n                }\n                rows.push(row);\n              }\n            }\n            if (resultSet.plot_type === 2) {\n              jquery_default()('#categorySelector2').show();\n              jquery_default()('#cat-spacer').show();\n              options = {\n                'chartType': 'Bar',\n                'dataTable': rows,\n                'containerId': 'chart',\n                'options': {\n                  stacked: true,\n                  legend: {\n                    position: 'right'\n                  },\n                  bars: 'vertical',\n                  vAxis: {\n                    minValue: 0\n                  },\n                  hAxis: {\n                    slantedText: true\n                  },\n                  bar: {\n                    groupWidth: '99%'\n                  },\n                  tooltip: {\n                    isHtml: true\n                  },\n                  chartArea: {\n                    left: '10%',\n                    right: '60%'\n                  },\n                  height: winHeight,\n                  width: winWidth,\n                  fontfamily: 'Montserrat',\n                  fontsize: '10',\n                  series: resultSet.series\n                },\n                view: {\n                  'columns': resultSet.view\n                }\n              };\n            }\n            if (resultSet.plot_type === 1) {\n              options = {\n                'chartType': 'Line',\n                'containerId': 'chart',\n                'options': {\n                  legend: {\n                    position: 'right'\n                  },\n                  axes: {\n                    y: {\n                      all: {\n                        range: {\n                          max: resultSet.max,\n                          min: resultSet.min > 0 ? 0 : resultSet.min - 1\n                        }\n                      }\n                    }\n                  },\n                  hAxis: {\n                    slantedText: true\n                  },\n                  height: winHeight,\n                  lineWidth: 4,\n                  interpolateNulls: true,\n                  tooltip: {\n                    isHtml: true\n                  },\n                  pointSize: 5\n                }\n              };\n            }\n            var bar = new google.visualization.ChartWrapper(options);\n            var cssClassNames = {\n              'headerRow': 'google-visualization-table-table',\n              'tableRow': 'table-cell',\n              'oddTableRow': 'table-cell',\n              'selectedTableRow': 'table-cell',\n              'hoverTableRow': 'table-cell',\n              'tableCell': 'table-cell',\n              'table': 'google-visualization-table-table'\n            };\n            var table = new google.visualization.ChartWrapper({\n              'chartType': 'Table',\n              'containerId': 'tableD',\n              'options': {\n                'showRowNumber': false,\n                'allowHtml': true,\n                'cssClassNames': cssClassNames\n              }\n            });\n            var categoryPicker1 = new google.visualization.ControlWrapper({\n              'controlType': 'CategoryFilter',\n              'containerId': 'categorySelector1',\n              'state': {\n                'selectedValues': resultSet.cities\n              },\n              'options': {\n                'filterColumnLabel': 'City',\n                'ui': {\n                  'labelStacking': 'vertical',\n                  'allowMultiple': true,\n                  'allowNone': false,\n                  'allowTyping': false,\n                  'caption': 'Choose a city...'\n                }\n              }\n            });\n            var categoryPicker2 = new google.visualization.ControlWrapper({\n              'controlType': 'CategoryFilter',\n              'containerId': 'categorySelector2',\n              'id': 'dateSelector',\n              'state': {\n                'selectedValues': resultSet.years\n              },\n              'options': {\n                'filterColumnLabel': 'Year',\n                'ui': {\n                  'labelStacking': 'vertical',\n                  'allowTyping': false,\n                  'allowMultiple': false,\n                  'allowNone': false\n                }\n              }\n            });\n            var data = google.visualization.arrayToDataTable(resultSet.table);\n            var dashboard = new google.visualization.Dashboard();\n            if (resultSet.plot_type === 2) {\n              dashboard.bind([categoryPicker1, categoryPicker2], [bar, table]);\n              dashboard.draw(data);\n            } else {\n              categoryPicker2.setDataTable(data);\n              categoryPicker2.draw();\n              table = new google.visualization.ChartWrapper({\n                'chartType': 'Table',\n                'containerId': 'tableD2',\n                'options': {\n                  'allowHtml': true,\n                  'cssClassNames': cssClassNames\n                }\n              });\n              data = new google.visualization.DataTable(resultSet.table_plot);\n              dashboard.bind([categoryPicker1], [table]);\n              dashboard.draw(data);\n            }\n            google.visualization.events.addListener(table, 'ready', function (event) {\n              var tableData = table.getDataTable();\n              var csvData = google.visualization.dataTableToCsv(tableData);\n              if (resultSet.plot_type === 1) {\n                jquery_default()('#categorySelector2').hide();\n                jquery_default()('#cat-spacer').hide();\n                tableData = table.getDataTable();\n                var _filteredData = tableData;\n                var _group = _filteredData.getDistinctValues(0);\n                var columns = [2],\n                  groupColumns = [];\n                for (var _i = 0; _i < _group.length; _i++) {\n                  var label = _group[_i];\n                  columns.push({\n                    type: 'number',\n                    label: label,\n                    calc: function (name) {\n                      return function (dt, row) {\n                        return dt.getValue(row, 0) == name ? dt.getValue(row, 1) : null;\n                      };\n                    }(label)\n                  });\n                  groupColumns.push({\n                    type: 'number',\n                    label: label,\n                    column: _i + 1,\n                    aggregation: google.visualization.data.sum\n                  });\n                }\n                rowHeader = [];\n                rowHeader.push('Year');\n                for (var _i2 = 0; _i2 < groupColumns.length; _i2++) {\n                  rowHeader.push(groupColumns[_i2].label);\n                }\n                var _view = new google.visualization.DataView(_filteredData);\n                _view.setColumns(columns);\n                var groupedData = google.visualization.data.group(_view, [0], groupColumns);\n                bar.setDataTable(groupedData);\n                bar.draw();\n                var table2 = new google.visualization.ChartWrapper({\n                  'chartType': 'Table',\n                  'containerId': 'tableD',\n                  'options': {\n                    'allowHtml': true,\n                    'cssClassNames': cssClassNames\n                  }\n                });\n                table2.setDataTable(groupedData);\n                table2.draw();\n                tableData = table2.getDataTable();\n                csvData = google.visualization.dataTableToCsv(tableData);\n\n                //map\n                jquery_default()('#map-selector').val(selectedYear);\n                var dataTable = table.getDataTable();\n                _group = dataTable.getDistinctValues(0);\n                columns = [2], groupColumns = [];\n                for (var _i3 = 0; _i3 < _group.length; _i3++) {\n                  var _label = _group[_i3];\n                  columns.push({\n                    type: 'number',\n                    label: _label,\n                    calc: function (name) {\n                      return function (dt, row) {\n                        return dt.getValue(row, 0) == name ? dt.getValue(row, 1) : null;\n                      };\n                    }(_label)\n                  });\n                  groupColumns.push({\n                    type: 'number',\n                    label: _label,\n                    column: _i3 + 1,\n                    aggregation: google.visualization.data.sum\n                  });\n                }\n                _view = new google.visualization.DataView(dataTable);\n                _view.setColumns(columns);\n                groupedData = google.visualization.data.group(_view, [0], groupColumns);\n                var _dt = transposeDataTable(groupedData);\n                var _myView = new google.visualization.DataView(_dt);\n                _myView.setColumns([0, Number(selectedYear)]);\n                var map = new google.visualization.ChartWrapper({\n                  'chartType': 'GeoChart',\n                  'containerId': 'map',\n                  'options': {\n                    region: 'ZA',\n                    displayMode: 'markers',\n                    resolution: 'provinces',\n                    theme: 'material',\n                    colorAxis: {\n                      colors: ['#FED976', '#FC4E2A', '#800026']\n                    },\n                    height: winHeight,\n                    width: winWidth,\n                    tooltip: {\n                      isHtml: true\n                    },\n                    keepAspectRatio: true\n                  }\n                });\n                map.setDataTable(_myView);\n                map.draw();\n                jquery_default()('#map-selector').on('change', function (event) {\n                  event.preventDefault();\n                  var year = Number(document.getElementById('map-selector').value);\n                  var tableData = table.getDataTable();\n                  var group = tableData.getDistinctValues(0);\n                  var columns = [2],\n                    groupColumns = [];\n                  for (var i = 0; i < group.length; i++) {\n                    var label = group[i];\n                    columns.push({\n                      type: 'number',\n                      label: label,\n                      calc: function (name) {\n                        return function (dt, row) {\n                          return dt.getValue(row, 0) == name ? dt.getValue(row, 1) : null;\n                        };\n                      }(label)\n                    });\n                    groupColumns.push({\n                      type: 'number',\n                      label: label,\n                      column: i + 1,\n                      aggregation: google.visualization.data.sum\n                    });\n                  }\n                  var view = new google.visualization.DataView(tableData);\n                  view.setColumns(columns);\n                  var groupedData = google.visualization.data.group(view, [0], groupColumns);\n                  var dt = transposeDataTable(groupedData);\n                  var myView = new google.visualization.DataView(dt);\n                  myView.setColumns([0, Number(year)]);\n                  var map = new google.visualization.ChartWrapper({\n                    'chartType': 'GeoChart',\n                    'containerId': 'map',\n                    'options': {\n                      region: 'ZA',\n                      displayMode: 'markers',\n                      resolution: 'provinces',\n                      theme: 'material',\n                      colorAxis: {\n                        colors: ['#FED976', '#FC4E2A', '#800026']\n                      },\n                      height: winHeight,\n                      width: winWidth,\n                      tooltip: {\n                        isHtml: true\n                      },\n                      keepAspectRatio: true\n                    }\n                  });\n                  map.setDataTable(myView);\n                  map.draw();\n                  jquery_default()('#map-selector').val(year);\n                });\n              }\n              var csvString = rowHeader.join(',') + '\\n' + csvData + '\\n';\n              document.getElementById('csv').value = csvString;\n              var tmpDiv = document.createElement('div');\n              tmpDiv.setAttribute('style', 'width:2000px;height:800px;font-size:10px,fontFamily:Montserrat,visibility:hidden');\n              document.body.appendChild(tmpDiv);\n              var optionsTmp = {};\n              if (resultSet.plot_type === 2) {\n                optionsTmp = {\n                  'chartType': 'Bar',\n                  'dataTable': table.getDataTable(),\n                  'options': {\n                    stacked: true,\n                    legend: {\n                      position: 'right'\n                    },\n                    bars: 'vertical',\n                    vAxis: {\n                      minValue: 0\n                    },\n                    hAxis: {\n                      slantedText: true\n                    },\n                    bar: {\n                      groupWidth: '99%'\n                    },\n                    tooltip: {\n                      isHtml: true\n                    },\n                    chartArea: {\n                      left: '10%',\n                      right: '60%'\n                    },\n                    height: '100%',\n                    width: '100%',\n                    fontfamily: 'Montserrat',\n                    fontsize: '10',\n                    series: resultSet.series\n                  },\n                  view: {\n                    'columns': resultSet.view\n                  }\n                };\n                var barTmp = new google.visualization.ChartWrapper(optionsTmp);\n                barTmp.draw(tmpDiv);\n\n                //var dataSet = Number(document.getElementById('map-selector').value);\n\n                var dataSet = resultSet.table[0][2];\n                var dt = table.getDataTable();\n                var myView = new google.visualization.DataView(dt);\n                myView.setColumns([0, dataSet]);\n                var _map = new google.visualization.ChartWrapper({\n                  'chartType': 'GeoChart',\n                  'containerId': 'map',\n                  'options': {\n                    region: 'ZA',\n                    displayMode: 'markers',\n                    resolution: 'provinces',\n                    theme: 'material',\n                    colorAxis: {\n                      colors: ['#FED976', '#FC4E2A', '#800026']\n                    },\n                    height: winHeight,\n                    width: winWidth,\n                    tooltip: {\n                      isHtml: true\n                    },\n                    keepAspectRatio: true\n                  }\n                });\n                _map.setDataTable(myView);\n                _map.draw();\n                jquery_default()('#map-selector').on('change', function (event) {\n                  event.preventDefault();\n                  var dataSet = Number(document.getElementById('map-selector').value);\n                  dataSet = dataSet + 1;\n                  var dt = table.getDataTable();\n                  var myView = new google.visualization.DataView(dt);\n                  myView.setColumns([0, dataSet]);\n                  var map = new google.visualization.ChartWrapper({\n                    'chartType': 'GeoChart',\n                    'containerId': 'map',\n                    'options': {\n                      region: 'ZA',\n                      displayMode: 'markers',\n                      resolution: 'provinces',\n                      theme: 'material',\n                      colorAxis: {\n                        colors: ['#FED976', '#FC4E2A', '#800026']\n                      },\n                      height: winHeight,\n                      width: winWidth,\n                      tooltip: {\n                        isHtml: true\n                      },\n                      keepAspectRatio: true\n                    }\n                  });\n                  map.setDataTable(myView);\n                  map.draw();\n                });\n              }\n              if (resultSet.plot_type === 1) {\n                var tableData = table.getDataTable();\n                var filteredData = tableData;\n                var group = filteredData.getDistinctValues(0);\n                var columns = [2],\n                  groupColumns = [];\n                for (var i = 0; i < group.length; i++) {\n                  var label = group[i];\n                  columns.push({\n                    type: 'number',\n                    label: label,\n                    calc: function (name) {\n                      return function (dt, row) {\n                        return dt.getValue(row, 0) == name ? dt.getValue(row, 1) : null;\n                      };\n                    }(label)\n                  });\n                  groupColumns.push({\n                    type: 'number',\n                    label: label,\n                    column: i + 1,\n                    aggregation: google.visualization.data.sum\n                  });\n                }\n                optionsTmp = {\n                  'chartType': 'Line',\n                  'options': {\n                    legend: {\n                      position: 'right'\n                    },\n                    axes: {\n                      y: {\n                        all: {\n                          range: {\n                            //max: resultSet.max,\n                            min: 0\n                          }\n                        }\n                      }\n                    },\n                    hAxis: {\n                      slantedText: true\n                    },\n                    height: '100%',\n                    width: '100%',\n                    lineWidth: 4,\n                    interpolateNulls: true,\n                    tooltip: {\n                      isHtml: true\n                    },\n                    pointSize: 5\n                  }\n                };\n                var view = new google.visualization.DataView(filteredData);\n                view.setColumns(columns);\n                var _groupedData = google.visualization.data.group(view, [0], groupColumns);\n                var barTmp = new google.visualization.ChartWrapper(optionsTmp);\n                barTmp.setDataTable(_groupedData);\n                barTmp.draw(tmpDiv);\n              }\n              google.visualization.events.addListener(barTmp, 'ready', function (event) {\n                var chartArea = tmpDiv.children[0];\n                var svgObject = chartArea.children[0].children[0];\n                var svg = svgObject.outerHTML;\n                var canvas = document.querySelector('canvas');\n                var ctx = canvas.getContext('2d');\n                var renderObject = index_es/* default.fromString */.ZP.fromString(ctx, svg);\n                renderObject.start();\n                var dataUri = canvas.toDataURL(\"image/png\");\n                document.getElementById('chartPng').value = dataUri;\n                document.body.removeChild(tmpDiv);\n              });\n              function transposeDataTable(dataTable) {\n                //step 1: let us get what the columns would be\n                var rows = []; //the row tip becomes the column header and the rest become\n                for (var rowIdx = 0; rowIdx < dataTable.getNumberOfRows(); rowIdx++) {\n                  var rowData = [];\n                  for (var colIdx = 0; colIdx < dataTable.getNumberOfColumns(); colIdx++) {\n                    rowData.push(dataTable.getValue(rowIdx, colIdx));\n                  }\n                  rows.push(rowData);\n                }\n                var newTB = new google.visualization.DataTable();\n                newTB.addColumn('string', dataTable.getColumnLabel(0));\n                newTB.addRows(dataTable.getNumberOfColumns() - 1);\n                var colIdx = 1;\n                for (var idx = 0; idx < dataTable.getNumberOfColumns() - 1; idx++) {\n                  var colLabel = dataTable.getColumnLabel(colIdx);\n                  newTB.setValue(idx, 0, colLabel);\n                  colIdx++;\n                }\n                for (var i = 0; i < rows.length; i++) {\n                  var rowData = rows[i];\n                  newTB.addColumn('number', rowData[0]); //assuming the first one is always a header\n                  var localRowIdx = 0;\n                  for (var j = 1; j < rowData.length; j++) {\n                    newTB.setValue(localRowIdx, i + 1, rowData[j]);\n                    localRowIdx++;\n                  }\n                }\n                return newTB;\n              }\n            });\n          }\n        });\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return /*#__PURE__*/react.createElement(\"div\", null, /*#__PURE__*/react.createElement(\"div\", {\n        id: \"chart\",\n        style: {\n          fontSize: '9px',\n          fontFamily: 'Montserrat',\n          fontWeight: '500'\n        }\n      }), /*#__PURE__*/react.createElement(\"input\", {\n        type: \"hidden\",\n        id: \"chartPng\"\n      }));\n    }\n  }]);\n  return IndicatorExplorerDataChart;\n}(react.PureComponent);\n\n;// CONCATENATED MODULE: ./js/components/IndicatorExplorer.Data.Table.jsx\nfunction IndicatorExplorer_Data_Table_typeof(obj) { \"@babel/helpers - typeof\"; return IndicatorExplorer_Data_Table_typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, IndicatorExplorer_Data_Table_typeof(obj); }\nfunction IndicatorExplorer_Data_Table_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\nfunction IndicatorExplorer_Data_Table_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\nfunction IndicatorExplorer_Data_Table_createClass(Constructor, protoProps, staticProps) { if (protoProps) IndicatorExplorer_Data_Table_defineProperties(Constructor.prototype, protoProps); if (staticProps) IndicatorExplorer_Data_Table_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\nfunction IndicatorExplorer_Data_Table_inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, \"prototype\", { writable: false }); if (superClass) IndicatorExplorer_Data_Table_setPrototypeOf(subClass, superClass); }\nfunction IndicatorExplorer_Data_Table_setPrototypeOf(o, p) { IndicatorExplorer_Data_Table_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return IndicatorExplorer_Data_Table_setPrototypeOf(o, p); }\nfunction IndicatorExplorer_Data_Table_createSuper(Derived) { var hasNativeReflectConstruct = IndicatorExplorer_Data_Table_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = IndicatorExplorer_Data_Table_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = IndicatorExplorer_Data_Table_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return IndicatorExplorer_Data_Table_possibleConstructorReturn(this, result); }; }\nfunction IndicatorExplorer_Data_Table_possibleConstructorReturn(self, call) { if (call && (IndicatorExplorer_Data_Table_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } else if (call !== void 0) { throw new TypeError(\"Derived constructors may only return object or undefined\"); } return IndicatorExplorer_Data_Table_assertThisInitialized(self); }\nfunction IndicatorExplorer_Data_Table_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\nfunction IndicatorExplorer_Data_Table_isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction IndicatorExplorer_Data_Table_getPrototypeOf(o) { IndicatorExplorer_Data_Table_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return IndicatorExplorer_Data_Table_getPrototypeOf(o); }\n\n\nvar IndicatorExplorerDataTable = /*#__PURE__*/function (_Component) {\n  IndicatorExplorer_Data_Table_inherits(IndicatorExplorerDataTable, _Component);\n  var _super = IndicatorExplorer_Data_Table_createSuper(IndicatorExplorerDataTable);\n  function IndicatorExplorerDataTable(props) {\n    IndicatorExplorer_Data_Table_classCallCheck(this, IndicatorExplorerDataTable);\n    return _super.call(this, props);\n  }\n  IndicatorExplorer_Data_Table_createClass(IndicatorExplorerDataTable, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      if (this.props.results.length !== 0) {\n        this.loadGoogleVizApi(this.props.results, this.props.filterYear);\n      }\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      if (this.props.results.length !== 0) {\n        this.loadGoogleVizApi(this.props.results, this.props.filterYear);\n      }\n    }\n  }, {\n    key: \"loadGoogleVizApi\",\n    value: function loadGoogleVizApi(dataSet, selectedYear) {\n      var options = {\n        dataType: \"script\",\n        cache: true,\n        url: \"https://www.google.com/jsapi\"\n      };\n      jquery_default().ajax(options).done(function () {\n        google.load(\"visualization\", \"1\", {\n          packages: [\"corechart\"],\n          callback: function callback() {\n            var data = new google.visualization.DataTable();\n            dataSet = dataSet.table;\n            for (var i = 0; i < dataSet[0].length; i++) {\n              data.addColumn('string', dataSet[0][i] + '<br/><br/>');\n            }\n            for (var j = 1; j < dataSet.length; j++) {\n              var rowItem = dataSet[j];\n              var row = [];\n              if (rowItem[1].toString() === selectedYear) {\n                for (var k = 0; k < rowItem.length; k++) {\n                  row.push(rowItem[k].toString());\n                }\n                data.addRow(row);\n              }\n            }\n          }\n        });\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var hiddenTable = {\n        display: 'none'\n      };\n      return /*#__PURE__*/react.createElement(\"div\", null, /*#__PURE__*/react.createElement(\"div\", {\n        id: \"tableD\"\n      }), /*#__PURE__*/react.createElement(\"div\", {\n        id: \"tableD2\",\n        style: hiddenTable\n      }));\n    }\n  }]);\n  return IndicatorExplorerDataTable;\n}(react.Component);\n\n;// CONCATENATED MODULE: ./js/components/IndicatorExplorer.Data.Maps.jsx\nfunction IndicatorExplorer_Data_Maps_typeof(obj) { \"@babel/helpers - typeof\"; return IndicatorExplorer_Data_Maps_typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, IndicatorExplorer_Data_Maps_typeof(obj); }\nfunction IndicatorExplorer_Data_Maps_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\nfunction IndicatorExplorer_Data_Maps_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\nfunction IndicatorExplorer_Data_Maps_createClass(Constructor, protoProps, staticProps) { if (protoProps) IndicatorExplorer_Data_Maps_defineProperties(Constructor.prototype, protoProps); if (staticProps) IndicatorExplorer_Data_Maps_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\nfunction IndicatorExplorer_Data_Maps_inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, \"prototype\", { writable: false }); if (superClass) IndicatorExplorer_Data_Maps_setPrototypeOf(subClass, superClass); }\nfunction IndicatorExplorer_Data_Maps_setPrototypeOf(o, p) { IndicatorExplorer_Data_Maps_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return IndicatorExplorer_Data_Maps_setPrototypeOf(o, p); }\nfunction IndicatorExplorer_Data_Maps_createSuper(Derived) { var hasNativeReflectConstruct = IndicatorExplorer_Data_Maps_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = IndicatorExplorer_Data_Maps_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = IndicatorExplorer_Data_Maps_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return IndicatorExplorer_Data_Maps_possibleConstructorReturn(this, result); }; }\nfunction IndicatorExplorer_Data_Maps_possibleConstructorReturn(self, call) { if (call && (IndicatorExplorer_Data_Maps_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } else if (call !== void 0) { throw new TypeError(\"Derived constructors may only return object or undefined\"); } return IndicatorExplorer_Data_Maps_assertThisInitialized(self); }\nfunction IndicatorExplorer_Data_Maps_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\nfunction IndicatorExplorer_Data_Maps_isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction IndicatorExplorer_Data_Maps_getPrototypeOf(o) { IndicatorExplorer_Data_Maps_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return IndicatorExplorer_Data_Maps_getPrototypeOf(o); }\n\n\nvar IndicatorExplorerDataMap = /*#__PURE__*/function (_Component) {\n  IndicatorExplorer_Data_Maps_inherits(IndicatorExplorerDataMap, _Component);\n  var _super = IndicatorExplorer_Data_Maps_createSuper(IndicatorExplorerDataMap);\n  function IndicatorExplorerDataMap(props) {\n    var _this;\n    IndicatorExplorer_Data_Maps_classCallCheck(this, IndicatorExplorerDataMap);\n    _this = _super.call(this, props);\n    _this.state = {\n      containerWidth: '100%',\n      containerHeight: '450px'\n    };\n    _this.handleResize = _this.handleResize.bind(IndicatorExplorer_Data_Maps_assertThisInitialized(_this));\n    return _this;\n  }\n  IndicatorExplorer_Data_Maps_createClass(IndicatorExplorerDataMap, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      window.addEventListener('resize', this.handleResize);\n      this.handleResize();\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      window.addEventListener('resize', this.handleResize);\n      if (this.props.geo.length !== 0) {\n        this.loadGoogleVizApi(this.props.geo, this.props.filterYear, this.props.filter, '100%', '100%');\n      }\n    }\n  }, {\n    key: \"handleResize\",\n    value: function handleResize() {\n      var windowWidth = document.body.clientWidth;\n      var windowHeight = document.body.clientHeight;\n      var element = document.getElementById('map');\n      var positionInfo = element.getBoundingClientRect();\n      var height = positionInfo.height;\n      var width = positionInfo.width;\n      if (windowWidth <= 768) {\n        windowWidth = width;\n        windowHeight = '225px';\n      } else {\n        windowWidth = '100%';\n        windowHeight = '450px';\n      }\n      document.getElementById('map').style.height = windowHeight;\n      document.getElementById('map').style.width = windowWidth;\n      if (this.props.geo.length !== 0) {\n        //this.loadGoogleVizApi(this.props.geo,this.props.filterYear,this.props.filter,windowWidth,windowHeight);\n      }\n    }\n  }, {\n    key: \"loadGoogleVizApi\",\n    value: function loadGoogleVizApi(resultSet, selectedYear, filter, winWidth, winHeight) {\n      var options = {\n        dataType: \"script\",\n        cache: true,\n        url: \"https://www.google.com/jsapi\"\n      };\n      jquery_default().ajax(options).done(function () {\n        google.load(\"visualization\", \"1\", {\n          packages: ['controls', 'bar', 'corechart', 'geochart', 'table'],\n          callback: function callback() {\n            var dataSet = resultSet.table;\n            var filterItem = '';\n            if (filter === 'NA') {\n              filterItem = dataSet[0][2];\n            } else {\n              filterItem = filter;\n            }\n            var filterRow = 0;\n            var rows = [];\n            var rowHeader = [];\n            rowHeader.push(dataSet[0][0]);\n            for (var i = 0; i <= dataSet[0].length - 1; i++) {\n              if (dataSet[0][i].toString() !== 'Year') {\n                if (dataSet[0][i].toString() === filterItem) {\n                  filterRow = i;\n                  rowHeader.push(dataSet[0][i]);\n                }\n              }\n            }\n            rows.push(rowHeader);\n            for (var j = 1; j <= dataSet.length - 1; j++) {\n              var rowItem = dataSet[j];\n              var row = [];\n              if (rowItem[1].toString() === selectedYear) {\n                rows.push([rowItem[0], rowItem[filterRow]]);\n                /* for(let k=0;k<rowItem[k].length;k++) {\r\n                     if(rowItem[k].toString() !== selectedYear) {\r\n                        row.push(rowItem[k]);\r\n                     }\r\n                 }*/\n              }\n            }\n\n            /*if(resultSet.plot_type === 2) {\r\n              var map = new google.visualization.ChartWrapper({\r\n                  'chartType': 'GeoChart',\r\n                  'containerId': 'map',\r\n                  'options': {\r\n                      region: 'ZA',\r\n                      displayMode: 'markers',\r\n                      resolution: 'provinces',\r\n                      theme: 'material',\r\n                      colorAxis: {colors: ['#FED976', '#FC4E2A', '#800026']},\r\n                      height: winHeight,\r\n                      width:winWidth,\r\n                      tooltip: { isHtml: true },\r\n                      keepAspectRatio: true\r\n                  }\r\n              });\r\n                  map.setDataTable(rows);\r\n                                map.draw();\r\n              }*/\n          }\n        });\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return /*#__PURE__*/react.createElement(\"div\", null, /*#__PURE__*/react.createElement(\"div\", {\n        id: \"map\",\n        style: {\n          fontSize: '9px',\n          fontFamily: 'Montserrat',\n          fontWeight: '500',\n          marginTop: '0px'\n        }\n      }));\n    }\n  }]);\n  return IndicatorExplorerDataMap;\n}(react.Component);\n\n;// CONCATENATED MODULE: ./js/components/IndicatorExplorer.Data.Box.jsx\nfunction IndicatorExplorer_Data_Box_typeof(obj) { \"@babel/helpers - typeof\"; return IndicatorExplorer_Data_Box_typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, IndicatorExplorer_Data_Box_typeof(obj); }\nfunction IndicatorExplorer_Data_Box_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\nfunction IndicatorExplorer_Data_Box_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\nfunction IndicatorExplorer_Data_Box_createClass(Constructor, protoProps, staticProps) { if (protoProps) IndicatorExplorer_Data_Box_defineProperties(Constructor.prototype, protoProps); if (staticProps) IndicatorExplorer_Data_Box_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\nfunction IndicatorExplorer_Data_Box_inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, \"prototype\", { writable: false }); if (superClass) IndicatorExplorer_Data_Box_setPrototypeOf(subClass, superClass); }\nfunction IndicatorExplorer_Data_Box_setPrototypeOf(o, p) { IndicatorExplorer_Data_Box_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return IndicatorExplorer_Data_Box_setPrototypeOf(o, p); }\nfunction IndicatorExplorer_Data_Box_createSuper(Derived) { var hasNativeReflectConstruct = IndicatorExplorer_Data_Box_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = IndicatorExplorer_Data_Box_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = IndicatorExplorer_Data_Box_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return IndicatorExplorer_Data_Box_possibleConstructorReturn(this, result); }; }\nfunction IndicatorExplorer_Data_Box_possibleConstructorReturn(self, call) { if (call && (IndicatorExplorer_Data_Box_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } else if (call !== void 0) { throw new TypeError(\"Derived constructors may only return object or undefined\"); } return IndicatorExplorer_Data_Box_assertThisInitialized(self); }\nfunction IndicatorExplorer_Data_Box_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\nfunction IndicatorExplorer_Data_Box_isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction IndicatorExplorer_Data_Box_getPrototypeOf(o) { IndicatorExplorer_Data_Box_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return IndicatorExplorer_Data_Box_getPrototypeOf(o); }\n\n\n\n\n\n\nvar IndicatorExplorerDataBox = /*#__PURE__*/function (_Component) {\n  IndicatorExplorer_Data_Box_inherits(IndicatorExplorerDataBox, _Component);\n  var _super = IndicatorExplorer_Data_Box_createSuper(IndicatorExplorerDataBox);\n  function IndicatorExplorerDataBox(props) {\n    var _this;\n    IndicatorExplorer_Data_Box_classCallCheck(this, IndicatorExplorerDataBox);\n    _this = _super.call(this, props);\n    _this.state = {\n      csv: []\n    };\n    return _this;\n  }\n  IndicatorExplorer_Data_Box_createClass(IndicatorExplorerDataBox, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      if (this.props.results.length > 0) {\n        this.loadGoogleVizApi(this.props.results, this.props.filterYear);\n      }\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      if (this.props.results.length !== 0) {\n        this.loadGoogleVizApi(this.props.results, this.props.filterYear);\n      }\n    }\n  }, {\n    key: \"loadGoogleVizApi\",\n    value: function loadGoogleVizApi(dataSet, selectedYear) {\n      var options = {\n        dataType: \"script\",\n        cache: true,\n        url: \"https://www.google.com/jsapi\"\n      };\n      jquery_default().ajax(options).done(function () {\n        google.load(\"visualization\", \"1\", {\n          packages: ['controls', 'bar', 'corechart', 'geochart'],\n          callback: function callback() {\n            var data = new google.visualization.DataTable();\n            dataSet = dataSet.table;\n            var rows = [];\n            var rowHeader = [];\n            for (var i = 0; i <= dataSet[0].length - 1; i++) {\n              rowHeader.push(dataSet[0][i]);\n            }\n            rows.push(rowHeader);\n            for (var j = 1; j <= dataSet.length - 1; j++) {\n              var rowItem = dataSet[j];\n              var row = [];\n              if (rowItem[1].toString() === selectedYear) {\n                for (var k = 0; k < rowItem.length; k++) {\n                  row.push(rowItem[k].toString());\n                }\n                rows.push(row);\n              }\n            }\n\n            //var data = new google.visualization.arrayToDataTable(rows);\n\n            var data = new google.visualization.DataTable(document.getElementById('table'));\n            var csvData = google.visualization.dataTableToCsv(data);\n\n            //var meta = 'Definition:' + ',{{ indicator.definition }}' + '\\n' + 'Unit:' + ',{{ indicator.unit }}' + '\\n'  +'Frequency:' + ',{{ indicator.frequency }}' + '\\n' + 'Theme:' + ',{{ indicator.theme }}' + '\\n' + 'Sub-theme:' + ',{{ indicator.sub_theme }}' + '\\n' + 'Source' + ',{{ indicator.source }}' + '\\n';\n\n            //var csvString = rowHeader.join(',') + '\\n' + csvData + '\\n';\n\n            //document.getElementById('csv').value=csvString;\n          }\n        });\n      });\n    }\n  }, {\n    key: \"renderDataSet\",\n    value: function renderDataSet(dataSetType, filter) {\n      switch (dataSetType) {\n        case \"table\":\n          return /*#__PURE__*/react.createElement(IndicatorExplorerDataTable, {\n            results: this.props.results,\n            key: dataSetType,\n            filterYear: this.props.filterYear\n          });\n          break;\n        case \"chart\":\n          return /*#__PURE__*/react.createElement(IndicatorExplorerDataChart, {\n            data: this.props.results,\n            key: dataSetType,\n            filterYear: this.props.filterYear\n          });\n          break;\n        case \"map\":\n          return /*#__PURE__*/react.createElement(IndicatorExplorerDataMap, {\n            geo: this.props.results,\n            key: dataSetType,\n            filterYear: this.props.filterYear,\n            filter: filter\n          });\n          break;\n      }\n    }\n  }, {\n    key: \"download\",\n    value: function download(downloadType) {\n      switch (downloadType) {\n        case \"table\":\n          this.downloadTable();\n          break;\n        case \"chart\":\n          this.downloadChart();\n          break;\n      }\n    }\n  }, {\n    key: \"downloadTable\",\n    value: function downloadTable() {\n      var encodedUri = 'data:application/csv;charset=utf-8,' + encodeURIComponent(document.getElementById('csv').value);\n      this.downloadData(encodedUri, 'data.csv');\n    }\n  }, {\n    key: \"downloadData\",\n    value: function downloadData(uri, filename) {\n      var link = document.createElement(\"a\");\n      link.download = filename;\n      link.href = uri;\n      link.target = '_blank';\n      document.body.appendChild(link);\n      link.click(function (e) {\n        e.preventDefault();\n        document.body.removeChild(link);\n      });\n    }\n  }, {\n    key: \"downloadChart\",\n    value: function downloadChart() {\n      var dataUri = document.getElementById('chartPng').value;\n      this.downloadData(dataUri, 'chart.png');\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n      var downloadEvent = '';\n      if (this.props.resultType !== 'map') {\n        downloadEvent = /*#__PURE__*/react.createElement(\"div\", {\n          className: \"ie-button-download\",\n          onClick: function onClick() {\n            return _this2.download(_this2.props.resultType);\n          }\n        }, \"Download\");\n      }\n      return /*#__PURE__*/react.createElement(\"div\", {\n        id: \"dashboard\",\n        style: {\n          width: '100%'\n        }\n      }, /*#__PURE__*/react.createElement(\"div\", {\n        id: \"card\",\n        className: \"ie-box-card\"\n      }, /*#__PURE__*/react.createElement(\"div\", {\n        className: \"ie-box-card-header\"\n      }, /*#__PURE__*/react.createElement(\"div\", {\n        className: \"row\"\n      }, /*#__PURE__*/react.createElement(\"div\", {\n        className: \"col ml-3\"\n      }, this.props.resultTitle), /*#__PURE__*/react.createElement(\"div\", {\n        className: \"col-0 mt-2 mr-4 float-right\"\n      }, downloadEvent))), /*#__PURE__*/react.createElement(\"div\", {\n        className: \"col ie-table\"\n      }, /*#__PURE__*/react.createElement(\"div\", {\n        className: \"mt-2 ml-3 mb-4\"\n      }, this.renderDataSet(this.props.resultType, this.props.filter)), /*#__PURE__*/react.createElement(\"input\", {\n        type: \"hidden\",\n        id: \"csv\"\n      }), /*#__PURE__*/react.createElement(\"canvas\", {\n        style: {\n          display: 'none'\n        }\n      }))));\n    }\n  }]);\n  return IndicatorExplorerDataBox;\n}(react.Component);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///589\n")},94341:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "Z": () => (/* binding */ IndicatorExplorerDataCardHeader)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(67294);\n/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(19755);\n/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(jquery__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var select2__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(40686);\n/* harmony import */ var select2__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(select2__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var reactstrap__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(85677);\n/* harmony import */ var reactstrap__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(10684);\n/* harmony import */ var reactstrap__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(36955);\nfunction _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\nfunction _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\n// import Select from \'./Select\';\n\n\n\nvar IndicatorExplorerDataCardHeader = /*#__PURE__*/function (_Component) {\n  _inherits(IndicatorExplorerDataCardHeader, _Component);\n  var _super = _createSuper(IndicatorExplorerDataCardHeader);\n  function IndicatorExplorerDataCardHeader(props) {\n    var _this;\n    _classCallCheck(this, IndicatorExplorerDataCardHeader);\n    _this = _super.call(this, props);\n    _this.state = {\n      loader: true\n    };\n    _this.resetForm = _this.resetForm.bind(_assertThisInitialized(_this));\n    _this.filterData = _this.filterData.bind(_assertThisInitialized(_this));\n    // this.enableFilter = this.enableFilter.bind(this);\n    return _this;\n  }\n  _createClass(IndicatorExplorerDataCardHeader, [{\n    key: "componentDidMount",\n    value: function componentDidMount() {\n      setTimeout(function () {\n        this.setState({\n          loader: false\n        });\n      }.bind(this), 5000); // wait 5 seconds, then reset to false\n      jquery__WEBPACK_IMPORTED_MODULE_1___default()(\'#selector\').select2({\n        placeholder: "Empty"\n      });\n      jquery__WEBPACK_IMPORTED_MODULE_1___default()(\'#selector\').on(\'select2:select\', function (e) {\n        var filterValue = document.getElementById(\'selector\').value;\n        if (filterValue > 0) {\n          document.getElementById(\'button-search\').classList.remove(\'ie-button-inactive\');\n        } else {\n          document.getElementById(\'button-search\').classList.add(\'ie-button-inactive\');\n        }\n      });\n    }\n  }, {\n    key: "resetForm",\n    value: function resetForm() {\n      console.log(\'reset\');\n      jquery__WEBPACK_IMPORTED_MODULE_1___default()(\'#selector\').select2(\'val\', 0);\n      document.getElementById(\'button-search\').classList.add(\'ie-button-inactive\');\n      this.props.toggle(false);\n    }\n  }, {\n    key: "filterData",\n    value: function filterData() {\n      var selectedIndex = document.getElementById(\'selector\').value;\n      console.log(\'filtered\', selectedIndex);\n      this.props.filterHook(selectedIndex);\n    }\n  }, {\n    key: "render",\n    value: function render() {\n      var _this2 = this;\n      console.log(\'current option\', this.props.datasetOptions);\n      var selectorOptions = this.props.datasetOptions.map(function (dataset, index) {\n        // <option key={index} value={dataset[0]}>{dataset[1].match(/.{1,10}(\\s|$)/g)}</option>\n        return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement("option", {\n          key: index,\n          value: dataset[0]\n        }, dataset[1]);\n      });\n\n      //populate select option with the current indicator\n      var currentOption = this.props.datasetOptions.map(function (dataset, index) {\n        if (dataset[0] === _this2.props.indicator_id) {\n          return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement("option", {\n            key: index,\n            value: dataset[0]\n          }, dataset[1]);\n        }\n      });\n      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", {\n        className: "row"\n      }, this.state.loader ? /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(reactstrap__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z, {\n        id: "loader",\n        isOpen: this.state.loader,\n        className: "modal-dialog-centered loader"\n      }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(reactstrap__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z, null, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", {\n        className: "row"\n      }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", {\n        className: "col-2"\n      }), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", {\n        className: "col-0 ml-3 pt-4"\n      }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(reactstrap__WEBPACK_IMPORTED_MODULE_5__/* ["default"] */ .Z, {\n        type: "grow",\n        color: "secondary",\n        size: "sm"\n      }), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(reactstrap__WEBPACK_IMPORTED_MODULE_5__/* ["default"] */ .Z, {\n        type: "grow",\n        color: "success",\n        size: "sm"\n      }), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(reactstrap__WEBPACK_IMPORTED_MODULE_5__/* ["default"] */ .Z, {\n        type: "grow",\n        color: "danger",\n        size: "sm"\n      }), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(reactstrap__WEBPACK_IMPORTED_MODULE_5__/* ["default"] */ .Z, {\n        type: "grow",\n        color: "warning",\n        size: "sm"\n      })), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", {\n        className: "col-0 pt-4 pl-4 float-left"\n      }, "Loading Content...")), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement("br", null))) : \'\', /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", {\n        className: "col-6"\n      }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", {\n        className: "row"\n      }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", {\n        className: "col ie-element-label"\n      }, "Choose Your Indicator:")), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", {\n        className: "row"\n      }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", {\n        className: "col"\n      }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement("select", {\n        id: "selector",\n        className: "ie-dropdown mb-2",\n        onChange: this.enableFilter\n      }, currentOption.length ? currentOption : /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement("option", {\n        value: "0"\n      }, "Empty"), selectorOptions))), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", {\n        className: "ie-spacer"\n      }), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", {\n        className: "row"\n      }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", {\n        className: "col-6"\n      }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", {\n        id: "button-search",\n        className: "ie-button-search ie-button-search-explorer ie-button-inactive",\n        onClick: this.filterData\n      }, "Search")), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", {\n        className: "col-6"\n      }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", {\n        className: "ie-button-reset",\n        onClick: this.resetForm\n      }, "Reset Form")))), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", {\n        className: "col-5 explainer-text"\n      }, "The data explorer provides access to the different indicators used by the South African Cities Network in the State of Cities Report."));\n    }\n  }]);\n  return IndicatorExplorerDataCardHeader;\n}(react__WEBPACK_IMPORTED_MODULE_0__.Component);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///94341\n')}}]);